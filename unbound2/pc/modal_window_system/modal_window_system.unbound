(def macro DEFAULT_MODAL_WINDOW_CONTENT_BLOCK_APPEAR_ANIMATION (_trigger:expression, _duration:expression, _delay:expression)
	(controller $Animation
		(bindcall play
			watch = false
			keyframes = "[	{ time: 0,						to: { alpha:0, visualOffsetY: 10px }},
							{ time: _delay,					to: { alpha:0, visualOffsetY: 10px }},
							{ time: _delay + _duration,		to: { alpha:1, visualOffsetY: 0px }, easing:Easing.quad_out }]"
			action = "kill"
			(bind trigger "_trigger")
		)
	)
)

(def constant MODAL_WINDOW_SYSTEM_PURCHASABLE_ITEM_ICON {
	CAMO:				'ModalWindowSystemCamouflageIcon',
	CAMO_REPAINT:		'ModalWindowSystemCamouflageIconRepaint',
	ECONOMIC_BOOST:		'ModalWindowSystemEconomicBoostIcon',
	MODERNIZATION:		'ModalWindowSystemModernizationIcon',
	MODULE:				'ModalWindowSystemModuleIcon',
	SIGNAL:				'ModalWindowSystemSignalIcon',
	SKILL:				'ModalWindowSystemSkillIcon'
})

(def constant CREW_SKILL_TYPE {
	SKILL:		'Skill',
	VANITY:		'Vanity',
	TALENT:		'Talent'
})

(def element ModalWindowSystemExpendableIconWithHeaderAndSubheader (_headerIconType:str='', _imageUrl:str='', _imageWidth:number=0, _imageHeight:number=0, _maxWidth:number=9999,
																	_headerText:str='', _subheaderText:str='', _unifiedStatus:str='', _data:dict={})
	(scope
		(var maxHeaderSubheaderWidth:number = "_maxWidth - (_imageWidth + SXS) + 3 + 3") 
	)

	(style
		(flow = "horizontal")
		(align = "middle")
		(bind minHeight "_imageHeight")
		(maxWidth = 100%)
		(backgroundColor = "NO_COLOR")
	)

	(block
		(style
			(align = "top")
			(marginRight = "SXS")
			(height = 100%)
		)

		(controller $Instance
			(bind renderer "_headerIconType")
			(args
				_data = "_data"
			)
		)
	)

	(block
		(style (maxWidth = 100%))

		(element ModalWindowSystemHeaderSubheaderText
			_headerText =		"_headerText"
			_subheaderText =	"_subheaderText"
			_unifiedStatus =	"_unifiedStatus"
			_maxWidth =			"maxHeaderSubheaderWidth"
		)
	)
)

(def element ModalWindowSystemHeaderSubheaderText (_headerText:str, _subheaderText:str, _unifiedStatus:str, _maxWidth:number)
	(macro UNIFIED_STATUS_TO_COLOR_AND_ALPHA "_unifiedStatus" "'textColor'" "'textAlpha'")
	(style (maxWidth = 100%))

	(tf
		(name = 'modalWindowSystemHeader')
		(class $TextDefaultBold19NM)
		(style
			(maxWidth = "_maxWidth")
			(leading = -4)
			(bind alpha "textAlpha")
			(bind textColor "textColor")
		)

		(bind text "_headerText")
	)

	(tf
		(bind visible "_subheaderText != ''")
		(class $TextDefaultNM)
		(style
			(maxWidth = "_maxWidth")
			(marginTop = "S")
			(leading = -2)
			(bind alpha "textColor == SC.Ui_styles.SERVICE_COLORS.WHITE ? TC : 1")
			(bind textColor "textColor")
		)

		(bind text "_subheaderText")
	)
)


(def element ModalWindowSystemSignalIcon (_data:dict)
	(element SignalItemView
		_signalName = "_data.name"
	)
)

(def element ModalWindowSystemSkillIcon (_data:dict)
	(block
		(controller $Instance renderer='CrewSkillIconView'
			(bind enabled "_data.type == CREW_SKILL_TYPE.SKILL")
			(args
				_name =			"_data.name"
				_isLearned =	false
			)
		)

		(controller $Instance renderer='CrewTalentItemView'
			(bind enabled "_data.type == CREW_SKILL_TYPE.TALENT")
			(args
				_talentId =		"_data.id"
				_isForceWhite =	true
			)
		)
	)

	(block
		(class $FullsizeAbsolute)

		(controller $Instance renderer='CrewSkillEpicIcon'
			(bind enabled "'isEpic' in _data && _data.isEpic")
		)
	)
)

(def element ModalWindowSystemModernizationIcon (_data:dict)
	(element ModernizationItemView
		_name =				"_data.name"
		_isRecommended =	"_data.isRecommended"
	)
)

(def element ModalWindowSystemModuleIcon (_data:dict)
	(element ModuleItemView
		_moduleInfoType =	"_data.moduleInfoType"
		_isExplored =		"_data.isExplored"
	)
)



	
	
	

	
	

	
	
	

	
	
	
	
	



(def element ModalWindowSystemPurchaseItemPriceAndInfo (_priceInfo:dict = {}, _optionalPriceInfo:dict = {}, _summaryPriceInfo:dict = {}, _questionString:str = '', _isDeficit:bool = false, _deficit:number = 0,
														_isPriceForceShown:bool = false, _additionalInfoUnifiedStatus:str = "SC.Ui_styles.UNIFIED_STATUS.DEFAULT", _additionalInfoStr:str = '', _isWarningText:bool = false)
	(scope
		(event evDelayedUpdate)
		(var isAdditionalPurchaseInfoShown:bool = "!_isDeficit && !_additionalInfoStr.empty")
		(var isAdditionalInfoShown:bool = "_isDeficit || !_additionalInfoStr.empty")
		(var visibleDeficitValue:number = 0)
		(bind visibleDeficitValue "_deficit" watch=false init=true (event "evDelayedUpdate"))
	)

	(dispatch evDelayedUpdate delay="_deficit > 0 ? 0 : 0.15" (bind trigger "_deficit"))

	(style (width = 100%) (align = "center"))

	(block
		(controller $Instance renderer='PriceTagWithQuestion'
			(bind enabled "!_isWarningText")
			(args
				_questionText =			"_questionString"
				_priceInfo =			"_isPriceForceShown	? 'finalPrice' in _priceInfo			? _priceInfo			: null
															: _priceInfo.finalPrice					? _priceInfo			: null"
				_optionalPriceInfo =	"_isPriceForceShown	? 'finalPrice' in _optionalPriceInfo	? _optionalPriceInfo	: null
															: _optionalPriceInfo.finalPrice			? _optionalPriceInfo	: null"
				_summaryPriceInfo =		"_summaryPriceInfo"
				_isDeficit =			"_isDeficit"
				_isPriceForceShown =	"_isPriceForceShown"
			)
		)

		(tf
			(bind visible "_isWarningText")
			(class $TextDefault25NM)
			(style (textColor = "SC.Ui_styles.SERVICE_COLORS.RED"))
			(text = 'IDS_NOT_ENOUGH_FUNDS')
		)
	)

	(block
		(style (align = "center") (bind marginTop "isAdditionalInfoShown ? M : 0px"))

		(block
			(style
				(alpha = "_isDeficit ? 1 : 0")
				(ubScaleY = "_isDeficit ? 1 : 0")
			)

			(element PriceDeficit
				_priceInfo =	"_priceInfo"
				_deficit =		"visibleDeficitValue"
				_size =			"SIZE.MEDIUM"
			)

			(controller $Animation
				(bindcall play
					duration = 0.15
					from	 = "{ alpha: 0, ubScaleY: 0 }"
					to		 = "{ alpha: 1, ubScaleY: 1 }"
					easing	 = "Easing.quad_out"
					action	 = "kill"
					reverse	 = "!_isDeficit"
					(bind trigger "_isDeficit")
				)
			)
		)

		(block
			(style
				(bind alpha "isAdditionalPurchaseInfoShown ? 1 : 0" watch=false)
				(bind ubScaleY "isAdditionalPurchaseInfoShown ? 1 : 0" watch=false)
			)

			(controller $Instance renderer='StatusLine'
				(bind enabled "!_additionalInfoStr.empty")
				(args
					_unifiedStatus =	"_additionalInfoUnifiedStatus"
					_text =				"_additionalInfoStr"
					_textClass =		'$TextDefault17NM'
				)
			)

			(controller $Animation
				(bindcall play
					duration = 0.15
					from	 = "{ alpha: 0, ubScaleY: 0 }"
					to		 = "{ alpha: 1, ubScaleY: 1 }"
					easing	 = "Easing.quad_out"
					action	 ="kill"
					reverse	= "!isAdditionalPurchaseInfoShown"
					(bind trigger "isAdditionalPurchaseInfoShown")
				)
			)
		)

		(controller $Animation
			(bindcall play
				duration = 0.15
				from	 = "{ marginTop: 0px }"
				to		 = "{ marginTop: M }"
				easing	 = "Easing.quad_out"
				action	 ="kill"
				reverse	= "!isAdditionalInfoShown"
				(bind trigger "isAdditionalInfoShown")
			)
		)
	)
)

(def element ModalWindowSystemPurchaseItemYesNoCloseButtons (_isDeficit:bool=false, _okMethods:array=[], _okDispatchedEv:str='', _closeDispatchedEv:str='', _customOkBtnName:str='', _isBtnOkGUIEventLocked:bool=false)
	(element ModalWindowSystemYesNoButtons
		_isBtnOkEnabled =			"!_isDeficit"
		_btnOkName =				"_customOkBtnName ?: 'btn_yes'"
		_btnOkDispatchedEv =		"_okDispatchedEv"
		_btnOkLabel =				'IDS_YES'
		_btnOkMethods =				"_okMethods"
		_isBtnOkGUIEventLocked =	"_isBtnOkGUIEventLocked"
		_btnNoLabel =				"_isDeficit ? 'IDS_CLOSE_BTN' : 'IDS_NO'"
		_btnNoDispatchedEv =		"_closeDispatchedEv"
	)
)

(def element ModalWindowSystemYesNoButtons (_isBtnOkEnabled:bool = true, _isForceBtnOkVisible:bool = false, _btnOkName:str = 'btn_yes', _btnOkLabel:str = 'IDS_YES', _btnOkDispatchedEv:str = '', _btnOkFocusIndex:number = 0, _isBtnOkDefaultFocused:bool = true,
											_btnOkMethods:array = [], _isBtnOkGUIEventLocked:bool = false, _isBtnNoEnabled:bool = true, _btnNoName:str = 'btn_cancel', _btnNoLabel:str = 'IDS_NO', _btnNoDispatchedEv:str = '',
											_btnNoFocusIndex:number = 1, _isBtnNoDefaultFocused:bool = false, _btnNoMethods:array = [], _isBtnNoGUIEventLocked:bool = false)
	(scope
		(var isBtnOkVisible:bool = "_isForceBtnOkVisible || _isBtnOkEnabled")
	)
	(style
		(flow = "horizontal")
		(width = 276px)
		(height = 32px)
	)

	(block
		(visible = "isBtnOkVisible")

		(style
			(position = "absolute")
			(alpha = "isBtnOkVisible ? 1 : 0")
			(visualOffsetY = "isBtnOkVisible ? 0px : 10px")
		)

		(element DefaultButton
			_width =			130
			_enabled =			"_isBtnOkEnabled"
			_name =				"_btnOkName"
			_isTransactionBtn =	true
			_label =			"_btnOkLabel"
			_dispatchedEv =		"_btnOkDispatchedEv"
			_focusIndex =		"_btnOkFocusIndex"
			_defaultFocused =	"_isBtnOkDefaultFocused"
			_methods =			"_btnOkMethods"
			_isGUIEventLocked =	"_isBtnOkGUIEventLocked"
		)

		(controller $Animation
			(bindcall play
				duration =	0.15
				delay =		0.1
				from =		"{ alpha: 0, visible:false, visualOffsetY: 10px }"
				to	 =		"{ alpha: 1, visible:true, visualOffsetY: 0px }"
				easing =	"Easing.quad_out"
				action =	"kill"
				reverse =	"!isBtnOkVisible"
				(bind trigger "isBtnOkVisible")
			)
		)
	)

	(block
		(style
			(position = "absolute")
			(left = "isBtnOkVisible ? 146px : 73px")
		)

		(element DefaultButton
			_width =			130
			_enabled =			"_isBtnNoEnabled"
			_name =				"_btnNoName"
			_label =			"_btnNoLabel"
			_dispatchedEv =		"_btnNoDispatchedEv"
			_focusIndex =		"_btnNoFocusIndex"
			_defaultFocused =	"_isBtnNoDefaultFocused"
			_methods =			"_btnNoMethods"
			_isGUIEventLocked =	"_isBtnNoGUIEventLocked"
		)

		(controller $Animation
			(bindcall play
				duration =	0.15
				from =		"{ left: 73px }"
				to =		"{ left: 146px }"
				easing =	"Easing.quad_out"
				action =	"kill"
				reverse =	"!isBtnOkVisible"
				(bind trigger "isBtnOkVisible")
			)
		)
	)
)