(def constant MISSING_PREF_COMMAND_NAME_HEIGHT 27)

(def constant ROW_TYPE {
	header:				'PrefRowHeader',
	control:			'PrefRowControl',
	keybinding:			'PrefRowKeyBinding',
	keybindingHeader:	'PrefRowKeybindingHeader'
})

(def constant OWNER_MODAL_TYPE {
	main:		'Main',
	secondary:	'Secondary'
})

(def constant SECONDARY_MODAL_WINDOW_TYPE {
	colorBlindness:	'color_blindness',
	crosshairs:		'crosshairs'
})

(def constant CONTROL_TYPE {
	switcher:				'PrefRowControllerSwitcher',
	sliderFloat:			'PrefRowControllerSliderFloat',
	sliderInt:				'PrefRowControllerSliderInt',
	inversedSliderFloat:	'PrefRowControllerSliderFloatInversed',
	itemChooser:			'PrefRowControllerItemChooser',
	modalOpenBtn:			'PrefRowControllerModalOpenBtn'
})

(def constant COLORBLIND_MODE_ON_PARAM_LIST "[
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'graphics.postFX.colorblind.intensity',	data: { multiplier: 100 },	isFirstInNestedSection: true }
]")

(def constant VSYNC_ENABLED_PARAM_LIST "[
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,	option: 'graphics.tripleBuffering',	isFirstInNestedSection: true, isLastInSection: true }
]")

(def constant EARS_PARAM_LIST "[
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,	option: 'battle.ears.showNickname', isFirstInNestedSection: true, isLastInSection: true }
]")



(def constant LIMITED_SOUND_MIXING_PRESET_PARAM_LIST "[
	{ label: 'IDS_OVERALL_SOUND_EFFECTS_VOLUME',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,		option: '',	data: { multiplier: 100 },	isFirstInNestedSection: true }
]")

(def constant DETAILED_SOUND_MIXING_PRESET_PARAM_LIST "[
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'sound.volume.world',	data: { multiplier: 100 }, isFirstInNestedSection: true },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'sound.volume.ui',		data: { multiplier: 100 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'sound.volume.engines',	data: { multiplier: 100 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'sound.volume.shoot',	data: { multiplier: 100 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'sound.volume.damage',	data: { multiplier: 100 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'sound.narrowDynamicRange' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'sound.toneDefeat' }
]")

(def constant DETAILED_VOICECHAT_PARAM_LIST "[
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderInt,	option: 'sound.voice.chat.outputVolume',	isFirstInNestedSection: true },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'sound.voice.chat.device',			data: { dropdownWidth: 260 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderInt,	option: 'sound.voice.chat.inputVolume' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'sound.voice.chat.activationMethod' }
]")

(def constant MONITOR_COLORBLIND_DATA "[
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.postFX.colorblind.mode',		isLastInSection: true,
		nestedGroups: {
			SC.Ui_prefs.COLORBLIND_MODE.OFF:	[],
				'MODE_ON':	COLORBLIND_MODE_ON_PARAM_LIST
			},
			nestedGroupsRemap: {
				SC.Ui_prefs.COLORBLIND_MODE.DEUTERANOPIA:	'MODE_ON',
				SC.Ui_prefs.COLORBLIND_MODE.PROTANOPIA:		'MODE_ON',
				SC.Ui_prefs.COLORBLIND_MODE.TRITANOPIA:		'MODE_ON'
			}
		}
	]"
)

(def constant PREFS_SCREEN_DATA "[
	{ label: 'IDS_PREFERENCES_SCREEN_SECTION_HEADER_COMMON_SETTINGS',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'monitor.index',	data: { dropdownWidth: 260 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'monitor.windowMode' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'monitor.resolution' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'monitor.uiScale', data: { itemChooserListRenderer: 'UiScaleItemRenderer', itemChooserSelectedRenderer: 'UiScalePickedItemRenderer' } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'graphics.gamma',	data: { isContextual: true, intervalsCount: 22 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.vsync',	isLastInSection: true,
	  nestedGroups: {
		SC.Ui_prefs.VSYNC.ENABLED:	VSYNC_ENABLED_PARAM_LIST,
		SC.Ui_prefs.VSYNC.DISABLED:	[]
	  }
	},

	{ label: 'IDS_PREFERENCES_SCREEN_SECTION_HEADER_SPECIAL_OPPORTUNITIES',		type: ROW_TYPE.header },
	{ label: 'IDS_MW_OPENER_COLORBLIND_MODE',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.modalOpenBtn,	isLastInSection: true,
	  data: {	modalBtnMethods: [{ type: 'inputMapping.onRequest', name: 'openPrefsModalColorBlindness', args: {} }],
				tooltipInfo: { template: 'PrefRowCommonTooltip' } }
	}
]")

(def constant PREFS_GRAPHICS_DATA "[
	{ label: 'IDS_PREFERENCES_GRAPHICS_SECTION_HEADER_PRESET',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.preset',	data: { maxDropdownHeight: 240 },	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_GRAPHICS_SECTION_HEADER_COMMON_SETTINGS',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.texture.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.texture.filtering',	data: { maxDropdownHeight: 240 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.maxFrameRate',		data: { maxDropdownHeight: 240 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.postFX.fidelityFX_CAS' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.browser.hardwareAcceleration' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.GUI.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.GUI.contrast',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_GRAPHICS_SECTION_HEADER_SMOOTHING',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.msaa.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.postFX.fxaa.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'graphics.postFX.txaa',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_GRAPHICS_SECTION_HEADER_ENVIRONMENT',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.sea.simulation.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.forest.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.camera.farPlane' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.object.lod' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.sea.reflection.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.sea.reflection.screenSpace.quality',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_GRAPHICS_SECTION_HEADER_EFFECTS',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,			option: 'graphics.particle.preset' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,			option: 'graphics.particle.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,			option: 'graphics.clouds.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,			option: 'graphics.shadow.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,			option: 'graphics.lighting.dynamic.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,			option: 'graphics.postFX.quality' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,				option: 'graphics.postFX.dof' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,				option: 'graphics.gameLogic.preset' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,				option: 'graphics.GUI.effects' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.inversedSliderFloat,	option: 'graphics.fog.alpha',	isLastInSection: true }
]")

(def constant PREFS_SOUND_DATA "[
	{ label: 'IDS_PREFERENCES_SOUND_SECTION_HEADER_COMMON_SETTINGS',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	data: { multiplier: 100 },	option: 'sound.volume.master' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'sound.source' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'graphics.sound.quality',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_SOUND_SECTION_HEADER_MUSIC',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	data: { multiplier: 100 },	option: 'sound.music.dockVolume' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	data: { multiplier: 100 },	option: 'sound.music.battleVolume' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'sound.music.mod',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_SOUND_SECTION_HEADER_EFFECTS',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'sound.mixingPreset',
	  nestedGroups: {
		SC.Ui_prefs.SOUND_MIXING_PRESET.ORIGINAL:	[],
		SC.Ui_prefs.SOUND_MIXING_PRESET.CINEMATIC:	[],
		SC.Ui_prefs.SOUND_MIXING_PRESET.SIMPLIFIED:	[],
		SC.Ui_prefs.SOUND_MIXING_PRESET.NIGHT:		[],
		SC.Ui_prefs.SOUND_MIXING_PRESET.CUSTOM:		DETAILED_SOUND_MIXING_PRESET_PARAM_LIST
	  }
	},
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,	option: 'sound.foghorn.enabled',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_SOUND_SECTION_HEADER_VOICEACTING',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,		option: 'sound.volume.voice',		data: { multiplier: 100 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,		option: 'sound.voice.package',		data: { dropdownWidth: 260 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,		option: 'sound.voice.mod',			data: { dropdownWidth: 260 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,			option: 'sound.quickCommands' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,		option: 'sound.voiceOverEffect',	data: { multiplier: 100 },	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_SOUND_SECTION_HEADER_VOICECHAT',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,	option: 'sound.voice.chat.enabled',		isLastInSection: true,
	  nestedGroups: {
		SC.Ui_prefs.VOICE_CHAT.ENABLED:		DETAILED_VOICECHAT_PARAM_LIST,
		SC.Ui_prefs.VOICE_CHAT.DISABLED:	[]
	  }
	}
]")

(def constant PREFS_BATTLE_UI_DATA "[
	{ label: 'IDS_CROSSHAIR',	type: ROW_TYPE.header },
	{ label: 'IDS_MW_OPENER_BATTLEUI_CROSSHAIR',	type: ROW_TYPE.control,	controlType: CONTROL_TYPE.modalOpenBtn,		isLastInSection: true,
	  data: {	modalBtnMethods: [{ type: 'inputMapping.onRequest', name: 'openPrefsModalCrosshairs', args: {} }],
				tooltipInfo: { template: 'PrefRowCommonTooltip', extraData: { customHeader: 'IDS_MW_OPENER_BATTLEUI_CROSSHAIR_TOOLTIP_HEADER' } } }
	},

	{ label: 'IDS_INTERFACE_OPTIONS',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'battle.altVision.mode' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.ears.enabled',
		nestedGroups: {
			SC.Ui_prefs.EARS.ENABLED:	EARS_PARAM_LIST,
			SC.Ui_prefs.EARS.DISABLED:	[]
		}
	},
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.showPerformance' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.showAdditionalDamageCounters' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.enableBattleChat',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_BATTLEUI_SECTION_HEADER_INDICATORS',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'battle.terrain.shooting.mode' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.weapon.indicator.simultaneousReload' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher, 	option: 'ui.showLampVisibility' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher, 	option: 'ui.alwaysShowModifiersTimers',	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_BATTLEUI_SECTION_HEADER_INGAME_PROCESS',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.itemChooser,	option: 'battle.autoPilot.mode', isLastInSection: true }
]")

(def constant PREFS_CAMERA_DATA "[
	{ label: 'IDS_PREFERENCES_CAMERA_SECTION_HEADER_POSITION',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'battle.camera.fov',	data: { intervalsCount: 100, multiplier: 100 } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'battle.camera.height',	data: { intervalsCount: 20, isContextual: true, multiplier: 10 },	isLastInSection: true },

	{ label: 'IDS_PREFERENCES_CAMERA_SECTION_HEADER_BEHAVIOUR',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.autoTrackTarget.enabled' },
	#{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.wheelTransition.enabled' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.autoChangePosition.enabled' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.observeYawRestore.enabled' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.damageEffect.enabled',	isLastInSection: true }
]")

(def constant PREFS_MOUSE_DATA "[
	{ label: 'IDS_PREFERENCES_MOUSE_SECTION_HEADER_MOUSE',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'ui.mouse.sensivity',		data: { isContextual: true } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.sliderFloat,	option: 'ui.mouse.wheelSensivity',	data: { isContextual: true } },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'battle.camera.signY.inverted',		isLastInSection: true }
]")

(def constant PREFS_OTHER_DATA "[
	{ label: 'IDS_PREFERENCES_OTHER_SECTION_HEADER_ADDITIONAL_SETTINGS',	type: ROW_TYPE.header },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.showPortClock' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.skipVideo' },
	{ type: ROW_TYPE.control,	controlType: CONTROL_TYPE.switcher,		option: 'ui.enableLanguageBar'},
	{ label: 'IDS_PREFERENCES_OTHER_SECTION_HEADER_ADDITIONAL_CONTENT',		type: ROW_TYPE.header },
	{ type: ROW_TYPE.control, controlType: CONTROL_TYPE.switcher, option: 'ui.peculiarityEnabled', isLastInSection: true }
]")

(def constant PREFS_LISTS "{
	SC.Ui_windows.ROUTE.MONITOR:	PREFS_SCREEN_DATA,
	SC.Ui_windows.ROUTE.GRAPHICS:	PREFS_GRAPHICS_DATA,
	SC.Ui_windows.ROUTE.SOUND:		PREFS_SOUND_DATA,
	SC.Ui_windows.ROUTE.BATTLE:		PREFS_BATTLE_UI_DATA,
	SC.Ui_windows.ROUTE.CAMERA:		PREFS_CAMERA_DATA,
	SC.Ui_windows.ROUTE.MOUSE:		PREFS_MOUSE_DATA,
	SC.Ui_windows.ROUTE.OTHER:		PREFS_OTHER_DATA
}")


(def css $PrefsPageTopButtonContainer ()
	(align = "right")
	(width = 100%)
	(marginBottom = 1)
	(paddingRight = "PREF_ROW_SIDE_PADDING + M")
)

(def css $PrefsMainLayoutWrapper ()
	(height = 100%)
	(paddingTop = "LM")
)

(def css $PrefsNestedAsideLowerButtonsContainer ()
	(position = "absolute")
	(bottom = 0)
	(align = "center")
	(width = 100%)
)

(def element ModalWindowPreferences ()
	(macro MODAL_WINDOW_INIT)
	(macro MODAL_WINDOW_BG)

	(scope
		(event evNavBtnClicked)
		(event evScrollKeybindingsToBegin)

		(event evShowDiffBtn)
		(event evHideDiffBtn)
		(event evDefaultDiffAppear)
		(event evSliderDiffAppear)
		(event evDefaultDiffDisappear)
		(event evSliderDiffDisappear)

		(event evSliderThumbMouseDown)
		(event evSliderThumbMouseUp)

		(macro PULL_ACTIVE_CHILD_ROUTE
			_nodeId = "SC.Ui_windows.MODAL.PREFERENCES"
			_fieldActiveChild = "'currentPrefRoute'"
		)

		(var preferenceDeltaCollection:gfx = "$datahub.getCollection(CC.preferenceDelta)")
		(var mainDiffCollection:gfx = "preferenceDeltaCollection.getChildByPath('byLevel.' + 0)")
		(var diffItems:array = "mainDiffCollection.items" (event "mainDiffCollection.evAdded") (event "mainDiffCollection.evRemoved"))
		(var isAnyDiff:bool = "diffItems.length > 0")

		(var isAnySliderThumbDown:bool = false)
		(bind isAnySliderThumbDown "true" init=false watch=false (event "evSliderThumbMouseDown"))
		(bind isAnySliderThumbDown "false" init=false watch=false (event "evSliderThumbMouseUp"))

		(var diffItemsUponSliderThumbInit:array = "diffItems" init=false watch=false (event "evSliderThumbMouseDown"))

		(var currentlyEditingCommandWatcher:gfx = "$datahub.getFirstWatcher(CC.currentlyEditingCommand)")
		(var currentlyEditingCommandEntity:gfx = "currentlyEditingCommandWatcher.entity" (event "currentlyEditingCommandWatcher.event"))
		(var commandMappingCommandComponent:gfx = "currentlyEditingCommandEntity ? currentlyEditingCommandEntity.commandMappingCommand : null")
		(var currentlyEditingCommandMappingId:number = "commandMappingCommandComponent ? commandMappingCommandComponent.id : null" (event "commandMappingCommandComponent.evChanged"))
		(var currentlyEditingCommandComponent:gfx = "currentlyEditingCommandEntity ? currentlyEditingCommandEntity.currentlyEditingCommand : null")
		(var currentlyEditingCommandIndex:number = "currentlyEditingCommandComponent ? currentlyEditingCommandComponent.index : null" (event "currentlyEditingCommandComponent.evChanged"))

		(var isApplyEnabled:bool = "isAnyDiff" watch=false (event "evShowDiffBtn") (event "evHideDiffBtn"))
	)

	(dispatch evScrollKeybindingsToBegin dir="EventDirection.DOWN" (event "evNavBtnClicked"))

	(dispatch evDefaultDiffAppear dir="EventDirection.NONE" (bind trigger "isAnyDiff") (bind enabled "diffItems.length == 0 && !isAnySliderThumbDown"))
	(dispatch evSliderDiffAppear dir="EventDirection.NONE" (bind enabled "(diffItems.length > 0) && (diffItemsUponSliderThumbInit.length == 0)") (event "evSliderThumbMouseUp"))
	(dispatch evDefaultDiffDisappear dir="EventDirection.NONE" (bind trigger "isAnyDiff") (bind enabled "diffItems.length > 0 && !isAnySliderThumbDown"))
	(dispatch evSliderDiffDisappear dir="EventDirection.NONE" (bind enabled "(diffItems.length == 0) && (diffItemsUponSliderThumbInit.length > 0)") (event "evSliderThumbMouseUp"))

	(dispatch evShowDiffBtn dir="EventDirection.NONE" (event "evDefaultDiffAppear") (event "evSliderDiffAppear"))
	(dispatch evHideDiffBtn dir="EventDirection.NONE" (event "evDefaultDiffDisappear") (event "evSliderDiffDisappear"))

	(block
		(macro DEFAULT_MODAL_WINDOW_ANIMATION 1)
		(style (width = 100%))

		(element ModalWindowHeaderFullSize
			_windowName = 'IDS_MODAL_WINDOW_TITLE_PREFERENCES'
			_paddingRight = "M"
			_paddingLeft = "M"
		)
	)

	(block
		(class $Fullsize)
		(style
			(paddingBottom = "{1080:XXL,720:XL}")
			(flow = "horizontal")
		)
		
		(block
			(macro DEFAULT_MODAL_WINDOW_ANIMATION 2)
			(style (position = "absolute"))

			(element PrefsNavigationPanel
				_selectedPage = "currentPrefRoute"
				(style
					(position = "absolute")
					(width = 240px)
					(paddingTop = "LM")
				)
			)
		)

		(block
			(macro DEFAULT_MODAL_WINDOW_ANIMATION 3)
			(class $Fullsize)

			(element PrefsMainContent
				_selectedPage = "currentPrefRoute"
				_currentlyEditingCommandMappingId = "currentlyEditingCommandMappingId"
				_currentlyEditingCommandIndex = "currentlyEditingCommandIndex"
			)
		)
	)

	
	(hblock
		(style
			(position = "absolute")
			(align = "center")
			(width = 100%)
			(bottom = "{1080:XL,720:M}")
		)

		(block
			(macro DEFAULT_MODAL_WINDOW_ANIMATION 3.5)
			(style (ubScaleX = "isApplyEnabled ? 1 : 0") (marginRight = "isApplyEnabled ? M : 0"))

			(block
				(class $FullsizeAbsolute)
				(isMask = true)
				(style (backgroundColor = 0xFFFFFFFF))
			)

			(controller $Animation
				(bindcall play
					delay = 0.05
					duration = 0.15
					from = " {alpha:0, visible:false, ubScaleX:0, marginRight: 0}"
					to = "{alpha:1, visible:true, ubScaleX:1, marginRight: 16}"
					easing = "Easing.line"
					action = "kill"
					reverse = "!isApplyEnabled"
					(bind trigger "isApplyEnabled")
				)
			)

			(element DefaultButton
				_name = 'btn_apply'
				_enabled = "isApplyEnabled"
				_size = "SIZE.MEDIUM"
				_width = 180
				_label = 'IDS_APPLY'
				_focusIndex = 0
				_defaultFocused = true
			)
		)

		(block
			(macro DEFAULT_MODAL_WINDOW_ANIMATION 4)
			(element DefaultButton
				_name = 'btn_cancel'
				_size = "SIZE.MEDIUM"
				_width = 180
				_label = 'IDS_CLOSE_BTN'
				_focusIndex = 1
			)
		)
	)
)

(def element PrefsNavigationPanel (_selectedPage:str)
	(scope
		(var commandMappingOrphansCollection:gfx = "$datahub.getCollection(CC.commandMappingCommand).getChildByPath('orphans')")
		(var orphans:array = "commandMappingOrphansCollection.items" (event "commandMappingOrphansCollection.evAdded") (event "commandMappingOrphansCollection.evRemoved"))
	)

	(style (width = 100%))

	(controller $Repeat renderer='PrefsNavigationPanelSideTabButtonWrapper'
		count="SC.Ui_windows.ROUTE.OPTIONS_PAGES.length"
		(args
			_selectedPage = "_selectedPage"
			_orphans = "orphans"
		)
	)
)

(def element PrefsNavigationPanelSideTabButtonWrapper (_selectedPage:str, _orphans:array)
	(scope
		(var isTabSelected:bool = "SC.Ui_windows.ROUTE.OPTIONS_PAGES[$index] == _selectedPage")
		(var isKeybindingsTab:bool = "SC.Ui_windows.ROUTE.OPTIONS_PAGES[$index] == SC.Ui_windows.ROUTE.CONTROLS")
	)

	(style (width = 100%))

	(element SideTabButton
		_label =				"'IDS_PREFERENCES_PAGENAME_' + toUpper(SC.Ui_windows.ROUTE.OPTIONS_PAGES[$index])"
		_isSelected =			"isTabSelected"
		_dispatchedEv =			"'evNavBtnClicked'"
		_methods =				"[{ type: 'inputMapping.onAction', name: 'navigateTo', args: { route: SC.Ui_windows.ROUTE.OPTIONS_PAGES[$index] } }]"
		_isAttentionMarker =	"isKeybindingsTab && (_selectedPage != SC.Ui_windows.ROUTE.CONTROLS) && _orphans.length"
	)

	(controller $Tooltip
		(bind enabled "!isTabSelected && _orphans.length && isKeybindingsTab")
		(renderer = 'SimpleStatusTooltip')
		(args
			_text = 'IDS_PREFS_TAB_TOOLTIP_IS_ANY_COMMAND_UNASSIGNED'
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR "0")
	)
)

(def element PrefsMainContent (_selectedPage:str, _currentlyEditingCommandMappingId:number, _currentlyEditingCommandIndex:number)
	(class $Fullsize)
	(style (align = "center"))

	(bind alpha "0" init=false watch=false (bind trigger "_selectedPage"))

	(controller $Animation
		(bindcall play
			delay = 0.05
			duration = 0.15
			to = "{ alpha: 1 }"
			easing = "Easing.line"
			action = "kill"
			(bind trigger "_selectedPage")
		)
	)

	
		
		
		
		
		
		
		

		
		
		
	
	
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.MONITOR")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.GRAPHICS")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.SOUND")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.BATTLE")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.CAMERA")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.MOUSE")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
	(controller $Instance renderer='PrefsMainContentKeybindings'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.CONTROLS")
		(args
			_currentlyEditingCommandMappingId	= "_currentlyEditingCommandMappingId"
			_currentlyEditingCommandIndex		= "_currentlyEditingCommandIndex"
		)
	)
	(controller $Instance renderer='PrefsMainContentCommon'
		(bind enabled "_selectedPage == SC.Ui_windows.ROUTE.OTHER")
		(args
			_selectedPage	= "_selectedPage"
		)
	)
)

(def element PrefsMainContentCommon (_selectedPage:str)
	(scope
		(event evScrollAreaValueChanged)
		(event evCloseDropdownByOuterEvent)

		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var contentWidth:number = "stageWidth > 1366 ? 800 : 720")

		(var data:array	= "PREFS_LISTS[_selectedPage]")
		(var resetBtnLabel:str = "_selectedPage == SC.Ui_windows.ROUTE.GRAPHICS	? 'IDS_PREFS_AUTODETECT_BUTTON'
																				: 'IDS_PREFS_RESET_PAGE_BUTTON'")
	)

	(class $PrefsMainLayoutWrapper)
	(style (bind width "contentWidth + PREF_ROW_SIDE_PADDING * 2"))

	(scrollArea
		(class $Fullsize)
		(style (backgroundColor = "NO_COLOR"))

		(verticalSlider ScrollBarVLightWithValueChangedEvent)
		(topShadow = 'ScrollAreaShadowTop')
		(bottomShadow = 'ScrollAreaShadowBottom')

		(wheelScrollSpeed = 1.0)
		(wheelScrollAcceleration = 1)
		(maxScrollingAnimatedDistance = 50)

		(hscrollPolicy = 'off')
		(vscrollPolicy = 'auto')
		(drag = false)

		(content
			(style (width = 100%))

			(block
				(class $PrefsPageTopButtonContainer)

				(element DefaultButton
					_name = "'btn_defaults'"
					_type = "SC.Ui_styles.BUTTON_TYPE.SECONDARY"
					_size = "SIZE.SMALL"
					_label = "resetBtnLabel"
					_tooltipText = "'IDS_PREFS_COMMONPAGE_RESET_' + toUpper(_selectedPage) + '_TOOLTIP'"
				)
			)

			(block
				(style (width = 100%) (marginBottom = "L"))

				(controller $Repeat renderer='PrefRow'
					(bind count "data.length")
					(args
						_ownerModal = "OWNER_MODAL_TYPE.main"
						_data = "data[$index]"
					)
				)
			)
		)

		(bindcall scrollToBegin animated=false (bind trigger "_selectedPage"))
		(dispatch evCloseDropdownByOuterEvent dir="EventDirection.DOWN" (event "evScrollAreaValueChanged"))
	)
)

(def element PrefsMainContentKeybindings (_currentlyEditingCommandMappingId:number, _currentlyEditingCommandIndex:number)
	(scope
		(event evScrollAreaValueChanged)
		(event evScrollKeybindingsToBegin)
		(event evCloseKeyAssignmentTooltipByScroll)

		(var commandMappingOrphansCollection:gfx = "$datahub.getCollection(CC.commandMappingCommand).getChildByPath('orphans')")
		(var orphans:array = "commandMappingOrphansCollection.items" (event "commandMappingOrphansCollection.evAdded") (event "commandMappingOrphansCollection.evRemoved"))

		(var shipsKeybindingsListEntity:gfx = "$datahub.getPrimaryEntity(CC.preferenceCommandGroup, SC.Ui_windows.ROUTE.CONTROLS_SHIPS)")
		(var aviationKeybindingsListEntity:gfx = "$datahub.getPrimaryEntity(CC.preferenceCommandGroup, SC.Ui_windows.ROUTE.CONTROLS_AVIATION)")
		(var chatKeybindingsListEntity:gfx = "$datahub.getPrimaryEntity(CC.preferenceCommandGroup, SC.Ui_windows.ROUTE.CONTROLS_CHAT)")
		(var spectatorKeybindingsListEntity:gfx = "$datahub.getPrimaryEntity(CC.preferenceCommandGroup, SC.Ui_windows.ROUTE.CONTROLS_SPECTATOR)")

		(var shipsKeybindingsList:array = "shipsKeybindingsListEntity ? shipsKeybindingsListEntity.preferenceCommandGroup.content : null")
		(var aviationKeybindingsList:array = "aviationKeybindingsListEntity ? aviationKeybindingsListEntity.preferenceCommandGroup.content : null")
		(var chatKeybindingsList:array = "chatKeybindingsListEntity ? chatKeybindingsListEntity.preferenceCommandGroup.content : null")
		(var spectatorKeybindingsList:array = "spectatorKeybindingsListEntity ? spectatorKeybindingsListEntity.preferenceCommandGroup.content : null")

		(macro PULL_ACTIVE_CHILD_ROUTE
			_nodeId = "SC.Ui_windows.ROUTE.CONTROLS"
			_fieldActiveChild = "'currentControlRoute'"
		)

		(var keybindingsList:array = "	currentControlRoute == SC.Ui_windows.ROUTE.CONTROLS_SHIPS		? shipsKeybindingsList :
										currentControlRoute == SC.Ui_windows.ROUTE.CONTROLS_AVIATION	? aviationKeybindingsList :
										currentControlRoute == SC.Ui_windows.ROUTE.CONTROLS_CHAT		? chatKeybindingsList
																										: spectatorKeybindingsList")

		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var contentWidth:number = "stageWidth > 1366 ? 800 : 720")
	)

	(class $PrefsMainLayoutWrapper)
	(style (flow = "horizontal"))

	(block
		(style
			(bind width "contentWidth + PREF_ROW_SIDE_PADDING * 2")
			(height = 100%)
		)

		(block
			(style
				(width = 100%)
				(paddingLeft = "PREF_ROW_SIDE_PADDING")
				(paddingRight = "PREF_ROW_SIDE_PADDING")
			)

			(block
				(style (flow = "horizontal") (width = 100%))

				(controller $Repeat renderer='KeybindingsSectionTabButton'
					(bind count "SC.Ui_windows.ROUTE.OPTIONS_CONTROLS.length")
					(args
						_currentControlRoute = "currentControlRoute"
						_tabRoute = "SC.Ui_windows.ROUTE.OPTIONS_CONTROLS[$index]"
						_orphansCollection = "commandMappingOrphansCollection"
					)
				)
			)

			(element HorizontalDividerTwoPx
				(style
					(position = "absolute")
					(width = 100%)
					(bottom = 0)
				)
			)
		)

		(scrollArea
			(class $Fullsize)
			(style (backgroundColor = "NO_COLOR"))

			(verticalSlider ScrollBarVLightWithValueChangedEvent)
			(topShadow = 'ScrollAreaShadowTop')
			(bottomShadow = 'ScrollAreaShadowBottom')

			(hscrollPolicy = 'off')
			(vscrollPolicy = 'auto')
			(drag = false)

			(repeatController = 'keybindingsList')

			(content
				(style (width = 100%) (paddingTop = "M"))

				(block
					(class $PrefsPageTopButtonContainer)

					(element DefaultButton
						_name = "'btn_command_defaults'"
						_type = "SC.Ui_styles.BUTTON_TYPE.SECONDARY"
						_size = "SIZE.SMALL"
						_label = 'IDS_PREFS_RESET_PAGE_BUTTON'
						_tooltipText = "'IDS_PREFS_KEYBINDINGS_RESET_' + toUpper(currentControlRoute) + '_TOOLTIP'"
					)
				)

				(block
					(style (width = 100%) (marginBottom = "L"))

					(controller $DynamicRepeat renderer='BindingPagePrefRow' name='keybindingsList'
						(bind enabled "keybindingsList.length")
						(bind count "keybindingsList.length")
						(args
							_item								= "keybindingsList[$index]"
							_currentlyEditingCommandMappingId	= "_currentlyEditingCommandMappingId"
							_currentlyEditingCommandIndex		= "_currentlyEditingCommandIndex"
						)
						(bind itemWidth "contentWidth + PREF_ROW_SIDE_PADDING * 2")
						(itemHeight = "PREF_ROW_SIZES.SINGLELINE_HEIGHT")
						(itemOffset = "PREF_ROW_SIZES.SINGLELINE_HEIGHT * 2")
						(sharedCache = true)
					)
				)
			)

			(bindcall scrollToBegin animated=false (event "evScrollKeybindingsToBegin") (bind trigger "currentControlRoute"))
			(dispatch evCloseKeyAssignmentTooltipByScroll dir="EventDirection.DOWN" (event "evScrollAreaValueChanged"))
		)
	)

	(controller $Instance renderer='PrefsMissingKeybindings'
		(bind enabled "orphans.length")
	)
)

(def element KeybindingsSectionTabButton (_currentControlRoute:str, _tabRoute:str, _orphansCollection:gfx)
	(scope
		(var orphansOfGroup:gfx =	"_orphansCollection.getChildByPath('byGroup.' + _tabRoute)")
		(var orphansOfGroupItems:array = "orphansOfGroup.items" (event "orphansOfGroup.evAdded") (event "orphansOfGroup.evRemoved"))
	)

	(element TabButton
		_label =				"'IDS_PREFERENCES_KEYBINDINGS_TAB_' + toUpper(_tabRoute)"
		_isSelected =			"_currentControlRoute == _tabRoute"
		_isAttentionMarker =	"orphansOfGroupItems.length != 0"
		_methods =				"[{ type: 'inputMapping.onAction', name: 'navigateTo', args: { route: _tabRoute } }]"
	)

	(controller $Tooltip
		(bind enabled "orphansOfGroupItems.length")
		(renderer = 'SimpleStatusTooltip')
		(args
			_text = "'IDS_PREFERENCES_KEYBINDINGS_SUBTAB_ORPHANED_TOOLTIP'"
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR "0")
	)
)

(def element PrefsMissingKeybindings ()
	(scope
		(var commandMappingOrphansCollection:gfx = "$datahub.getCollection(CC.commandMappingCommand).getChildByPath('orphans')")
		(var orphans:array = "commandMappingOrphansCollection.items" (event "commandMappingOrphansCollection.evAdded") (event "commandMappingOrphansCollection.evRemoved"))

		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var isWideScreen:bool = "stageWidth > 1599")
		(var elemWidth:number = "isWideScreen ? 300px : 232px")
		(var elemRightOffset:number = "isWideScreen ? -324px : -232px")

		(var maxElemHeight:number = 456)
		
		(var maxScrollAreaHeight:number = "maxElemHeight - 37 - (2 * SXS)")
	)

	(style
		(position = "absolute")
		(top = "TAB_BUTTON_DEFAULT_HEIGHT")
		(bind right "elemRightOffset")
		(bind width "elemWidth")
		(maxHeight = "maxElemHeight")
	)

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(element TooltipSystemStatusLine
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
			_text = "'IDS_PREFERENCES_KEYBINDINGS_ANY_ORPHANS_EXIST'"
			_width = "100%"
		)

		(element TooltipSystemHorizontalDivider)

		(block
			(style
				(width = 100%)
				(bind height "MISSING_PREF_COMMAND_NAME_HEIGHT * orphans.length - M")
				(bind maxHeight "maxScrollAreaHeight")
				
				(paddingLeft = "-M") (paddingRight = "-M") (paddingBottom = "-SXS") (paddingTop = "-SXS")
			)

			(scrollArea
				(class $Fullsize)
				(style (backgroundColor = "NO_COLOR"))

				(verticalSlider ScrollBarVLight)
				(topShadow = 'InfotipShadowTop')
				(bottomShadow = 'InfotipShadowBottom')

				(hscrollPolicy = 'off')
				(vscrollPolicy = 'auto')
				(drag = false)

				(content
					(style
						(width = 100%)
						
						(paddingLeft = "M") (paddingRight = "M") (paddingBottom = "SXS") (paddingTop = "SXS")
					)

					(block
						(style
							(width = 100%)
							(bind marginBottom "orphans.length <= 15 ? 0 : S")
						)

						(controller $Repeat renderer='CommandNameInOrphanList'
							(bind count "orphans.length")
							(args
								_entity = "orphans[$index]"
							)
						)
					)
				)
			)
		)
	)
)

(def element CommandNameInOrphanList (_entity:gfx)
	(scope
		(var commandEntity:gfx = "$datahub.getPrimaryEntity(CC.commandMappingCommand, _entity.commandMappingCommand.id)")
		(var commandName:str = "commandEntity ? commandEntity.commandForUI.ids : ''")
	)

	(style (width = 100%) (height = "MISSING_PREF_COMMAND_NAME_HEIGHT"))

	(element TooltipSystemDescriptionTextSingleLine
		_descriptionText = "commandName"
	)
)

(def element PrefsNestedMWControlsPanel (_data:array)
	(scope
		(event evScrollAreaValueChanged)
		(event evCloseDropdownByOuterEvent)

		(event evShowDiffBtn)
		(event evHideDiffBtn)
		(event evDefaultDiffAppear)
		(event evSliderDiffAppear)
		(event evDefaultDiffDisappear)
		(event evSliderDiffDisappear)

		(event evSliderThumbMouseDown)
		(event evSliderThumbMouseUp)

		(var preferenceDeltaCollection:gfx = "$datahub.getCollection(CC.preferenceDelta)")
		(var nestedDiffCollection:gfx = "preferenceDeltaCollection.getChildByPath('byLevel.' + 1)")
		(var diffItems:array = "nestedDiffCollection.items" (event "nestedDiffCollection.evAdded") (event "nestedDiffCollection.evRemoved"))
		(var isAnyDiff:bool = "diffItems.length > 0")

		(var isAnySliderThumbDown:bool = false)
		(bind isAnySliderThumbDown "true" init=false watch=false (event "evSliderThumbMouseDown"))
		(bind isAnySliderThumbDown "false" init=false watch=false (event "evSliderThumbMouseUp"))

		(var diffItemsUponSliderThumbInit:array = "diffItems" init=false watch=false (event "evSliderThumbMouseDown"))

		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var contentWidth:number = "stageWidth > 1366 ? 400px : 360px")

		(var isApplyEnabled:bool = "isAnyDiff" watch=false (event "evShowDiffBtn") (event "evHideDiffBtn"))
	)

	(dispatch evDefaultDiffAppear dir="EventDirection.NONE" (bind trigger "isAnyDiff") (bind enabled "diffItems.length == 0 && !isAnySliderThumbDown"))
	(dispatch evSliderDiffAppear dir="EventDirection.NONE" (bind enabled "(diffItems.length > 0) && (diffItemsUponSliderThumbInit.length == 0)") (event "evSliderThumbMouseUp"))
	(dispatch evDefaultDiffDisappear dir="EventDirection.NONE" (bind trigger "isAnyDiff") (bind enabled "diffItems.length > 0 && !isAnySliderThumbDown"))
	(dispatch evSliderDiffDisappear dir="EventDirection.NONE" (bind enabled "(diffItems.length == 0) && (diffItemsUponSliderThumbInit.length > 0)") (event "evSliderThumbMouseUp"))

	(dispatch evShowDiffBtn dir="EventDirection.NONE" (event "evDefaultDiffAppear") (event "evSliderDiffAppear"))
	(dispatch evHideDiffBtn dir="EventDirection.NONE" (event "evDefaultDiffDisappear") (event "evSliderDiffDisappear"))


	(style (height = 100%))

	(block
		(style
			(bind width "contentWidth")
			(height = 100%)
		)

		(block
			(class $Fullsize)
			(style (bind paddingBottom "isAnyDiff ? XLL : LM"))

			(scrollArea
				(class $Fullsize)
				(style (backgroundColor = "NO_COLOR"))

				(verticalSlider ScrollBarVLightWithValueChangedEvent)
				(topShadow = 'ScrollAreaShadowTop')
				(bottomShadow = 'ScrollAreaShadowBottom')

				(hscrollPolicy = 'off')
				(vscrollPolicy = 'auto')
				(drag = false)

				(content
					(style (width = 100%))

					(controller $Repeat renderer='PrefRow'
						(bind count "_data.length")
						(args
							_ownerModal = "OWNER_MODAL_TYPE.secondary"
							_data = "_data[$index]"
						)
					)
				)

				(dispatch evCloseDropdownByOuterEvent dir="EventDirection.DOWN" (event "evScrollAreaValueChanged"))
			)
		)

		(block
			(class $PrefsNestedAsideLowerButtonsContainer)

			(block
				(style (alpha = 0) (marginBottom = "M"))

				(element DefaultButton
					_size = "SIZE.MEDIUM"
					_enabled = "isApplyEnabled"
					_name = 'btn_apply'
					_width = 280
					_label = 'IDS_APPLY'
					_focusIndex = 0
					_defaultFocused = true
				)

				(controller $Animation
					(bindcall play
						duration = 0.15
						to		 = "{ alpha: 1, y: 0 }"
						easing	 = "Easing.quad_out"
						(event "evShowDiffBtn")
					)
					(bindcall play
						duration = 0.15
						to		 = "{ alpha: 0, y: 10 }"
						easing	 = "Easing.quad_out"
						(event "evHideDiffBtn")
					)
				)
			)

			(element DefaultButton
				_size = "SIZE.MEDIUM"
				_name = 'btn_cancel'
				_width = 280
				_label = 'IDS_CLOSE_BTN'
				_focusIndex = 1
			)
		)
	)
)

(def element PrefsNestedMWReferenceImageContainer (_type:str, _crosshairId:number=0, _isCrosshairDynamic:bool=false)
	(scope
		(event evShowDynCrosshairCaption)
		(event evHideDynCrosshairCaption)

		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var stageHeight:number = "stageComponent.height" (event "stageComponent.evStageSizeChanged"))

		(var isCrosshairReferenceImage:bool = "_type == SECONDARY_MODAL_WINDOW_TYPE.crosshairs")

		(var controllersAreaWidth:number = "stageWidth > 1366 ? 400 : 360")

		(var imgRightPadding:number = "MS")
		(var remainingWidth:number = "stageWidth - (controllersAreaWidth + imgRightPadding)")
		(var elemHeight:number = "floor($globalLayoutBounds[3])" (event "$evLayoutBoundsChanged"))
		
		(var isVerticallyCalculated:bool = "(295 * remainingWidth) >= (496 * elemHeight)")

		(var initialCrosshairCaptionAlpha:number = "_isCrosshairDynamic ? TA : 0" watch=false)
		(var initialCrosshairCaptionTopOffset:number = "_isCrosshairDynamic ? 0 : 10" watch=false)
	)

	(dispatch evShowDynCrosshairCaption (bind trigger "_isCrosshairDynamic") (bind enabled "!_isCrosshairDynamic"))
	(dispatch evHideDynCrosshairCaption (bind trigger "_isCrosshairDynamic") (bind enabled "_isCrosshairDynamic"))

	(class $Fullsize)

	(block
		(style
			(align = "center|middle")
			
			(bind width "isVerticallyCalculated ? (elemHeight * 496 / 295) : remainingWidth")
			(bind height "isVerticallyCalculated ? elemHeight : (remainingWidth * 295 / 496)")
			(backgroundSize = "fill")
			(bind backgroundImage "	isCrosshairReferenceImage	? 'url:../prefs/reference_images/crosshairs.jpg'
																: 'url:../prefs/reference_images/color_filters.jpg'")
		)

		(block
			(bind visible "isCrosshairReferenceImage")
			(class $Fullsize)

			(element CrosshairBinocularDefaultRenderer
				_crosshairId = "_crosshairId"
			)
		)

		(block
			(bind visible "isCrosshairReferenceImage")

			(class $FullsizeAbsolute)
			(style (align = "center|middle"))

			(block
				(style
					(marginTop = "XL")
					(width = 380px)
					(height = 0px) 
				)

				(tf
					(class $TextDefaultBold19NM)
					(style
						(position = "absolute")
						(bind top "initialCrosshairCaptionTopOffset")
						(bind alpha "initialCrosshairCaptionAlpha")
						(width = 100%)
						(textAlign = "center")
					)

					(text = 'IDS_DYNAMIC_CROSSHAIR_DESC')

					(controller $Animation
						(bindcall play
							duration = 0.1
							from	 = "{ alpha: 0, top: 10 }"
							to		 = "{ alpha: TA, top: 0 }"
							action="kill"
							(event "evShowDynCrosshairCaption")
						)
						(bindcall play
							duration = 0.1
							from	 = "{ alpha: TA, top: 0 }"
							to		 = "{ alpha: 0, top: -10 }"
							action="kill"
							(event "evHideDynCrosshairCaption")
						)
					)
				)
			)
		)

		(element ColorBlindnessRefImageLegend
			(bind visible "!isCrosshairReferenceImage")
			(style (position = "absolute") (bottom = 0px))
		)
	)
)


(def element ColorBlindnessRefImageLegend ()
	(scope
		(var teams:array = "['ally', 'enemy', 'division']")
	)

	(style
		(align = "center|middle")
		(flow = "horizontal")
		(width = 100%)
		(height = 48px)
		(backgroundColor = 0x80000000)
	)

	(controller $Repeat renderer='ColorBlindnessLegendTeam'
		(bind count "teams.length")
		(args
			_team = "teams[$index]"
		)
	)
)

(def element ColorBlindnessLegendTeam (_team:str)
	(style
		(flow = "horizontal")
		(align = "middle")
		(bind marginLeft "$index == 0 ? 0px : LM")
	)

	(block
		(style
			(width = 27px)
			(height = 27px)
			(backgroundImage = "'url:../service_kit/ship_classes/icon_' + _team + '_battleship.png'")
		)
	)

	(block
		(style
			(width = 27px)
			(height = 27px)
			(backgroundImage = "'url:../service_kit/ship_classes/icon_' + _team + '_cruiser.png'")
		)
	)

	(block
		(style
			(width = 27px)
			(height = 27px)
			(backgroundImage = "'url:../service_kit/ship_classes/icon_' + _team + '_destroyer.png'")
		)
	)

	(tf
		(class $TextDefaultBoldNM)
		(style (alpha = "TA") (marginLeft = "S"))
		(bind text "'IDS_OPTIONS_' + toUpper(_team)")
	)
)