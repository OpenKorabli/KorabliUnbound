(def element EventIntroContent (_logoStereotype:str = '', _logoStereotypeParams:dict = {}, _logoWidth:number = 0, _logoHeight:number = 0, _logoUrl:str = '', _isNotCompleted:bool = false,
								_title:str = '', _subTitle:str = '', _okBtnLabel:str = '', _okBtnMethods:array = [], _cancelBtnLabel:str = '', _cancelBtnMethods:array = [],
								_evOkBtnDispatch:str = '', _evOkBtnDispatchParams:dict = {}, _evCancelBtnDispatch:str = '', _evCancelBtnDispatchParams:dict={}, _isBattlePassSplash:bool = false)
	(macro DEFAULT_MODAL_WINDOW_SCOPE_EVENTS)

	(scope
		(var isBattleType:bool =	"_logoStereotype == 'ModalBattleTypeRendererWrapper'")
		(var skipLabel:str =		"_isNotCompleted	? _cancelBtnLabel	? _cancelBtnLabel
																			: 'IDS_CLOSE_UPPER_CASE'
														: 'IDS_CLOSE_UPPER_CASE'")
		(var okLabel:str =			"_okBtnLabel		? _okBtnLabel
														: 'IDS_INTRO_MODAL_CHOICE_OK_DEFAULT'")
	)

	(class $Fullsize)
	(style (align = "center|middle"))

	
	(block
		(macro DEFAULT_MODAL_WINDOW_ANIMATION 1)

		(style
			(hitTest = false)
			(align = "isBattleType ? center|bottom : center")
			(width = 100%)
			(height = "	_isBattlePassSplash	? { 720: 300px, 1080: 640px } :
						isBattleType		? 240px
											: 288px")
		)

		(block
			(controller $Instance
				(bind enabled "_logoStereotype")
				(bind renderer "_logoStereotype")
				(args
					_logoStereotypeParams = "_logoStereotypeParams"
				)
			)
		)

		(block
			(bind visible "_logoUrl")

			(style
				(align = "middle")
				(height = 100%)
			)

			(block
				(style
					(bind width "_logoWidth")
					(bind height "_logoHeight")
					(bind backgroundImage "_logoUrl")
				)
			)
		)
	)
	

	
	(block
		(macro DEFAULT_MODAL_WINDOW_ANIMATION 2)

		(style
			(align = "center")
			(width = 100%)
			(marginTop = "LM")
		)

		(tf
			(name = 'eventIntroTitle')

			(bind class "_isBattlePassSplash ? '$TextDefaultBold30NM' : '$TextDefaultBold50NM'")
			(style
				(width = 512px)
				(textAlign = "center")
				(alpha = "TA")
			)

			(bind text "toUpper(tr(_title))")
		)
	)
	

	
	(block
		(macro DEFAULT_MODAL_WINDOW_ANIMATION 3)

		(style
			(align = "center")
			(width = 100%)
			(marginTop = "L")
		)

		(tf
			(class $TextDefault21NM)
			(style
				(width = 640px)
				(textAlign = "center")
				(leading = 1)
				(alpha = "TC")
			)

			(bind text "_subTitle")
		)
	)
	

	
	(hblock
		(macro DEFAULT_MODAL_WINDOW_ANIMATION 4)
		
		(style
			(align = "center")
			(width = 100%)
			(marginTop = "LM")
		)

		(block
			(controller $Instance renderer='DefaultButton'
				(args
					_width =			180px
					_type =				"_isBattlePassSplash ? SC.Ui_styles.BUTTON_TYPE.SECONDARY : SC.Ui_styles.BUTTON_TYPE.DEFAULT"
					_label =			"skipLabel"
					_methods =			"_cancelBtnMethods"
					_focusIndex =		1
					_defaultFocused =	"!_isNotCompleted"
					_dispatchedEv =		"_evCancelBtnDispatch"
					_dispatchParams =	"_evCancelBtnDispatchParams"
				)
			)
		)

		(block
			(style (bind marginLeft "_isNotCompleted ? MS : 0"))

			(controller $Instance renderer='DefaultButton'
				(bind enabled "_isNotCompleted")
				(args
					_name =				'eventIntroOkButton'
					_type =				"_isBattlePassSplash ? SC.Ui_styles.BUTTON_TYPE.ACCENT : SC.Ui_styles.BUTTON_TYPE.DEFAULT"
					_width =			180px
					_label =			"okLabel"
					_methods =			"_okBtnMethods"
					_focusIndex =		0
					_defaultFocused =	"_isNotCompleted"
					_dispatchedEv =		"_evOkBtnDispatch"
					_dispatchParams =	"_evOkBtnDispatchParams"
				)
			)
		)
	)
	
)

(def element ModalWindowShipAcesIntro (isNotCompleted:bool)
	(macro MODAL_WINDOW_INIT)
	(macro MODAL_WINDOW_BG)

	(name = 'window_ModalWindowShipAcesIntro')

	(element EventIntroContent
		_okBtnLabel =		'IDS_SHIP_ACES_INTRO_CHOICE_OK'
		_okBtnMethods =		"[	{ type: 'inputMapping.onAction',	name: 'navigateTo',				args: { route: SC.Ui_windows.ROUTE.SSE_SHIP_ACES } },
								{ type: 'inputMapping.onRequest',	name: 'setSplashScreenViewed',	args: { clickedButtonType: 'ingame' } } ]"
		_cancelBtnMethods =	"[	{ type: 'inputMapping.onRequest',	name: 'setSplashScreenExited',	args: {} } ]"
		_title =			'IDS_SHIP_ACES_COMMON_TITLE'
		_subTitle =			'IDS_SHIP_ACES_INTRO_SUBHEADER'
		_logoUrl =			'url:../sse/ship_aces/intro_modal_logo.png'
		_logoWidth =		240px
		_logoHeight =		240px
		_isNotCompleted =	"isNotCompleted"
	)
)

(def element ModalWindowArcEventIntro (isNotCompleted:bool)
	(macro MODAL_WINDOW_INIT)

	(name = 'window_ModalWindowArcEventIntro')

	(block
		(class $FullsizeAbsolute)

		(element ModalWindowAnimatedBackground
			_selectedCategory =	'intro'
			_type =				"SC.Ui_styles.ANIMATED_BG.ARC_EVENT"
			_hideTime =			0.2
			_hideDelay =		0.2
		)
	)

	(element EventIntroContent
		_okBtnMethods =				"[	{ type: 'inputMapping.onRequest',	name: 'arcEventChooseSide',						args: { clickedButtonType: 'ingame' } } ]"
		_cancelBtnLabel =			'IDS_ARC_EVENT_INTRO_MODAL_CHOICE_CANCEL'
		_cancelBtnMethods =			"[	{ type: 'inputMapping.onRequest',	name: 'setSplashScreenExited',					args: {} },
										{ type: 'inputMapping.onAction',	name: 'VSEventProxyUSS.refuseParticipation',	args: { state: false } } ]"
		_title =					'IDS_ARC_EVENT_COMMON_EVENT_TITLE'
		_subTitle =					'IDS_ARC_EVENT_INTRO_SUBHEADER'
		_isNotCompleted =			"isNotCompleted != null ? isNotCompleted : true"
		_logoStereotype =			'ArcEventSideStereotypeWrapper'
		_logoStereotypeParams =		"{ sideId: -1, size: SC.Ui_styles.SIZE.LARGE }"
	)
)

(def element ArcEventSideStereotypeWrapper (_logoStereotypeParams:dict)
	(element ArcEventSideStereotype
		_sideId =	"_logoStereotypeParams.sideId"
		_size =		"_logoStereotypeParams.size"
	)
)

(def element ModalWindowEventBattleIntro (eventId:number, isNotCompleted:bool, eventBattleName:str)
	(macro MODAL_WINDOW_INIT)
	(macro MODAL_WINDOW_BG)

	(scope
		(event evBattleTypeChosen)
		(event evDelayedCloseIntroModalWindow)

		(var battleTypeEntity:dhEntity =	"getPrimaryEntity(CC.battleType, SC.Common.BATTLE_TYPES.EVENT_BATTLE + '_' + toString(eventId))")
		(var battleTypeEntityId:number =	"battleTypeEntity.id")
		(var battleTypeFeatureId:number =	"battleTypeEntity.battleType.featureId")
		(var isNew:bool =					"battleTypeEntity.hasComponent(CC.newItem)")
	)

	(dispatch evDelayedCloseIntroModalWindow dir="EventDirection.NONE" delay=0.25			(event "evBattleTypeChosen"))
	(bindcall externalCall "'inputMapping.onRequest'" "['closeModalEventBattleIntro', {}]"	(event "evDelayedCloseIntroModalWindow"))

	(name = 'window_ModalWindowEventBattleIntro')

	(element EventIntroContent
		_okBtnMethods =				"[	{ type: 'inputMapping.onAction',				name: 'setBattleType',			args: { battleType: SC.Common.BATTLE_TYPES.EVENT_BATTLE, battleTypeGameParamId: eventId } },
										{ type: isNew ? 'inputMapping.onAction' : '',	name: 'makeSeen',				args: { entityId: battleTypeEntityId } },
										{ type: isNew ? 'inputMapping.onAction' : '',	name: 'featureSeen',			args: { featureIndex: battleTypeFeatureId } },
										{ type: 'inputMapping.onRequest',				name: 'setSplashScreenViewed',	args: { clickedButtonType: 'ingame' } } ]"
		_evOkBtnDispatch =			'evBattleTypeChosen'
		_cancelBtnMethods =			"[	{ type: 'inputMapping.onRequest',	name: 'setSplashScreenExited',	args: {} } ]"
		_title =					"'IDS_' + eventBattleName"
		_subTitle =					"'IDS_' + toUpper(eventBattleName) + '_PROMO_DESCRIPTION'"
		_logoStereotype =			'ModalBattleTypeRendererWrapper'
		_logoStereotypeParams =		"{	battleTypeEntityId:			battleTypeEntityId,
										forceVisible:				true,
										dontShowSmokeAnimation:		true,
										showBattleHeader:			false,
										showBattleSubheader:		false }"
		_isNotCompleted =			"isNotCompleted"
	)
)

(def element ModalBattleTypeRendererWrapper (_logoStereotypeParams:dict)
	(element ModalBattleTypeRenderer
		_battleTypeEntityId =		"_logoStereotypeParams.battleTypeEntityId"
		_forceVisible =				"_logoStereotypeParams.forceVisible"
		_dontShowSmokeAnimation =	"_logoStereotypeParams.dontShowSmokeAnimation"
		_showBattleHeader =			"_logoStereotypeParams.showBattleHeader"
		_showBattleSubheader =		"_logoStereotypeParams.showBattleSubheader"
	)
)

(def element ModalWindowSnowflakesIntro ()
	(macro MODAL_WINDOW_INIT)

	(element EventIntroContent
		_okBtnLabel =		'IDS_CONTINUE'
		_okBtnMethods =		"[	{ type: 'inputMapping.onRequest',	name: 'snowflakesTakeBonuses',	args: { clickedButtonType: 'ingame' } } ]"
		_cancelBtnMethods =	"[	{ type: 'inputMapping.onRequest',	name: 'setSplashScreenExited',	args: {} } ]"
		_title =			'IDS_SNOWFLAKES_COMMON_TITLE'
		_subTitle =			'IDS_SNOWFLAKES_INTRO_SUBHEADER'
		_logoUrl =			'url:../events/snowflakes/icon_intro.png'
		_logoWidth =		256px
		_logoHeight =		256px
		_isNotCompleted =	true
	)
)

(def element ModalWindowBattlePassSplashScreen ()
	(macro MODAL_WINDOW_INIT)

	(block
		(macro DEFAULT_MODAL_WINDOW_ANIMATION 1)

		(class $FullsizeAbsolute)
		(style
			(backgroundImage = 'url:../bg/elite_crew_book_intro.jpg')
			(backgroundSize = "cover")
		)
	)

	(element EventIntroContent
		_okBtnLabel =			'IDS_BATTLEPASS_SPLASH_SCREEN_OBSERVE_ELITE_CREW_BOOK'
		_okBtnMethods =			"[	{ type: 'inputMapping.onAction',	name: 'BattlePassProxyUSS.observeEliteCrewBook',	args: {} },
									{ type: 'inputMapping.onRequest',	name: 'setSplashScreenViewed',						args: { clickedButtonType: 'ingame' } } ]"
		_cancelBtnLabel =		'IDS_TO_DOCK'
		_cancelBtnMethods =		"[	{ type: 'inputMapping.onRequest',	name: 'setSplashScreenExited',	args: {} } ]"
		_title =				'IDS_BATTLEPASS_SPLASH_SCREEN_TITLE'
		_subTitle =				'IDS_BATTLEPASS_SPLASH_SCREEN_SUBTITLE'
		_isNotCompleted =		true
		_isBattlePassSplash =	true
	)
)

(def element ModalWindowSnowflakesBackground ()
	(macro MODAL_WINDOW_INIT)
	(scope
		(var bonusTagSeasonEntity:dhEntity = "getSingleEntity(CC.bonusTagSeason, 'snowflakeSeasonCollection')")
		(var snowflakesBackground:str = "bonusTagSeasonEntity.bonusTagSeason.background" (event "bonusTagSeasonEntity.bonusTagSeason.evChanged"))
	)
	(class $FullsizeAbsolute)

	(element ModalWindowAnimatedBackground
		_selectedCategory = "snowflakesBackground"
		_type = "SC.Ui_styles.ANIMATED_BG.ALMANAC_AND_SNOWFLAKES"
		_hideTime = 0.2
		_hideDelay = 0.2
	)
)