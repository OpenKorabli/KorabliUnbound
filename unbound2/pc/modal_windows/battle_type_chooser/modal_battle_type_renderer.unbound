(def constant COLOR_TRANSFORM_BATTLE_TYPE_ROLLOVER { redOffset: 15, greenOffset: 15, blueOffset: 15})

(def constant REDDISH_GLOW { redOffset: 251, greenOffset: 47, blueOffset: 0 })

(def constant GREENISH_GLOW { redOffset: 70, greenOffset: 150, blueOffset: 25 })

(def constant YELLOWISH_GLOW { redOffset: 220, greenOffset: 160, blueOffset: 16 })

(def css $BattleTypeIconSize()
	(width = 112px)
	(height = 112px)
)

(def element GuidingTipsBattleTypeHub(_battleTypeEntity:gfx)
	(scope
		(event evBattleTypeChosen)

		
		(var battleTypeComponent:gfx =	"_battleTypeEntity.battleType")
		(var battleTypeStatus:number =	"battleTypeComponent.status" (event "battleTypeComponent.evStatusChanged"))
		(var battleType:str =			"battleTypeComponent.type")

		
		(var rankSeasonEntity:gfx = "$datahub.getSingleEntity(CC.rankSeason)")
		(var rankSeasonComponent:gfx = "rankSeasonEntity.rankSeason")
		(var isDivisionAllowedInRanked:bool = "rankSeasonComponent.isDivisionAllowed" (event "rankSeasonComponent.evChanged"))

		
		(struct pvpDescNewTip =			PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.PVP_FINAL"))
		(struct repeatPvpDesc1NewTip =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.PVP_FINAL_REPEAT"))
		(struct rankFinalNewTip =		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.RANK_FINAL"))
		(struct rankFinalRepeatNewTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.RANK_FINAL_REPEAT"))
		(struct pveChooseNewTip =		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.PVE_CHOOSE"))
		(struct pveChooseRepeatNewTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.PVE_CHOOSE_REPEAT"))
		(struct pveFinalNewTip =		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.PVE_FINAL"))
		(struct pveFinalRepeatNewTip =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.PVE_FINAL_REPEAT"))

		(var isRandomBattle:bool = "battleType == SC.Common.BATTLE_TYPES.RANDOM_BATTLE")
		(var isRankedBattle:bool = "battleType == SC.Common.BATTLE_TYPES.RANKED_BATTLE")
		(var isClanBattle:bool = "battleType == SC.Common.BATTLE_TYPES.CLAN_BATTLE")
		(var isTrainingBattle:bool = "battleType == SC.Common.BATTLE_TYPES.TRAINING_BATTLE")
		(var isTournamentBattle:bool = "battleType == SC.Common.BATTLE_TYPES.TOURNAMENT_BATTLE")
		(var isCustomBattle:bool = "isTrainingBattle || isTournamentBattle")
		(var isPVERandomBattle:bool = "battleType == SC.Common.BATTLE_TYPES.PVE_BATTLE && _battleTypeEntity.operation.hasMultipleMaps")

		
		(var divisionDataEntity:gfx = "$datahub.getSingleEntity(CC.division)")
		(var isDivisionsAvailableInThisBattleType:bool = "!isCustomBattle && (!isRankedBattle || isDivisionAllowedInRanked)")

		(var isNewRankedFinishTip:bool = "battleTypeStatus == SC.Common.BATTLE_TYPE_STATE.DISABLED && isRankedBattle")
		(var isRankedBattleInactive:bool = "battleTypeStatus == SC.Common.BATTLE_TYPE_STATE.INACTIVE_BY_PRIMETIME && isRankedBattle")
		(var isSelectableBattleType:bool = "battleTypeStatus != SC.Common.BATTLE_TYPE_STATE.DISABLED && (!divisionDataEntity || isDivisionsAvailableInThisBattleType)")

		(var currentTipId:number = "pveChooseNewTip.isActive && isPVERandomBattle		?	SC.Context_guiding_tip.TIP_TYPE.PVE_CHOOSE :
									pveChooseRepeatNewTip.isActive && isPVERandomBattle ?	SC.Context_guiding_tip.TIP_TYPE.PVE_CHOOSE_REPEAT :
									pveFinalNewTip.isActive && isPVERandomBattle		?	SC.Context_guiding_tip.TIP_TYPE.PVE_FINAL :
									pveFinalRepeatNewTip.isActive && isPVERandomBattle	?	SC.Context_guiding_tip.TIP_TYPE.PVE_FINAL_REPEAT :
									isRandomBattle 										?	pvpDescNewTip.isActive			? SC.Context_guiding_tip.TIP_TYPE.PVP_FINAL :
																							repeatPvpDesc1NewTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.PVP_FINAL_REPEAT
																															: SC.Context_guiding_tip.TIP_TYPE.NONE :
									isRankedBattle										?	rankFinalNewTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.RANK_FINAL :
																							rankFinalRepeatNewTip.isActive 	? SC.Context_guiding_tip.TIP_TYPE.RANK_FINAL_REPEAT
																															: SC.Context_guiding_tip.TIP_TYPE.NONE
																						:	SC.Context_guiding_tip.TIP_TYPE.NONE")
		(var isGuidingTipVisible:bool = "currentTipId != SC.Context_guiding_tip.TIP_TYPE.NONE")

		(var chainId:number = "	isRandomBattle		?	pvpDescNewTip.isActive			? SC.Context_guiding_tip.TIP_CHAIN_ID.PVP :
														repeatPvpDesc1NewTip.isActive	? SC.Context_guiding_tip.TIP_CHAIN_ID.PVP_REPEAT
																						: SC.Context_guiding_tip.TIP_CHAIN_ID.NONE :
								isRankedBattle		?	rankFinalNewTip.isActive		? SC.Context_guiding_tip.TIP_CHAIN_ID.RANK :
														rankFinalRepeatNewTip.isActive	? SC.Context_guiding_tip.TIP_CHAIN_ID.RANK_REPEAT
																						: SC.Context_guiding_tip.TIP_CHAIN_ID.NONE :
								isPVERandomBattle 	?	pveChooseNewTip.isActive		? SC.Context_guiding_tip.TIP_CHAIN_ID.PVE :
														pveChooseRepeatNewTip.isActive	? SC.Context_guiding_tip.TIP_CHAIN_ID.PVE_REPEAT
																						: SC.Context_guiding_tip.TIP_CHAIN_ID.NONE
													:	SC.Context_guiding_tip.TIP_CHAIN_ID.NONE")
		(var hasFinishButton:bool = "isRankedBattleInactive || !isSelectableBattleType")
		(var onDeactivateTipChain:bool = "chainId != SC.Context_guiding_tip.TIP_CHAIN_ID.NONE && !isNewRankedFinishTip")
	)
	(bindcall externalCall 'inputMapping.onAction' "[onDeactivateTipChain ? 'deactivateTipChain' : '',  {tip_chain_id: chainId}]" watch=false (event "evBattleTypeChosen"))

	(style (width = 100%))

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "isGuidingTipVisible")
		(args
			_tipId =			"currentTipId"
			_tipPositioning =	"TIP_POSITION_BOTTOM"
			_offsetY =			10px
			_hasFinishButton =	"hasFinishButton"
			_noPointer =		"!isSelectableBattleType"
			_modalWindowName =	'ModalWindowBattleTypeChooser'
		)
	)
)

(def element ModalBattleTypeRenderer (	_battleTypeEntityId:number, _showBattleHeader:bool=true,_showBattleSubheader:bool=true,
										_forceVisible:bool=false, _dontShowSmokeAnimation:bool=false)
	(macro DEFAULT_MODAL_WINDOW_SCOPE_EVENTS)
	(scope
		(event evBattleTypeChosen)
		(macro MOUSE_HANDLER_SCOPE)
		(macro MOUSE_HANDLER_SCOPE "'battleType_'")

		
		(var battleTypeEntity:gfx =			"$datahub.getEntity(_battleTypeEntityId)")
		(var battleTypeComponent:gfx =		"battleTypeEntity.battleType")
		(var battleTypeState:number =		"battleTypeComponent.status" (event "battleTypeComponent.evStatusChanged"))
		(var isSelected:bool =				"battleTypeComponent.selected" (event "battleTypeComponent.evSelectionChanged"))
		(var battleTypeGameParamId:number = "battleTypeComponent.battleTypeGameParamId")
		(var battleType:str =				"battleTypeComponent.type")
		(var featureId:number =				"battleTypeComponent.featureId")
		(var battleTypeSubheader:str =		"battleTypeComponent.subheader")

		
		(var accountLevelEntity:gfx = "$datahub.getSingleEntity(CC.accountLevel)")
		(var curAccountLevel:number = "accountLevelEntity.accountLevel.level ?: 0" (event "accountLevelEntity.accountLevel.evLevelChanged"))

		(var clanBattleSeasonComponent:gfx = "battleTypeEntity.clanBattleSeason")
		(var isClanBattleActive:gfx = "clanBattleSeasonComponent.active" (event "clanBattleSeasonComponent.evChanged"))

		(var isNewBattle:bool = "battleTypeEntity.hasComponent(CC.newItem)"	(event "battleTypeEntity.evAdded")
																			(event "battleTypeEntity.evRemoved"))
		(var isRandomBattle:bool = 		"battleType == SC.Common.BATTLE_TYPES.RANDOM_BATTLE")
		(var isCooperativeBattle:bool =	"battleType == SC.Common.BATTLE_TYPES.COOPERATIVE_BATTLE")
		(var isRankedBattle:bool =		"battleType == SC.Common.BATTLE_TYPES.RANKED_BATTLE")
		(var isPVEBattle:bool =			"battleType == SC.Common.BATTLE_TYPES.PVE_BATTLE")
		(var isClanBattle:bool =		"battleType == SC.Common.BATTLE_TYPES.CLAN_BATTLE")
		(var isEventBattle:bool =		"battleType == SC.Common.BATTLE_TYPES.EVENT_BATTLE")
		(var isBrawlBattle:bool =		"battleType == SC.Common.BATTLE_TYPES.BRAWL_BATTLE")

		(var eventBattleComponent:gfx = "battleTypeEntity.eventBattleState")
		(var eventBattleName:str = "eventBattleComponent.name ?: SC.Common.BATTLE_TYPES.EVENT_BATTLE" (event "eventBattleComponent.evChanged"))

		(var operationBattleComponent:gfx =	"battleTypeEntity.operation")
		(var pveOperationDifficulty:number = "operationBattleComponent.difficulty ?: 0")
		(var operationIconName:str = "operationBattleComponent.customIconName" (event "operationBattleComponent.evStatusChanged"))

		(var battleName:str = "	isEventBattle	?	eventBattleName		? eventBattleName
																		: SC.Common.BATTLE_TYPES.EVENT_BATTLE	:
								isPVEBattle		?	operationIconName 	? operationIconName
																		: SC.Common.BATTLE_TYPES.PVE_BATTLE
												:	battleType")

		(var battleHeaderIDS:str = "isEventBattle	? toUpper('IDS_' + eventBattleName):
									isPVEBattle		? 'IDS_' + toUpper(operationBattleComponent.gpName) + '_NAME'
													: toUpper('IDS_' + battleType)")

		(var showBattleSubheader:bool = "_showBattleSubheader && curAccountLevel < SC.Common.ACCOUNT_LEVEL.WEB_STORAGE && battleTypeSubheader")

		(var selectedAnimationElement:str = "isSelected && !_dontShowSmokeAnimation ? operationIconName	? 'SelectedBattleEventTypeAnimation'
																										: 'SelectedBattleTypeAnimation'
																					: ''")

		(var hasAnimationRenderElement:bool = "toBool(selectedAnimationElement)")

		(var isBattleTypeChosen:bool = false)
		(bind isBattleTypeChosen "true" init=false watch=false (event "evBattleTypeChosen"))

		
		(var isAvailableInPrimeTime:bool = "battleTypeState != SC.Common.BATTLE_TYPE_STATE.INACTIVE_BY_PRIMETIME")
		(var isSelectableBattleType:bool = "battleTypeState != SC.Common.BATTLE_TYPE_STATE.DISABLED && isAvailableInPrimeTime")

		(var renderStatusElement:str = "isRankedBattle 						? 'CurrentRankSeasonButton' :
										isClanBattle && isClanBattleActive 	? 'ClanBattleTypeInfo'
																			: ''")
		(var hasStatusElement:bool = "toBool(renderStatusElement)")

		(var tooltipRenderElementName:str = "	isEventBattle	? 'EventBattleTypeTooltip' :
												isPVEBattle		? 'PVEOperationTooltip' :
												isClanBattle	? 'ClanBattleTypeTooltip' :
												isRankedBattle	? 'RankedBattleTypeTooltip' :
												isBrawlBattle	? 'BrawlBattleTypeTooltip'
																: 'CommonBattleTypeTooltip'")
	)
	(bind name "'typeItem' + battleType")

	(bindcall externalCall "isSelectableBattleType ? 'sound.playSetSoundDirect' : ''" "['battle_type_choose', SoundEvent.OVER]" init=false watch=false (event "battleType_evRollOver"))
	(bindcall externalCall "isSelectableBattleType ? 'sound.playSetSoundDirect' : ''" "['battle_type_choose', battleType + '_click']" init=false watch=false (event "battleType_evClicked"))

	(dispatch evBattleTypeChosen dir="EventDirection.DOWN" (event "battleType_evClicked") (bind enabled "isSelectableBattleType"))

	(bindcall externalCall "isNewBattle ? 'inputMapping.onAction' : ''" "['makeSeen', {entityId: battleTypeEntity.id}]" init=false watch=false (event "battleType_evClicked"))
	(bindcall externalCall "isSelectableBattleType ? 'inputMapping.onAction' : ''" "['featureSeen',  {featureIndex: featureId}]" init=false watch=false (event "battleType_evClicked"))

	(style
		(width = "BATTLE_TYRES_SIZE")
		(marginLeft = "BATTLE_TYRES_MARGIN")
		(marginRight = "BATTLE_TYRES_MARGIN")
		(visualOffsetY = 10px)
		(alpha = 0)
	)
	(controller $Animation
		(bindcall play
			id = 'modalBattleTypeRenderer'
			delay = 0.15
			duration = 0.15
			to = "{ alpha: 1, visualOffsetY: 0px }"
			easing = "Easing.quad_out"
			action = "kill"
			on = 'addedToStage'
			(event "startShow")
		)

		(bindcall play
			id = 'modalBattleTypeRenderer'
			delay = "isBattleTypeChosen ? 0.2 : 0"
			duration = 0.15
			to = "{ alpha: 0, visualOffsetY: -10px }"
			easing = "Easing.quad_in"
			action = "kill"
			(event "startHide")
		)
	)

	(block
		(style (width = 100%))
		(macro MOUSE_EVENTS_DISPATCHER)
		(block
			(style (width = 100%) (align = "center") (backgroundColor = "NO_COLOR"))

			(macro MOUSE_EVENTS_DISPATCHER "'battleType_'")

			(block
				(bind colorTransform "	isSelectableBattleType &&
										rollOver && !battleType_mouseDown		? COLOR_TRANSFORM_BATTLE_TYPE_ROLLOVER
																				: {}")
				(class $BattleTypeIconSize)
				(style (marginBottom = "M"))

				
				(block
					(class $MiddleVHAbsolutely)

					(controller $Instance
						(bind enabled "hasAnimationRenderElement")
						(bind renderer "selectedAnimationElement")
						(args
							_pveOperationDifficulty = "pveOperationDifficulty"
							_operationIconName = "operationIconName"
						)
					)
				)
				
				(block
					(class $Fullsize)
					(class $MiddleAlignedAbsolutely)
					(style (macro DESATURATION_DEFAULT "isSelectableBattleType"))
					(element BattleTypeIcon _iconBattleName = "battleName")
				)

				
				(block
					(macro DEFAULT_CONTROL_MARKER_ANIMATION "isNewBattle")
					(style (position = "absolute") (top = -10px) (right = 1px))
					(element MarkerNew)
				)
			)

			(block
				(bind visible "_showBattleHeader")
				(style (width = 100%) (align = "center"))
				(tf
					(class $TextDefaultBold19NM)
					(style (width = 100%) (textAlign = "center") (leading = -3))
					(bind alpha "	!isSelectableBattleType ? TS :
									isSelected 				? TA :
									battleType_rollOver 	? 0.8
															: TC")
					(bind text "battleHeaderIDS")
				)
			)

			(element GuidingTipsBattleTypeHub
				_battleTypeEntity = "battleTypeEntity"
			)

			(block
				(bind visible "showBattleSubheader")
				(style (width = 100%) (align = "center") (marginTop = "SXS"))
				(tf
					(class $TextDefault17NM)
					(style (width = 100%) (textAlign = "center"))
					(bind alpha "	!isSelectableBattleType ? TS :
									isSelected 				? TA :
									battleType_rollOver 	? 0.8
															: TC")
					(bind text "battleTypeSubheader")
				)
			)
			
			(controller $Tooltip
				(bind renderer "tooltipRenderElementName")
				(args _battleTypeEntityId = "battleTypeEntity.id")
				(macro DEFAULT_TOOLTIP_BEHAVIOUR)
				(macro TOOLTIP_HIDE_ON_EVENT "startHide")
			)

			(macro CLICK_HANDLER
				_prefix = "'battleType_'"
				_methods = "[{	type: isSelectableBattleType ? 'inputMapping.onAction' : '',
								name: 'setBattleType',
								args: { battleType: battleType, battleTypeGameParamId: battleTypeGameParamId }},
							{	type: !isSelected ? 'inputMapping.onAction' : '',
								name: 'PVEScriptsProxy.changeEnterMatchmaker',
								args: { enterMatchmaker: true } },
							{	type: !isSelected ? 'inputMapping.onRequest' : '',
								name: 'setSplashScreenViewed',
								args: { clickedButtonType: 'ingame'}},
							{	type: isSelectableBattleType ? 'inputMapping.onRequest' : '',
								name: 'closeModalSelectBattleType',
								args: {}} ]"
			)
		)

		
		(block
			(style
				(position = "absolute") (right = 0px)
				(alpha = "rollOver ? 1 : 0")
				(visualOffsetY = "rollOver ? 0px : 5px")
			)

			(controller $Animation
				(bindcall play
					duration=0.1
					from={alpha: 0, visualOffsetY: 5px}
					to={alpha: 1, visualOffsetY: 0px}
					reverse="!rollOver"
					(bind trigger "rollOver")
				)
			)

			(element DefaultButton
				_type = "SC.Ui_styles.BUTTON_TYPE.ICON"
				_icon = "SC.Ui_styles.BUTTON_ICON.INFO"
				_methods = "[{	type:	'inputMapping.onRequest',
								name:	'showBattleTypeRules',
								args:	{_entityId: battleTypeEntity.id, _rulesType: battleType} }]"
			)

			
			(controller $Tooltip
				(renderer = 'SimpleStatusTooltip')
				(args _text = 'IDS_TOOLTIP_BATTLE_RULES_DESCRIPTION')
				(macro DEFAULT_TOOLTIP_BEHAVIOUR)
				(macro TOOLTIP_HIDE_ON_EVENT "startHide")
			)
		)
	)

	
	(block
		(bind visible "hasStatusElement")
		(style (width = 100%) (marginTop = "MS"))
		(controller $Instance
			(bind enabled "hasStatusElement")
			(bind renderer "renderStatusElement")
		)
	)
)

(def element BattleTypeIcon (_iconBattleName:str)
	(class $BattleTypeIconSize)
	(style
		(backgroundSize = "cover")
		(bind backgroundImage "'url:../service_kit/battle_types/' + _iconBattleName + '_big.png'")
	)
)

(def element SelectedBattleEventTypeAnimation (_pveOperationDifficulty:number, _operationIconName:str)
	(scope
		(var colorSettings:array = "isIn(_operationIconName, ['PCVO030', 'PCVO027'])	? [ GREENISH_GLOW, YELLOWISH_GLOW, REDDISH_GLOW ]
																						: [ GREENISH_GLOW, GREENISH_GLOW, GREENISH_GLOW ]")
	)
	(style (hitTest = false) (marginTop = "S") (ubScaleX = 1.1) (ubScaleY = 1.1))
	(alpha = 0)

	(controller $Animation
		(bindcall play
			duration = 0.08
			from = "{ alpha: 0, ubScaleX: 1.1, ubScaleY: 1.1}"
			to = "{ alpha: 1.3, ubScaleX: 1, ubScaleY: 1}"
			easing = "Easing.quad_in"
			on = 'addedToStage'
		)
	)

	(block
		(style
			(width = 210px) (height = 210px) (backgroundSize = "fill")
			(backgroundImage = 'url:../animations/spine/selected_battle_type/selected_battle_type.skel')
		)
		(controller $Spine)

		(bind colorTransform "{	redMultiplier: 0,
								greenMultiplier: 0,
								blueMultiplier: 0,
								alphaMultiplier: 2.5,
								redOffset: 10,
								greenOffset: 0,
								blueOffset: 0,
								alphaOffset: 0
								}")
	)
	(block
		(class $MiddleAlignedAbsolutely)
		(style
			(width = 190px) (height = 190px) (backgroundSize = "fill")
			(backgroundImage = 'url:../animations/spine/selected_battle_type/selected_battle_type.skel')
		)
		(controller $Spine)

		(bind colorTransform " {	redMultiplier: 0.1,
									greenMultiplier: 0.1,
									blueMultiplier: 0.1,
									alphaMultiplier: 1.6,
									redOffset: colorSettings[_pveOperationDifficulty].redOffset,
									greenOffset: colorSettings[_pveOperationDifficulty].greenOffset,
									blueOffset: colorSettings[_pveOperationDifficulty].blueOffset,
									alphaOffset: 0
								}")
	)
)

(def element SelectedBattleTypeAnimation ()
	(style
		(hitTest = false)
		(width = 200px) (height = 200px)
		(ubScaleX = 1.1) (ubScaleY = 1.1)
		(backgroundImage = 'url:../animations/spine/selected_battle_type/selected_battle_type.skel')
		(backgroundSize = "fill")
	)
	(alpha = 0)

	(controller $Spine)

	(controller $Animation
		(bindcall play
			duration = 0.08
			from = "{ alpha: 0, ubScaleX: 1.1, ubScaleY: 1.1}"
			to = "{ alpha: 1.3, ubScaleX: 1, ubScaleY: 1}"
			easing = "Easing.quad_in"
			on = 'addedToStage'
		)
	)
)

(def element CurrentRankSeasonButton ()
	(style (width = 100%) (align = "center"))
	(element DefaultButton
		_type = "SC.Ui_styles.BUTTON_TYPE.SECONDARY"
		_icon = "SC.Ui_styles.BUTTON_ICON.INFO"
		_size = "SIZE.SMALL"
		_width = 140px
		_name = 'сurrentRankSeasonButton'
		_label = 'IDS_CURRENT_RANK_SEASON_BUTTON'
		_methods = "[	{	type:	'inputMapping.onAction',
							name:	'navigateTo',
							args:	{route: SC.Ui_windows.ROUTE.RANKS}},
						{	type:	'inputMapping.onRequest',
							name:	'closeModalSelectBattleType',
							args:	{}}]"
	)
)

(def element ClanBattleTypeInfo ()
	(scope
		(struct clanBattlePrimeTime = PULL_CURRENT_CLAN_BATTLE_PRIME_TIME())
		(struct primeTime = PULL_PRIME_TIME(_id = "clanBattlePrimeTime.currentPrimeTimeEntity.id"))
	)

	(style (width = 100%) (align = "center"))
	(element DefaultButton
		_name = 'clanBattlesScheduleBtn'
		_type = "SC.Ui_styles.BUTTON_TYPE.SECONDARY"
		_icon = "SC.Ui_styles.BUTTON_ICON.INFO"
		_size = "SIZE.SMALL"
		_width = 140px
		_label = 'IDS_SCHEDULLE'
		_methods = "[{ type: 'inputMapping.onRequest', name: 'showClanBattlesSchedule', args: {}}]"
	)

	(block
		(style (width = 200px)
		(bind marginTop "primeTime.isActive ? 0px : SXS"))
		(controller $Instance renderer='ClanBattlePrimeTimeIndicator' (bind enabled "!primeTime.isActive"))
	)
)

(def element ClanBattlePrimeTimeIndicator ()
	(scope
		(struct clanBattlePrimeTime = PULL_CURRENT_CLAN_BATTLE_PRIME_TIME())
		(var showPrimeTimeInfo:bool = "clanBattlePrimeTime.chosenPrimeTimeEntity || clanBattlePrimeTime.fixedPrimeTimeEntity")
	)
	(style (width = 100%) (align = "center") (flow = "horizontal"))

	(element UnifiedStatusIcon
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.DATE_ATTENTION"
	)

	(block
		(controller $Instance renderer='PrimeTimeStereotype'
			(bind enabled "showPrimeTimeInfo")
			(args
				_entityId = "clanBattlePrimeTime.currentPrimeTimeEntity.id"
				_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.DATE_ATTENTION"
			)
		)
	)

	(tf
		(bind visible "!showPrimeTimeInfo")
		(class $TextDefaultNM)
		(style (textColor = "SC.Ui_styles.SERVICE_COLORS.ORANGE"))
		(text = 'IDS_CLAN_BATTLES_NO_CHOSEN_PRIMETIME')
	)
)
