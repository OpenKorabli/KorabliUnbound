(def constant SETTINGS_BUTTON_PORT_ALPHA {
	SC.Ui_styles.BUTTON_STATE.DOWN		: 0.5,
	SC.Ui_styles.BUTTON_STATE.OVER		: "TA",
	SC.Ui_styles.BUTTON_STATE.UP		: 0.65
})

(def constant BUTTON_ARROW_DIRECTION {
	LEFT:	'left',
	RIGHT:	'right'
})

(def constant BUTTON_ARROW_BACKGROUND_ALPHA {
	SC.Ui_styles.BUTTON_STATE.DISABLED	: 0,
	SC.Ui_styles.BUTTON_STATE.DOWN		: 0.1,
	SC.Ui_styles.BUTTON_STATE.OVER		: 0.2,
	SC.Ui_styles.BUTTON_STATE.UP		: 0.1
})

(def constant BUTTON_ARROW_IMAGE_ALPHA {
	SC.Ui_styles.BUTTON_STATE.DISABLED	: 0.3,
	SC.Ui_styles.BUTTON_STATE.DOWN		: 0.5,
	SC.Ui_styles.BUTTON_STATE.OVER		: 1,
	SC.Ui_styles.BUTTON_STATE.UP		: 0.85
})

(def element ButtonCameraExcursion (_isInOverState:bool=false, _isInDownState:bool=false, _isExcursionOn:bool=false, _enabled:bool=true)
	(scope
		(event evOnButtonClicked)
		(event btnExcursion_evMouseUp)

		(macro MOUSE_HANDLER_SCOPE "'btnExcursion_'")

		(var isInOverState:bool = "_isInOverState || btnExcursion_rollOver && !btnExcursion_mouseDown")
		(var isInDownState:bool = "_isInDownState || btnExcursion_rollOver && btnExcursion_mouseDown")

		(var backgroundImageURL:str = "_isExcursionOn	? 'url:../service_kit/buttons/icon_controls/camera_on.png'
														: 'url:../service_kit/buttons/icon_controls/camera_off.png'")
	)

	(macro MOUSE_HANDLER
		_enabled = "_enabled"
		_prefix = "'btnExcursion_'"
		_soundSet = "'button_secondary'"
	)
	(dispatch btnExcursion_evMouseUp on='mouseUp' args="{isDown: false}" (bind enabled "_enabled"))
	(dispatch evOnButtonClicked args={} dir="EventDirection.UP" (event "btnExcursion_evMouseUp"))

	(style
		(backgroundSize = "autosize")
		(bind backgroundImage "backgroundImageURL")
	)
)

(def element ButtonSettingsSmall (_enabled:bool=true)
	(scope
		(event evOnButtonClicked)
		(event btn_evMouseUp)

		(macro MOUSE_HANDLER_SCOPE "'btn_'")

		(var isInOverState:bool = "btn_rollOver && !btn_mouseDown")
		(var isInDownState:bool = "btn_mouseDown")
	)

	(macro MOUSE_HANDLER
		_enabled = "_enabled"
		_prefix = "'btn_'"
		_soundSet = "'default_button'"
	)
	(dispatch btn_evMouseUp on='mouseUp' args="{isDown: false}" (bind enabled "_enabled"))
	(dispatch evOnButtonClicked args={} dir="EventDirection.UP" (event "btn_evMouseUp"))

	(style
		(width = 24px)
		(height = 23px)
		(backgroundImage = "'url:../service_kit/buttons/button_settings_small.png'")
	)

	(block
		(alpha = "isInOverState ? 1 : 0")
		(controller $Animation
			(bindcall play	duration=0.15	to="{alpha: 1, visible: true}"	(bind enabled "isInOverState"))
			(bindcall play	duration=0.15	to="{alpha: 0, visible: false}"	(bind enabled "!isInOverState"))
		)

		(style
			(hitTest = "false")
			(position = "absolute")
			(width = 100%)
			(height = 100%)
			(backgroundImage = "'url:../service_kit/buttons/button_settings_small_over.png'")
		)
	)

	(block
		(bind alpha "isInDownState ? 1 : 0")
		(style
			(hitTest = "false")
			(position = "absolute")
			(width = 100%)
			(height = 100%)
			(backgroundImage = "'url:../service_kit/buttons/button_settings_small_down.png'")
		)
	)
)

(def element SettingsButtonPort (_withBg:bool=true)
	(scope
		(macro MOUSE_HANDLER_SCOPE)

		(var accountLevelEntity:dhEntity = "getSingleEntity(CC.accountLevel)")
		(var accountLevelComponent:dhComponent = "accountLevelEntity.accountLevel")
		(var curAccountLevel:number = "accountLevelComponent.level ?: 0" (event "accountLevelComponent.evLevelChanged"))

		(var userTaskEntity:dhEntity = "getSingleEntity(CC.userTask)")
		(var userTaskComponent:dhComponent = "userTaskEntity.userTask")
		(var currentUserTaskFlags:array = "userTaskComponent.flags ?: []" (event "userTaskComponent.evFlagChanged"))
		(var userDoNotWatchTutorial:bool = "currentUserTaskFlags[BINARY_SHIFT_MAP[SC.Common.USER_TASKS_FLAGS.KNOWS_ABOUT_TUTORIAL]] == 0")
		(var showTutorial:bool = "userDoNotWatchTutorial && curAccountLevel > 4")

		(var state:number = "	rollOver && !mouseDown	? SC.Ui_styles.BUTTON_STATE.OVER :
								mouseDown				? SC.Ui_styles.BUTTON_STATE.DOWN
														: SC.Ui_styles.BUTTON_STATE.UP")
		(var btnAlpha:number = "SETTINGS_BUTTON_PORT_ALPHA[state]")

		(struct tutorialMigrationTip = 				PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.TUTORIAL_MIGRATION_SETTINGS_BUTTON"))
		(struct tutorialNavigationOldPlayerTip = 	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.TUTORIAL_NAVIGATION_OLD_PLAYER_SETTINGS_BUTTON"))

		(var tutorialMigrationTipId:number = "	tutorialMigrationTip.isActive			? SC.Context_guiding_tip.TIP_TYPE.TUTORIAL_MIGRATION_SETTINGS_BUTTON : 
												tutorialNavigationOldPlayerTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.TUTORIAL_NAVIGATION_OLD_PLAYER_SETTINGS_BUTTON
																						: SC.Context_guiding_tip.TIP_TYPE.NONE")

		(var isTutorialMigrationTip:bool = "tutorialMigrationTipId != SC.Context_guiding_tip.TIP_TYPE.NONE")
	)
	(name = 'ButtonSettings')

	(macro MOUSE_HANDLER
		_soundSet = "'button_settings'"
		_methods = "[{ type: 'inputMapping.onAction', name: 'openLobbyMenu', args: {} }]"
	)

	(style
		(align = "center|middle")
		(width = 48px)
		(height = 60px)
	)

	(block
		(class $FullsizeAbsolute)
		(controller $Instance renderer='DockHeaderControlBackground'
			(bind enabled "_withBg")
			(args
				_state = "state"
			)
		)
	)

	(block
		(style
			(hitTest = false)
			(width = 32px)
			(height = 32px)
			(backgroundImage = 'url:../service_kit/buttons/settings/big.png')
			(bind alpha "btnAlpha" watch=false)
		)

		(macro DEFAULT_CONTROL_STATE_ANIMATION_ALPHA
			_trigger	= "state"
			_alpha		= "btnAlpha"
		)
		
		(controller $Instance renderer='GuidingTipHub'
			(bind enabled "isTutorialMigrationTip")
			(args
				_tipId = "tutorialMigrationTipId"
				_tipPositioning = "TIP_POSITION_BOTTOM"
				_modalWindowName = 'Dock'
				_pinOffsetInPercents = 2
				_screenOffsetLeft = "XS"
				_offsetY = "SXS"
			)
		)
	)

	(controller $Tooltip
		(renderer = 'SimpleStatusTooltip')
		(args
			_text = 'IDS_TOOLTIP_MENU'
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR "0")
	)
)

(def element ButtonArrow (	_direction:str = "BUTTON_ARROW_DIRECTION.LEFT", _isEnabled:bool = true, _width:number = 22px, _height:number = 40px,
							_dispatchedEv:str = '', _dispatchParams:dict = {}, _methods:array = [])
	(scope
		(macro MOUSE_HANDLER_SCOPE)

		(var state:number = "	!_isEnabled		? SC.Ui_styles.BUTTON_STATE.DISABLED :
								mouseDown		? SC.Ui_styles.BUTTON_STATE.DOWN :
								rollOver		? SC.Ui_styles.BUTTON_STATE.OVER
												: SC.Ui_styles.BUTTON_STATE.UP")

		(var bgAlpha:number =		"BUTTON_ARROW_BACKGROUND_ALPHA[state]")
		(var arrowAlpha:number =	"BUTTON_ARROW_IMAGE_ALPHA[state]")
	)

	(style
		(align = "center|middle")
		(bind width "_width")
		(bind height "_height")
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(hitTest = false)
			(backgroundColor = "SC.Ui_styles.SERVICE_COLORS.WHITE")
			(bind alpha "bgAlpha")
		)
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(hitTest = false)
			(backgroundImage = 'url:../service_kit/frames/one_pixel_frame.png')
			(scale9grid = 2)
			(bind alpha "_isEnabled && !mouseDown && rollOver ? 1 : 0")
		)
	)

	(block
		(style
			(hitTest = false)
			(width = 8px)
			(height = 13px)
			(bind backgroundImage "'url:../service_kit/buttons/arrows/' + _direction + '.png'")
			(bind alpha "arrowAlpha")
		)
	)

	(macro MOUSE_HANDLER
		_enabled =			"_isEnabled"
		_dispatchedEv =		"_dispatchedEv"
		_dispatchParams =	"_dispatchParams"
		_methods =			"_methods"
		_soundSet =			"'button_default'"
	)
)