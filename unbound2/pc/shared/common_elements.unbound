(def constant PROGRESSBAR_BG_URL 'url:../service_kit/progress_bars/bar_hud_bg.png')

(def constant TEXT_BUTTON_ALPHA {
	SC.Ui_styles.BUTTON_STATE.DISABLED	: "TS",
	SC.Ui_styles.BUTTON_STATE.SELECTED	: "TC",
	SC.Ui_styles.BUTTON_STATE.DOWN		: "TS",
	SC.Ui_styles.BUTTON_STATE.OVER		: "TA",
	SC.Ui_styles.BUTTON_STATE.UP		: "TC"
})





(def element DHFormationPlayerIcon (_entityId:number, _isTrainingRoom:bool=false, _isOtherTeam:bool=false)
	(scope
		(var entityAccount:gfx = "$datahub.getEntity(_entityId)")
		(var preBattleSimpleComponent:gfx = "entityAccount ? entityAccount.preBattlePlayerSimple : null" (event "entityAccount.evAdded") (event "entityAccount.evRemoved"))
		(var trainingRoomPlayerComponent:gfx = "entityAccount ? entityAccount.trainingRoomPlayer : null" (event "entityAccount.evAdded") (event "entityAccount.evRemoved"))

		(var isReady:bool =			"preBattleSimpleComponent ? preBattleSimpleComponent.isReady : false"			(event "preBattleSimpleComponent.evIsReadyChanged"))
		(var isInBattle:bool =		"preBattleSimpleComponent ? preBattleSimpleComponent.isInBattle : false"		(event "preBattleSimpleComponent.evIsInBattleChanged"))
		(var isCommander:bool =		"preBattleSimpleComponent ? preBattleSimpleComponent.isCommander : false"		(event "preBattleSimpleComponent.evIsCommanderChanged"))
		(var isMercenary:bool =		"preBattleSimpleComponent ? preBattleSimpleComponent.isMercenary : false"		(event "preBattleSimpleComponent.evIsMercenaryChanged"))
		(var isTeamCommander:bool =	"trainingRoomPlayerComponent ? trainingRoomPlayerComponent.isCommander : false"	(event "trainingRoomPlayerComponent.evUpdate"))
	)

	(element FormationPlayerIcon
		_isCommander	= "_isTrainingRoom ? isTeamCommander : isCommander"
		_isMercenary	= "isMercenary"
		_isReady		= "isReady"
		_isInBattle		= "isInBattle"
		_isOtherTeam	= "_isOtherTeam"
	)
)

(def element FormationPlayerIcon (	_isOtherTeam:bool=false, _isReady:bool=false, _isCommander:bool=false,
									_isMercenary:bool=false, _isInBattle:bool=false, _isEmptySlot:bool=false)
	(scope
		(var formationType:str = 'division')								
		(var postfix:str = "_isOtherTeam ? '_other_division' : ''")
		(var readySuffix:str = "_isReady	? _isCommander	? '' : 'ready_'
											: 'not_ready_'")

		(var imagePath:str = "	_isEmptySlot	?	'empty_slot_'							+ formationType :
								_isInBattle		?	'player_in_battle_'						+ formationType + postfix :
								_isCommander	?	'commander_'			+ readySuffix	+ formationType + postfix :
								!_isMercenary	?	'player_'				+ readySuffix	+ formationType + postfix
												:	'mercenary_'			+ readySuffix	+ formationType")
	)

	(style
		(width = 13px)
		(height = 18px)
		(bind backgroundImage "'url:../service_kit/divisions_icons/' + imagePath + '.png'")
	)

	
	
	
	

	
	
	
	

	
	
)

(def element StatusLine (_text:str, _unifiedStatus:str="SC.Ui_styles.UNIFIED_STATUS.DEFAULT", _textClass:str='$TextDefaultNM',
								_width:number=0, _maxWidth:number=9999, _leading:number=-3, _noTranslate:bool=false, _showStatusIcon:bool=true)
	(scope
		(var bgImage:str = "_unifiedStatus == SC.Ui_styles.UNIFIED_STATUS.DEFAULT	? '' :
							_showStatusIcon											? 'url:../service_kit/unified_status_icons/icon_' + _unifiedStatus + '.png'
																					: 'url:../service_kit/unified_status_icons/icon_no_icon.png'")
	)
	(style
		(flow = "horizontal")
		(bind width "_width ? _width : 'auto'")
	)
	(macro UNIFIED_STATUS_TO_COLOR_AND_ALPHA "_unifiedStatus" "'textColor'" "'textAlpha'")
	(block
		(bind visible "_unifiedStatus != SC.Ui_styles.UNIFIED_STATUS.DEFAULT")
		(style
			(width = 19px) (height = 19px) (marginTop = "-XS") (marginLeft = -3px)
			(marginBottom = -7px) (marginRight = 5px) (backgroundSize = "cover")
			(bind backgroundImage "bgImage")
		)
	)

	(tf
		(name = 'statusLine')
		(bind alpha "textAlpha")
		(style
			(bind width "_width ? 100% : 'auto'")
			(bind maxWidth "_maxWidth")
			(bind leading "_leading")
			(bind textColor "textColor")
			(bind noTranslate "_noTranslate")
		)
		(bind class "_textClass")
		(bindcall substitute imageOffset=5 sourceText="tr(_text)" postfix='' init=true)
	)
)

(def element BattleProgressBar (_barWidth:number, _barHeight:number, _maxProgress:number, _valueProgress:number, _color:number)
	(scope
		(var maxProgress:number = "_maxProgress" watch=false)
		(var valueProgress:number = "_valueProgress" watch=true)

		(var barWidth:number = "_barWidth" watch=false)
		(var barHeight:number = "_barHeight ? _barHeight : 4" watch=false)
	)
	(style
		(width = "barWidth")
		(height = "barHeight")
		(backgroundImage = "PROGRESSBAR_BG_URL")
		(scale9grid = 1)
	)

	(block
		(style
			(position = "absolute")
			(top = "1px")
			(left = "1px")
			(bind height "barHeight - 2")
			(width = "barWidth - 2")
			(bind backgroundColor "_color")
			(bind scaleX "valueProgress <=  maxProgress	? valueProgress / maxProgress
														: 1")
		)
	)
)

(def element ImageItemsCounter (_amount:number)
	(bind visible "_amount")

	(style	(align = "center") (minWidth = "19px") (scale9grid = 4)
			(backgroundImage = "'url:../service_kit/panel_backgrounds/counter.png'"))

	(tf
		(style	(alpha = "TA") (marginLeft = "5px") (marginRight = "XS")
				(marginTop = "XS") (marginBottom = "XS"))
		(class $TextDefaultBoldNM)
		(bind text "formatSeparator(_amount)")
	)
)

(def element ImageTextCounter (_text:str, _textColor:number = "SC.Ui_styles.SERVICE_COLORS.WHITE")
	(style	(align = "center") (minWidth = "19px") (paddingLeft = "5px") (paddingRight = "XS") (paddingTop = "XS") (paddingBottom = "XS")
			(backgroundImage = "'url:../service_kit/panel_backgrounds/counter.png'") (scale9grid = 4))

	(tf
		(class $TextDefaultBoldNM)
		(bind alpha "_textColor == SC.Ui_styles.SERVICE_COLORS.WHITE ? TA : 1")
		(style (bind textColor "_textColor"))
		(bind text "_text")
	)
)

(def element ImageCurrencyCounter (_priceInfo:dict)
	(scope
		(var textColor:number = "	_priceInfo.currency == SC.Common.CURRENCIES.GOLD		? SC.Ui_styles.SERVICE_COLORS.YELLOW :
									_priceInfo.currency == SC.Common.CURRENCIES.FREE_XP		? SC.Ui_styles.SERVICE_COLORS.LIGHT_GREEN :
									_priceInfo.currency == SC.Common.CURRENCIES.ELITE_XP	? SC.Ui_styles.SERVICE_COLORS.LIGHT_BLUE
																							: SC.Ui_styles.SERVICE_COLORS.WHITE")
	)

	(style	(align = "center") (minWidth = "19px") (paddingLeft = "5px")
			(paddingRight = "XS") (paddingTop = "XS") (paddingBottom = "XS") (scale9grid = 4)
			(bind backgroundImage "_priceInfo.finalPrice < 0	? 'url:../service_kit/panel_backgrounds/counter_negative.png'
																: 'url:../service_kit/panel_backgrounds/counter.png'"))

	(tf
		(class $TextDefaultBoldNM)
		(bind alpha "textColor == SC.Ui_styles.SERVICE_COLORS.WHITE ? TA : 1")
		(style (bind textColor "textColor") (bind margin "_priceInfo.finalPrice < 0 ? 1 : 0"))

		(bind text "formatSeparator(_priceInfo.finalPrice)")
	)
)

(def element CloseButton (	_isDisabled:bool=false, _name:str='', _tooltipText:str='IDS_CLOSE', _unifiedStatus:str="SC.Ui_styles.UNIFIED_STATUS.DEFAULT",
							_dispatchedEv:str='', _safeZone:number = -1px, _dispatchParams:dict={}, _methods:array=[])
	(scope
		(macro SIMPLE_MOUSE_OVER_DOWN_SELECTED_COLORTRANSFORM_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
	)
	(style
		(width = 12px)
		(height = 12px)
		(bind padding "_safeZone")
		(backgroundImage = 'url:../service_kit/buttons/button_close.png')
	)
	(bind name "_name")


	(macro SIMPLE_MOUSE_OVER_DOWN_SELECTED_COLORTRANSFORM "!_isDisabled")

	(controller $Tooltip
		(renderer = 'SimpleStatusTooltip')
		(bind enabled "!_tooltipText.empty && !_isDisabled")
		(args
			_text = "_tooltipText"
			_unifiedStatus = "_unifiedStatus"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(macro MOUSE_HANDLER
		_enabled = "!_isDisabled"
		_dispatchedEv = "_dispatchedEv"
		_dispatchParams = "_dispatchParams"
		_methods = "_methods"
		_soundSet = "'button_default'"
	)
)

(def element StaticHotkeyWithText (_text:str='', _isDisabled:bool=false, _tooltipText:str='', _dispatchedEv:str='', _dispatchParams:dict={}, _methods:array=[])
	(scope
		(macro SIMPLE_MOUSE_OVER_DOWN_SELECTED_COLORTRANSFORM_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
	)

	(style
		(backgroundImage = 'url:../service_kit/buttons/hotkey_background.png')
		(scale9grid = [5, 13, 5, 13])
	)

	(macro SIMPLE_MOUSE_OVER_DOWN_SELECTED_COLORTRANSFORM "!_isDisabled")

	(tf
		(class $BlackLabel)
		(style (marginLeft = 3) (marginRight = 3) (marginTop = -1) (marginBottom = -1))
		(bind text "_text")
	)

	(macro MOUSE_HANDLER
		_dispatchedEv = "_dispatchedEv"
		_dispatchParams = "_dispatchParams"
		_methods = "_methods"
		_soundSet = "'button_default'"
	)
)

(def element DefaultButtonDockBackground (_rollOver:bool, _mouseDown:bool)
	(class $FullsizeAbsolute)

	(block
		(class $FullsizeAbsolute)
		(style
			(alpha = 0)
			(scale9grid = 4)
			(backgroundImage = 'url:../service_kit/buttons/button_dock/over.png')
		)

		(controller $Animation
			(bindcall play
				duration = 0.15
				from	 = { alpha: 0 }
				to		 = { alpha: 1 }
				reverse	 = "!(_rollOver && !_mouseDown)"
				(bind trigger "_rollOver && !_mouseDown")
			)
		)
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(alpha = 0)
			(scale9grid = 4)
			(backgroundImage = 'url:../service_kit/buttons/button_dock/down.png')
		)

		(controller $Animation
			(bindcall play
				duration = 0.15
				from	 = { alpha: 0 }
				to		 = { alpha: 1 }
				reverse	 = "!_mouseDown"
				(bind trigger "_mouseDown")
			)
		)
	)
)

(def element BackButton (_name:str='', _text:str='', _dispatchedEv:str='', _dispatchParams:dict={}, _methods:array=[], _inputBtnName:str='btn_back')
	(scope
		(macro MOUSE_HANDLER_SCOPE)
	)

	(style (height = 28px))

	(name = 'btn_back')
	(macro INPUT
		_btnName = "_inputBtnName"
	)

	
	(element DefaultButtonDockBackground
		_rollOver = "rollOver"
		_mouseDown = "mouseDown"
	)
	

	
	(hblock
		(style
			(align = "middle")
			(height = 100%)
			(paddingTop = 1px)
		)

		
		(block
			(style
				(hitTest = "false")
				(alpha = "TC")
				(marginLeft = 6px)
				(width = 14px)
				(height = 14px)
				(backgroundImage = 'url:../service_kit/buttons/icon_navigate/left.png')
			)
		)
		

		
		(block
			(bind name "_name ? _name : '' ")

			(style
				(marginLeft = 5px)
				(marginRight = 10px)
				(marginTop = 5px)
				(marginBottom = 6px)
			)

			(tf
				(class $TextDefaultBold17NM)
				(style (alpha = 0.85))
				(bind text "_text")
			)
		)
		
	)
	

	(macro MOUSE_HANDLER
		_dispatchedEv = "_dispatchedEv"
		_dispatchParams = "_dispatchParams"
		_methods = "_methods"
		_soundSet = "'button_default'"
	)
)

(def element RecommendedItemIcon ()
	(style (width = 16px) (height = 16px) (backgroundImage = "'url:../service_kit/icons/icon_recommended.png'"))
)

(def element DockSubmenuItem (_selected:bool=false, _soundSet:str='', _methods:array=[], _enabled:bool=true, _dispatchedEv:str='evMenuItemClicked', _dispatchParams:dict={}, _rollOver:bool=false, _mouseDown:bool=false)
	(scope
		(event evMenuItemHover)
		(macro MOUSE_HANDLER_SCOPE)

		(var state:number = "	_mouseDown || mouseDown		? SC.Ui_styles.BUTTON_STATE.DOWN :
								_rollOver || rollOver		? SC.Ui_styles.BUTTON_STATE.OVER :
								_selected					? SC.Ui_styles.BUTTON_STATE.SELECTED
															: SC.Ui_styles.BUTTON_STATE.UP ") 
	)
	(dispatch evMenuItemHover dir="EventDirection.UP" args="{ isOver: rollOver }" (bind trigger "rollOver"))
	(class $Fullsize)
	(style (backgroundColor = "NO_COLOR") (bind hitTest "_enabled"))
	(element MenuItemBackground _state = "state")
	
	(macro MOUSE_EVENTS_DISPATCHER)
	(macro SOUND_HANDLER "_soundSet")
	(macro CLICK_HANDLER
		_dispatchedEv = "_dispatchedEv"
		_dispatchParams = "_dispatchParams"
		_methods = "_methods"
	)
)

(def constant DOCK_RESOURCES_WIDGET_PRICE_TAG_ALPHA {
	SC.Ui_styles.BUTTON_STATE.DISABLED	: 0.5,
	SC.Ui_styles.BUTTON_STATE.SELECTED	: 0.7,
	SC.Ui_styles.BUTTON_STATE.DOWN		: 0.8,
	SC.Ui_styles.BUTTON_STATE.OVER		: 1.15,
	SC.Ui_styles.BUTTON_STATE.UP		: 1
})

(def element DockResourcesWidget (_currency:str = '', _label:str = '', _methods:array = [], _name:str = '', _height:number = 60, _isMarkerVisible:bool = false)
	(scope
		(macro MOUSE_HANDLER_SCOPE)

		(macro CALCULATE_PORT_HEADER_ELEM_SIDE_PADDING)

		(var isGold:bool = "_currency == SC.Common.CURRENCIES.GOLD")
		(var isCredits:bool = "_currency == SC.Common.CURRENCIES.CREDITS")
		(var isFreeXP:bool = "_currency == SC.Common.CURRENCIES.FREE_XP")
		(var isParagonXP:bool = "_currency == SC.Common.CURRENCIES.PARAGON_XP")

		(var clickAction:str = "isGold		?	'' :
								isCredits	?	'creditsGoldWindow' :
								isFreeXP	?	'xpFreeExpWindow'
											:	''")
		(var actionParams:dict = "isGold ? { ident: SC.Ui_windows.GUI_URL.BUY_GOLD } : {}")
		(var clickRequest:str = "isGold ? 'openMetashop' : ''")
		(var requestParams:dict = "isGold	? { url: SC.Ui_windows.GUI_URL.BUY_GOLD_IN_GAME }
											: {}")
		(var noAction:bool = "!(clickAction || clickRequest || _methods.length)")

		(var resourceEntity:gfx = "$datahub.getSingleEntity(CC.accountResource)")
		(var accountResourceCurrency:gfx = "resourceEntity.accountResource[_currency]"	(event "resourceEntity.accountResource.evChangedEventum_1")
																						(event "resourceEntity.accountResource.evChangedParagonXP")
																						(event "resourceEntity.accountResource.evChangedGold")
																						(event "resourceEntity.accountResource.evChangedCredit")
																						(event "resourceEntity.accountResource.evChangedFreeXP")
																						(event "resourceEntity.accountResource.evChangedEliteXP"))

		(var finalPrice:number = "accountResourceCurrency ? accountResourceCurrency : 0")
		(var methods:array = "[	{ type: 'inputMapping.onAction', name: clickAction, args: actionParams },
								{ type: 'inputMapping.onRequest', name: clickRequest, args: requestParams } ]")

		(var state:number = "	noAction				? SC.Ui_styles.BUTTON_STATE.UP :
								rollOver && !mouseDown	? SC.Ui_styles.BUTTON_STATE.OVER :
								mouseDown				? SC.Ui_styles.BUTTON_STATE.DOWN
														: SC.Ui_styles.BUTTON_STATE.UP")
		(var priceTagAlpha:number = "DOCK_RESOURCES_WIDGET_PRICE_TAG_ALPHA[state]")
		(var subTextAlpha:number = "PORT_HEADER_SUBTEXT_ALPHA[state]")
	)

	(style
		(bind height "_height")
		(align = "middle")
		(backgroundColor = "NO_COLOR")
	)

	(bind name "_name")

	(block
		(class $FullsizeAbsolute)
		(element DockHeaderControlBackground
			_state = "state"
		)
	)

	(block
		(style
			(bind paddingLeft "PORT_HEADER_CONTROL_DEFAULT_PADDING")
			(bind paddingRight "PORT_HEADER_CONTROL_DEFAULT_PADDING")
		)

		
		(block
			(style
				(marginBottom = "S")
				(alpha = "priceTagAlpha")
			)

			(element PriceTag
				_priceInfo = "{finalPrice: finalPrice, currency: _currency}"
				_size = "SIZE.MEDIUM"
			)

			(macro DEFAULT_CONTROL_STATE_ANIMATION_ALPHA
				_trigger	= "state"
				_alpha		= "priceTagAlpha"
			)

			(block
				(macro DEFAULT_CONTROL_MARKER_ANIMATION "_isMarkerVisible")
				(style
					(position = "absolute")
					(top = "-S")
					(right = "-M")
					(hitTest = false)
				)

				(element MarkerNew)
			)
		)

		(block
			(tf
				(class $TextDefault13NM)
				(style (alpha = "subTextAlpha"))

				(bind text "_label")

				(macro DEFAULT_CONTROL_STATE_ANIMATION_ALPHA
					_trigger	= "state"
					_alpha		= "subTextAlpha"
				)
			)
		)
	)

	(block
		(class $FullsizeAbsolute)
		(style (backgroundColor = "NO_COLOR"))

		(controller $Tooltip
			(renderer = 'CurrencyTooltip')
			(args
				_currency = "_currency"
				_amount = "finalPrice"
				_hasMouseInstruction = "!noAction"
			)

			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)

		(macro MOUSE_HANDLER
			_methods = "_methods.length ? _methods : methods"
			_soundSet = "noAction ? '' : 'button_' + _currency"
		)
	)
)


(def constant MENU_ITEM_BACKGROUND {
	SC.Ui_styles.BUTTON_STATE.DISABLED	: 0,
	SC.Ui_styles.BUTTON_STATE.SELECTED	: 0.6,
	SC.Ui_styles.BUTTON_STATE.DOWN		: 0.45,
	SC.Ui_styles.BUTTON_STATE.OVER		: 1,
	SC.Ui_styles.BUTTON_STATE.UP		: 0
})

(def constant MENU_ITEM_BACKGROUND_ATTENTION {
	SC.Ui_styles.BUTTON_STATE.DISABLED	: 0,
	SC.Ui_styles.BUTTON_STATE.SELECTED	: 0.7,
	SC.Ui_styles.BUTTON_STATE.DOWN		: 0.5,
	SC.Ui_styles.BUTTON_STATE.OVER		: 1.25,
	SC.Ui_styles.BUTTON_STATE.UP		: 0
})

(def element MenuItemBackground (_state:number, _isAttentionState:bool=false)
	(scope
		(var menuItemAlpha:number = "_isAttentionState	? MENU_ITEM_BACKGROUND_ATTENTION[_state]
														: MENU_ITEM_BACKGROUND[_state]")
	)

	(class $FullsizeAbsolute)
	(style
		(hitTest = false)
		(bind backgroundImage "_isAttentionState	? 'url:../service_kit/panel_backgrounds/menu_item_panel_notavailable.png'
													: 'url:../service_kit/panel_backgrounds/menu_item_panel.png'")
		(scale9grid = 3)
	)
	(alpha = "menuItemAlpha")

	(macro DEFAULT_CONTROL_STATE_ANIMATION_ALPHA
		_trigger =	"_state"
		_alpha =	"menuItemAlpha"
	)
)

(def element RepeatParagraphItemNM (_width:number = 0px, _maxWidth:number=9999, _size:number = 0, _leading:number = 0,
									_textAlign:number = "left", _alpha:number = 1, _imageOffset:number = 0,
									_substitutionMap:dict={}, _paragraphText:str = '', _isBold:bool = false,
									_toUpper:bool = false, _textColor:number = "SC.Ui_styles.SERVICE_COLORS.WHITE")
	(scope
		(var textClass:str = "	_isBold	?	_size == SC.Ui_styles.SIZE.MEDIUM	? '$TextDefaultBold17NM' :
											_size == SC.Ui_styles.SIZE.LARGE	? '$TextDefaultBold21NM'
																				: '$TextDefaultBoldNM'
										:	_size == SC.Ui_styles.SIZE.MEDIUM	? '$TextDefault17NM' :
											_size == SC.Ui_styles.SIZE.LARGE	? '$TextDefault19NM'
																				: '$TextDefaultNM'")

		(var paragraphText:str = "_toUpper ? toUpper(tr(_paragraphText)) : tr(_paragraphText)")
	)
	(style (bind width "_width ?: auto"))

	(tf
		(name = 'repeatParagraphText')
		(bind class "textClass")
		(style
			(bind width "_width ?: auto")
			(bind maxWidth "_maxWidth" (bind enabled "!_width"))
			(bind leading "_leading")
			(bind textAlign "_textAlign")
			(bind textColor "_textColor")
			(bind alpha "_alpha")
		)
		(bindcall substitute imageOffset="_imageOffset" substitutionMap="_substitutionMap" sourceText="paragraphText" postfix='' init=true)
	)
)

(def element WrongTextInputNotificationInfotip (_text:str='', _showCloseBtn:bool=true)
	(style (width = 270px))

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)
	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(style (align = "center"))

		(element WarningMessage _text = "_text")

		(dispatch 'evHideWrongMessage' dir="EventDirection.UP" on='leftClick')
	)
	(block
		(style (position = "absolute") (right = 9px) (top = 7px))

		(controller $Instance renderer='CloseButton'
			(bind enabled "_showCloseBtn")
			(args
				_dispatchedEv = 'evHideWrongMessage'
			)
		)
	)
)

(def element BusyIndicator (_label:str='')
	(style (flow = "horizontal"))

	(mc indicator_busy_small)
	(tf
		(bind visible "_label.length > 0")
		(class $TextDefaultTech)
		(bind class "'$Bold'")
		(style (marginLeft = 6px) (marginTop = "-XXS"))
		(bind text "toUpper(tr(_label))")
	)
)

(def element ContextMenuItem (	_title:str, _enabled:bool=true, _selected:bool=false, _noTranslate:bool=false,
								_methods:array=[], _dispatchedEv:str='evMenuItemClicked', _dispatchParams:dict={}, _textClass:str='$TextDefaultNM')
	(style (width = 100%) (backgroundColor = "NO_COLOR"))
	(bind alpha "_enabled ? 1 : 0.5")

	(block
		(class $FullsizeAbsolute)

		(element DockSubmenuItem
			_enabled = "_enabled"
			_selected = "_selected"
			_methods = "_methods"
			_dispatchedEv = "_dispatchedEv"
			_dispatchParams = "_dispatchParams"
		)
	)

	(block
		(style
			(padding = "[SXS, S]")
			(width = 100%)
			(hitTest = false)
		)

		(tf
			(bind class "_textClass")
			(style 
				(width = 100%)
				(alpha = "TC")
				(leading = -2)
				(bind noTranslate "_noTranslate")
			)
			(bind text "_title")
		)
	)
)

(def element ContextMenuItemExpand (_title:str, _enabled:bool=true, _selected:bool=false, _contextElement:str='', _args:dict={})
	(scope
		(event evContextSubMenuRollOver)
		(event evContextMenuClose)
		(event evContextMenuHidden)

		(event evSubMenuStartShow)
		(event evSubMenuStartHide)

		(macro MOUSE_HANDLER_SCOPE _prefix = "'MenuItemExpand_'")

		(var isContextSubMenuRollOver:bool = "false" watch=false)
		(bind isContextSubMenuRollOver "$event.value"	init=false watch=false (event "evContextSubMenuRollOver"))
		(bind isContextSubMenuRollOver "false"			init=false watch=false (event "evContextMenuHidden") (event "evContextMenuClose"))

		(var isVisibleContent:bool = "MenuItemExpand_rollOver || isContextSubMenuRollOver")
	)
	(dispatch evSubMenuStartShow (bind enabled "isVisibleContent") (bind trigger "isVisibleContent"))
	(dispatch evSubMenuStartHide (bind enabled "!isVisibleContent") (bind trigger "isVisibleContent"))

	(style (width = 100%))
	(bind alpha "_enabled ? 1 : 0.5")

	(block
		(class $FullsizeAbsolute)
		(style (bind hitTest "_enabled"))

		(element DockSubmenuItem _selected="_selected || isVisibleContent")
	)

	(hblock
		(style
			(hitTest = false)
			(align = "middle")
			(width = 100%)
			(paddingLeft = "SXS")
			(paddingTop = "S")
			(paddingBottom = "S")
		)

		(tf
			(class $TextDefaultNM)
			(style
				(alpha = "TC")
				(width = 100%)
				(leading = -3)
			)

			(bind text "_title")
		)

		(block
			(bind visible "_enabled")
			(style (marginRight = "XS") (width = 8px) (height = 13px))
			(mc button_expand_h)
		)
	)

	(controller $Tooltip
		(bind enabled "_enabled && _contextElement")
		(bind renderer "_contextElement")
		(args
			_args = "_args"
		)

		(bindcall show animation =	{	delay:		0.1,
										duration:	0.1,
										easing:		"Easing.quint_in",
										from:		{ alpha: 0 },
										to:			{ alpha: 1 }
									}
									(event "evSubMenuStartShow")
		)

		(bindcall hide animation =	{	delay:		0.1,
										duration:	0.15,
										easing:		"Easing.quint_out",
										from:		{ alpha: 1 },
										to:			{ alpha: 0 }
									}
									(event "evSubMenuStartHide")
		)
		(offset = {	x: 0px, y: -1px })

		(screenBoundsOffset =	{	left:	6px,
									top:	6px,
									right:	6px,
									bottom:	6px })

		(bind align "right|innerTop")
		(position = "borderNoTrack")
		(priority = 0)
		(hideOnMove = true)
	)

	(macro MOUSE_EVENTS_DISPATCHER _prefix = "'MenuItemExpand_'")
)

(def element DEFAULT_EXPAND_CONTAINER (_isExpanded:bool)
	
	(style (width = 100%) (ubScaleY = "_isExpanded ? 1 : 0") (minHeight = 1px))
	(alpha = "_isExpanded ? 1 : 0")
	(visible = "_isExpanded")

	(block
		(class $FullsizeAbsolute)
		(isMask = true)
		(style (backgroundColor = 0xFFFFFFFF))
	)

	(controller $Animation
		(bindcall play id='ubScaleExpandAnimation' to="{ubScaleY:1}" duration=0.2 easing="Easing.quad_in" action="kill" (bind enabled "_isExpanded"))
		(bindcall play id='ubScaleExpandAnimation' to="{ubScaleY:0}" delay=0.1 duration=0.2 easing="Easing.quad_out" action="kill" (bind enabled "!_isExpanded"))
		
		(bindcall play id='visibilityExpandAnimation' to="{alpha:0, visible:false}" duration=0.3 easing="Easing.quad_out" action="kill" (bind enabled "!_isExpanded"))
		(bindcall play id='visibilityExpandAnimation' to="{alpha:1, visible:true}" duration=0.2 easing="Easing.quad_in" action="kill" (bind enabled "_isExpanded"))
	)
	
)

(def element EmptyStatusParagraph (_text:str, _textClass:str='$TextDefault17NM')
	(style (width = 100%))

	(tf
		(bind class "_textClass")
		(style
			(width = 100%)
			(textAlign = "center")
			(alpha = "TS")
		)
		(bind text "_text")
	)
)

(def element WarningMessage (_text:str='', _maxWidth:number=280, _highWarning:bool=false)
	(scope
		
		(var errorStringsToShowSupportLinkFor:str = "tr('IDS_ACCOUNT_ERROR_ALL_SPA_LOGIN_ALREADY_TAKEN')")
		(var isVisibleLink:bool = "errorStringsToShowSupportLinkFor == _text")
	)
	(style (width = 100%))

	(tf
		(class $TextDefaultNM)
		(style
			(width = 100%)
			(textAlign = "center")
			(bind textColor "_highWarning	?	SC.Ui_styles.SERVICE_COLORS.RED
											:	SC.Ui_styles.SERVICE_COLORS.ORANGE"))

		(bind text "_text")
	)
	(block
		(bind visible "isVisibleLink")
		(style (width = 100%) (align = "center") (marginTop = 6px))

		(controller $Instance renderer='LinkText'
			(bind enabled "isVisibleLink")
			(args
				_label = 'IDS_LINK_SUPPORT'
				_urlIdent = "SC.Ui_windows.GUI_URL.SUPPORT"
				_tooltipText = 'IDS_LINK_SUPPORT_HINT'
				_name = 'ButtonSupport'
			)
		)
	)
)

(def element LinkText (_label:str='', _urlIdent:str='', _tooltipText:str='', _name:str='', _size:number="SIZE.DEFAULT")
	(scope
		(macro MOUSE_HANDLER_SCOPE)

		(var state:number = "	mouseDown	? SC.Ui_styles.BUTTON_STATE.DOWN :
								rollOver	? SC.Ui_styles.BUTTON_STATE.OVER
											: SC.Ui_styles.BUTTON_STATE.UP")

		(var labelAlpha:number = "TAB_BUTTON_LABEL_ALPHA[state]")
		(var lineAlpha:number = "TAB_BUTTON_LINE_ALPHA[state]")
	)
	(bind name "_name")

	(block
		(style (alpha = "labelAlpha"))
		(tf
			(bind class "_size == SIZE.LARGE ? '$TextDefault19NM' : '$TextDefaultNM'")
			(bind text "_label")
		)
		(macro DEFAULT_CONTROL_STATE_ANIMATION_ALPHA _trigger="state" _alpha="labelAlpha")
	)

	
	(block
		(style
			(position = "absolute")
			(alpha = "lineAlpha")
			(width = 100%)
			(bottom = 0px)
			(height = "XXS")
			(backgroundColor = 0xFFFFFFFF)
		)
		(macro DEFAULT_CONTROL_STATE_ANIMATION_ALPHA _trigger="state" _alpha="lineAlpha")
	)

	(macro MOUSE_HANDLER
		_methods = "[ {	type: 'inputMapping.onAction',
						name: 'gotoUrlByIdent',
						args: { ident: _urlIdent }}]"
	)

	(controller $Tooltip
		(bind enabled "_tooltipText")
		(renderer = 'SimpleStatusTooltip')
		(args
			_text = "_tooltipText"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element InputTextDefault (	_onEnterEvent:str='',
								_onInputChangedEvent:str='',
								_onCloseButtonEvent:str='',
								_onEnterTooltipText:str='',
								_closeButtonTooltipText:str='',
								_onInputFocusChangedEvent:str='',
								_isSmallButtonEnter:bool=false,
								_hideButtonEnter:bool=false,
								_defaultText:str='',
								_tooltipText:str='',
								_placeholderText:str='',
								_maxChars:number=32,
								_restrict:str=null,
								_width:str='100%',
								_onWrongSymbolInputedEvent:str='',
								_focusIndex:number=0,
								_isPassword:bool=false,
								_isCapsStateVisible:bool=true,
								_defaultFocused:bool=false,
								_name:str = '',
								_closeButtonName:str = '')
	(scope
		(event evInputFocusReset)
		(event evKeyDown)
		(event evEnter)
		(macro MOUSE_HANDLER_SCOPE)

		(var textInput:str = "_defaultText" watch=false)
		(bind textInput "_defaultText" init=false watch=false (bind trigger "_defaultText"))

		(var isFocused:bool = false)
		(var isPlaceholderVisible:bool = "!isFocused && textInput.length == 0")
		(var isActive:bool = "isFocused || rollOver")

		(var keyCode:number = 0)
		(bind keyCode "$event.keyCode" init=false (event "evKeyDown"))

		(var capsLockState:gfx = "$datahub.getSingleComponent(CC.capsLockState)")
		(var isActiveCapsLock:bool = "capsLockState.isActive" (event "capsLockState.evIsActiveChanged"))
		(var isCapsLockVisible:bool = "isFocused && isActiveCapsLock && _isCapsStateVisible")
	)
	(dispatch evEnter dir="EventDirection.NONE" (bind enabled "_onEnterEvent && keyCode == KEY_ENTER") (event "evKeyDown"))
	(dispatch "_onEnterEvent" args="{value: textInput}" dir="EventDirection.UP" init=false watch=false (event "evEnter"))

	(bindcall externalCall 'sound.playSetSoundDirect' "['hard_textinput', 'change']" init=false watch=false on='change')
	(bindcall externalCall 'sound.playSetSoundDirect' "['button_default', SoundEvent.CLICK]" init=false watch=false (event "evEnter"))

	(bind name "_name")

	(style (bind width "_width") (flow = "horizontal") (align = "middle"))
	(macro MOUSE_EVENTS_DISPATCHER)

	(block
		(style (width = 100%))

		(block
			(class $FullsizeAbsolute)
			(style (padding = -1px))
			(block
				(class $FullsizeAbsolute)
				(style (backgroundImage = 'url:../service_kit/text_input/bg.png') (scale9grid = 9))
			)
			(block
				(class $FullsizeAbsolute)
				(style (backgroundImage = 'url:../service_kit/frames/one_pixel_frame.png') (scale9grid = 2))
				(alpha = 0)
				(controller $Animation
					(bindcall play
						duration=0.15
						from="{ alpha:0 }"
						to="{ alpha:0.3 }"
						easing="Easing.quad_in"
						reverse="!isActive"
						(bind trigger "isActive")
					)
				)
			)
		)

		(hblock
			(style (width = 100%) (padding = "S"))
			(tf
				(bind visible "isPlaceholderVisible")
				(class $TextDefaultNM)
				(style
					(width = 100%)
					(alpha = "TS")
					(position = "absolute")
					(hitTest = false)
				)
				(bind text "_placeholderText")
			)

			(input
				(class $TextDefaultNM)
				(style
					(width = 100%)
					(multiline = false)
					(wordWrap = false)
				)

				(mouseEnabled = true)
				(selectable = true)

				(bind maxChars "_maxChars")
				(bind displayAsPassword "_isPassword")

				(bind text "textInput")
				(sync textInput from='text' on='change')

				(bind restrictFeedback "_restrict")
				(dispatch "_onWrongSymbolInputedEvent" dir="EventDirection.UP" on='evWrongSymbolInput')
				(dispatch "_onInputChangedEvent" args="{value: textInput}" dir="EventDirection.UP" init=false on='change')

				(controller $Focus
					tabIndex = "_focusIndex"
					defaultFocus = "_defaultFocused"
					clickFocus = true
					tabFocus = true

					(bind isFocused "$event" init=false on='evFocused')
					(bindcall setFocus "false" init=false watch=false (event "evInputFocusReset"))

					(dispatch "_onInputFocusChangedEvent" args="$event" dir="EventDirection.UP" on='evFocused')

					(dispatch evKeyDown args= "{ keyCode: $event.keyCode }" init=false on='keyDown')
				)

				(controller $Tooltip
					(bind enabled "_tooltipText")
					(renderer = 'SimpleStatusTooltip')
					(args
						_text = "_tooltipText"
					)
					(macro DEFAULT_TOOLTIP_BEHAVIOUR)
				)
			)
			(block
				(bind visible "_isCapsStateVisible")
				(style (height = 100%) (align = "middle"))

				(block
					(style
						(width = 15px)
						(height = 18px)
						(backgroundSize = "cover")
						(marginTop = -3px)
						(marginRight = -6px)
						(marginBottom = -3px)
						(backgroundImage = 'url:../service_kit/icons/caps.png')
						(alpha = "isCapsLockVisible ? 1 : 0")
					)

					(controller $Animation
						(bindcall play duration=0.15 from="{ alpha:0 }" to="{ alpha:1 }" easing="Easing.quad_in" reverse="!isCapsLockVisible" (bind trigger "isCapsLockVisible"))
					)
				)
			)
		)
	)

	(block
		(bind visible "!_hideButtonEnter")
		(style (marginLeft = "S"))

		(controller $Instance renderer='DefaultButton'
			(bind enabled "!_hideButtonEnter")
			(args
				_width = 93px
				_size = "SIZE.SMALL"
				_type = "_isSmallButtonEnter ? SC.Ui_styles.BUTTON_TYPE.ICON : SC.Ui_styles.BUTTON_TYPE.DEFAULT"
				_icon = "_isSmallButtonEnter ? SC.Ui_styles.BUTTON_ICON.ENTER : ''"
				_focusIndex = "_focusIndex + 1"
				_label = 'IDS_APPLY'
				_tooltipText = "_onEnterTooltipText"
				_dispatchedEv = "'evEnter'"
				_dispatchParams = "{ value: textInput }"
			)
		)
	)

	(block
		(bind visible "_onCloseButtonEvent")
		(style (marginLeft = "S"))

		(element CloseButton
			_dispatchedEv = "_onCloseButtonEvent"
			_tooltipText = "_closeButtonTooltipText"
			_name = "_closeButtonName"
		)
	)
)

(def element CharsLeft (_charsLeft:number)
	(block
		(style (hitTest = false) (marginTop = 10px))
		(tf
			(class $TextDefaultNM)
			(style (alpha = "TS"))
			(bind text "tr('IDS_CHARS_LEFT')  + ' ' + toString(_charsLeft)")
		)
	)
)

(def element InputTextDefaultNumeric (	_onEnterEvent:str='',
										_onInputChangedEvent:str='',
										_onInputFocusChangedEvent:str='',
										_defaultText:str='',
										_maxNumericValue:number=999999999999999,
										_width:str='100%',
										_onWrongSymbolInputedEvent:str='',
										_focusIndex:number=0,
										_textClass:str='$TextDefault25NM',
										_textColor:number="SC.Ui_styles.SERVICE_COLORS.WHITE",
										_defaultFocused:bool=false,
										_name:str='')
	(scope
		(event evKeyDown)
		(event evEnter)
		(macro MOUSE_HANDLER_SCOPE)

		(var textInput:str = "_defaultText" watch=false)
		(bind textInput "_defaultText" init=false watch=false (bind trigger "_defaultText"))

		(var isFocused:bool = false)
		(var isActive:bool = "isFocused || rollOver")

		(var keyCode:number = 0)
		(bind keyCode "$event.keyCode" init=false (event "evKeyDown"))
	)

	(dispatch evEnter dir="EventDirection.NONE" (bind enabled "_onEnterEvent && keyCode == KEY_ENTER") (event "evKeyDown"))
	(dispatch "_onEnterEvent" args="{value: textInput}" dir="EventDirection.UP" init=false watch=false (event "evEnter"))

	(bindcall externalCall 'sound.playSetSoundDirect' "['hard_textinput', 'change']" init=false watch=false on='change')
	(bindcall externalCall 'sound.playSetSoundDirect' "['button_default', SoundEvent.CLICK]" init=false watch=false (event "evEnter"))

	(bind name "_name")
	(style (bind width "_width") (flow = "horizontal") (align = "middle"))

	(macro MOUSE_EVENTS_DISPATCHER)
	(block
		(style (width = 100%))

		(block
			(class $FullsizeAbsolute)
			(style (padding = -1px))
			(block
				(class $FullsizeAbsolute)
				(style (backgroundImage = 'url:../service_kit/text_input/bg.png') (scale9grid = 9))
			)
			(block
				(class $FullsizeAbsolute)
				(style (backgroundImage = 'url:../service_kit/frames/one_pixel_frame.png') (scale9grid = 2))
				(alpha = 0)
				(controller $Animation
					(bindcall play
						duration=0.15
						from="{ alpha:0 }"
						to="{ alpha:0.3 }"
						easing="Easing.quad_in"
						reverse="!isActive"
						(bind trigger "isActive")
					)
				)
			)
		)

		(hblock
			(style (width = 100%) (padding = "S"))
			(input
				(bind class "_textClass")
				(style
					(width = 100%)
					(bind alpha "_textColor == SC.Ui_styles.SERVICE_COLORS.WHITE ? TA : 1")
					(multiline = false)
					(wordWrap = false)
					(bind textColor "_textColor")
				)

				(mouseEnabled = true)
				(selectable = true)
				(isNumeric = true)

				(bind maxNumericValue "_maxNumericValue")

				(bind text "textInput")
				(sync textInput from='text' on='change')

				(bind restrictFeedback "'[0-9]+'")
				(dispatch "_onWrongSymbolInputedEvent" dir="EventDirection.UP" on='evWrongSymbolInput')
				(dispatch "_onInputChangedEvent" args="{value: textInput}" dir="EventDirection.UP" init=false on='change')

				(controller $Focus
					tabIndex = "_focusIndex"
					defaultFocus = "_defaultFocused"
					clickFocus = true
					tabFocus = true

					(bind isFocused "$event" init=false on='evFocused')
					(dispatch "_onInputFocusChangedEvent" args="$event" dir="EventDirection.UP" on='evFocused')

					(dispatch evKeyDown args= "{ keyCode: $event.keyCode }" init=false on='keyDown')
				)
			)
		)
	)
)

(def element DescriptionInputText (	_onEnterEvent:str='',
									_onInputChangedEvent:str='',
									_onEnterTooltipText:str='',
									_tooltipText:str='',
									_placeholderText:str='Placeholder Text',
									_isSmallButtonEnter:bool=false,
									_hideButtonEnter:bool=false,
									_defaultText:str='',
									_restrictionText:str='',
									_maxChars:number=0,
									_name:str='',
									_width:str = '100%',
									_focusIndex:number=0,
									_isEnabled:bool=true,
									_defaultFocused:bool=false )
	(scope
		(event evKeyDown)
		(event evEnter)

		(var textInput:str = "_defaultText" watch=false)
		(bind textInput "_defaultText" init=false watch=false (bind trigger "_defaultText"))

		(var savedText:str = "''" watch=false)
		(bind savedText "textInput" init=true watch=false (event "evEnter"))

		(var textInputHasChanges:bool = "textInput != savedText")

		(var isFocused:bool = false)
		(var isPlaceholderVisible:bool = "!isFocused && textInput.length == 0")

		(var keyCode:number = 0)
		(bind keyCode "$event.keyCode" init=false (event "evKeyDown"))
	)
	(dispatch evEnter dir="EventDirection.NONE" init=false watch=false (bind enabled "textInputHasChanges && keyCode == KEY_ENTER") (event "evKeyDown"))

	(dispatch "_onInputChangedEvent"	args="{value: textInput}" dir="EventDirection.UP" init=false watch=false on='change')
	(dispatch "_onEnterEvent"			args="{value: textInput}" dir="EventDirection.UP" init=false watch=false (event "evEnter"))

	(bindcall externalCall 'sound.playSetSoundDirect' "['hard_textinput', 'change']" init=false watch=false on='change')
	(bindcall externalCall 'sound.playSetSoundDirect' "['button_default', SoundEvent.CLICK]" init=false watch=false (event "evEnter"))

	(bind name "_name")

	(style (bind width "_width") (bind hitTest "_isEnabled"))
	(block
		(style (width = 100%))

		(block
			(class $FullsizeAbsolute)
			(style (padding = -1px))
			(block
				(class $Fullsize)
				(style
					(backgroundImage = 'url:../service_kit/text_input/bg.png')
					(scale9grid = 4)
				)
			)
		)

		(hblock
			(style (width = 100%) (padding = "S"))

			(tf
				(bind visible "isPlaceholderVisible")
				(class $TextDefaultNM)
				(style
					(width = 100%)
					(alpha = "TS")
					(position = "absolute")
					(hitTest = false)
				)
				(bind text "_placeholderText")
			)

			(input
				(class $TextDefaultNM)
				(style (width = 100%) (alpha = "TA") (minHeight = 64px) (noTranslate = true) (multiline = false) (wordWrap = true))

				(mouseEnabled = true)
				(bind selectable "_isEnabled")

				(bind maxChars "_maxChars")
				(bind text "textInput")
				(sync textInput from='text' on='change')

				(controller $Focus
					tabIndex = "_focusIndex"
					defaultFocus = "_defaultFocused"
					clickFocus = true
					tabFocus = true

					(bind isFocused "$event" init=false on='evFocused')
					(dispatch evKeyDown args= "{ keyCode: $event.keyCode }" init=false on='keyDown')
				)

				(controller $Tooltip
					(bind enabled "_tooltipText")
					(renderer = 'SimpleStatusTooltip')
					(args
						_text = "_tooltipText"
					)
					(macro DEFAULT_TOOLTIP_BEHAVIOUR)
				)
			)
		)

		(block
			(bind visible "!_isEnabled")
			(class $FullsizeAbsolute)
			(style (backgroundColor = "SC.Ui_styles.SERVICE_COLORS.INNER_PANEL"))

			(block
				(class $Fullsize)
				(style (paddingRight = 20px) (paddingLeft = 20px) (align = "middle"))

				(tf
					(class $TextDefaultBold21NM)
					(style (width = 100%) (textAlign = "center") (textColor = "SC.Ui_styles.SERVICE_COLORS.ORANGE"))
					(bind text "_restrictionText")
				)
			)
		)
	)

	(hblock
		(bind visible "_isEnabled")
		(style (width = 100%))

		(element CharsLeft _charsLeft = "_maxChars - textInput.length")

		(block
			(bind visible "!_hideButtonEnter")
			(style (width = 100%) (marginTop = "XS") (align = "right"))

			(controller $Instance renderer='DefaultButton'
				(bind enabled "!_hideButtonEnter")
				(args
					_width = 93px
					_size = "SIZE.SMALL"
					_type = "_isSmallButtonEnter ? SC.Ui_styles.BUTTON_TYPE.ICON : SC.Ui_styles.BUTTON_TYPE.DEFAULT"
					_icon = "_isSmallButtonEnter ? SC.Ui_styles.BUTTON_ICON.ENTER : ''"
					_focusIndex = "_focusIndex + 1"
					_label = 'IDS_APPLY'
					_enabled = "textInputHasChanges"
					_tooltipText = "_onEnterTooltipText"
					_dispatchedEv = "'evEnter'"
					_dispatchParams = "{ value: textInput }"
				)
			)
		)
	)
)

(def element UnifiedStatusIcon (_unifiedStatus:str = "SC.Ui_styles.UNIFIED_STATUS.DEFAULT", _showIcon:bool=true)
	(style
		(width = 19px)
		(height = 19px)
		(marginTop = "-XS")
		(marginLeft = -3px)
		(marginBottom = -7px)
		(marginRight = 5px)
		(backgroundSize = "cover")
		(bind backgroundImage "_showIcon ? 'url:../service_kit/unified_status_icons/icon_' + _unifiedStatus + '.png' : ''")
	)
)

(def element ConvertRate (_title:str, _priceInfoLeft:dict = {}, _priceInfoRight:dict = {}, _valueRight:number = 0, _isPercent:bool = false, _width:number = null)
	(style
		(width = 100%)
		(flow = "horizontal")
	)
	(tf
		(class $TextDefaultNM)
		(style
			(alpha = "TA")
			(marginRight = "S")
			(bind width "_width ? _width : 'auto'")
		)
		(bind text "_title ?: 'IDS_CONVERT_RATE'")
	)
	(hblock
		(element PriceTag _priceInfo = "_priceInfoLeft")
		(tf
			(class $TextDefaultNM)
			(style
				(marginRight = "XS")
				(marginLeft = "XS")
				(alpha = "TA")
			)
			(text = '=')
		)
		(block
			(controller $Instance renderer = 'PriceTag'
				(bind enabled "_priceInfoRight")
				(args
					_priceInfo = "_priceInfoRight"
					_showDiscountTag = true
				)
			)
		)
		(hblock
			(bind visible "!_priceInfoRight")
			(tf
				(class $TextDefaultNM)
				(style (alpha = "TA"))
				(bind text "_valueRight")
			)
			(tf
				(bind visible "_isPercent")
				(class $TextDefaultNM)
				(style (alpha = "TA"))
				(text = 'IDS_PERCENT_SPACE')
			)
		)
	)
)

(def element ProgressBarBlock (	_currentValue:number, _maxValue:number, _title:str='', _curValueTextClass:str='$TextDefaultNM', _barColor:number=null,
								_unifiedStatus:str = "SC.Ui_styles.UNIFIED_STATUS.DEFAULT", _showPercent:bool=false, _progressIconPath:str='')
	(scope
		(var progress:number = "_currentValue && _maxValue ? _currentValue / _maxValue : 0")
		(var maxValue:number = "_showPercent ? 0 : _maxValue")

		(var curValue:number = "_currentValue")
		(var curValueStr:str = "toString(round(progress * 100)) + '%'")
	)
	(macro UNIFIED_STATUS_TO_COLOR_AND_ALPHA "_unifiedStatus" "'textColor'" "'textAlpha'")
	(style (width = 100%))

	(tf
		(bind visible "toBool(_title)")
		(class $TextDefaultNM)
		(style
			(width = 100%)
			(marginBottom = "S")
			(alpha = "TA")
			(leading = -2)
			(bind alpha "textAlpha")
			(bind textColor "textColor")
		)
		(bind text "tr(_title)")
	)

	(block
		(style
			(width = 100%)
			(marginBottom = "XS")
			(marginRight = -1px)
			(marginLeft = -1px)
		)

		(element DefaultProgressBar
			_progress = "progress"
			_color = "_barColor"
		)
	)

	(hblock
		(style
			(align = "middle")
			(hgap = "XS")
		)

		(element DefaultDividedCounter
			_curValueTextClass = "_curValueTextClass"
			_doNotHideOnZeroMaxValue = "true"
			_curValue = "!_showPercent ? curValue : null"
			_curValueStr = "_showPercent ? curValueStr : null"
			_maxValue = "maxValue"
			_unifiedStatus = "_unifiedStatus"
		)

		(block
			(bind visible "_progressIconPath")
			(style
				(width = 16px)
				(height = 16px)
				(bind backgroundImage "_progressIconPath")
			)
		)
	)
)

(def element IssuedStampSmall (_text:str, _angleRotation:number = 0, _alpha:number = 0.95)
	(style
		(paddingTop = 6px)
		(paddingBottom = 6px)
		(paddingLeft = "S")
		(paddingRight = "S")
		(backgroundImage = 'url:../service_kit/campaigns/icon_issued_small.png')
		(scale9grid = [3])
		(bind rotation "_angleRotation")
	)
	(tf
		(class $TextDefaultBoldNM)
		(bind alpha "_alpha")
		(bind text "_text")
	)
)

(def element IssuedStamp (_text:str, _angleRotation:number = 0, _alpha:number = 0.95)
	(style
		(paddingTop = "S")
		(paddingBottom = "S")
		(paddingLeft = "SXS")
		(paddingRight = "SXS")
		(backgroundImage = 'url:../service_kit/campaigns/icon_issued_small.png')
		(scale9grid = [3])
		(bind rotation "_angleRotation")
	)
	(tf
		(class $TextDefaultBold19NM)
		(bind alpha "_alpha")
		(bind text "_text")
	)
)

(def constant COME_BACK_LATER_TYPE "{
	INFO: 'INFO',
	TASKS: 'TASKS',
	RANKED_SEASON: 'RANKED_SEASON',
	CVC_RESULTS: 'CVC_RESULTS',
	REPLAYS: 'REPLAYS',
	SNOWFLAKES_SHIPS: 'SNOWFLAKES_SHIPS',
	TRAINING_ROOMS_CREATED: 'TRAINING_ROOMS_CREATED',
	TRAINING_ROOMS_SUITED_FOR_REQUEST: 'TRAINING_ROOMS_SUITED_FOR_REQUEST'
}")

(def element NoItemsComeBackLater (_instructionText:str, _subText:str = 'IDS_COME_BACK_LATER', _disableSubText:bool = false, _type:str = "COME_BACK_LATER_TYPE.INFO")
	(style
		(width = 100%)
		(position = "absolute")
		(top = 35%)
		(marginTop = -50%)
		(align = "center")
	)

	(tf
		(class $TextDefaultBold25NM)
		(style (marginBottom = "SXS") (alpha = "TA"))
		(bind text "toUpper(tr('IDS_NO_CURRENT_' + _type))")
	)

	(block
		(controller $Instance renderer='InstructionBigTech'
			(bind enabled "!_disableSubText")
			(args
				_instructionText = "_subText"
				_maxWidth = 980px
			)
		)
	)
)

(def element InstructionBigTech (_instructionText:str, _leading:number = 0, _maxWidth:number = 500px)
	(tf
		(class $TextDefault17NM)
		(style
			(textAlign = "center")
			(bind leading "_leading")
			(bind maxWidth "_maxWidth")
			(alpha = "TC")
		)
		(bind text "_instructionText")
	)
)

(def element MetaEventResultCard (_text:str = '', _bgImage:str = '', _value:number = 0, _valueData:array = [], _bottomText:str = '')
	(style
		(width = 368px)
		(backgroundColor = 0x33000000)
		(bind marginLeft "$index ? {1280:L, 1920:LM} : 0")
	)
	(block
		(class $FullsizeAbsolute)
		(element BlurMapWithLayerContrastPanel)
	)

	(block
		(style
			(width = 100%)
			(paddingLeft = "{1280:M, 1920:MS}")
			(paddingRight = "{1280:M, 1920:MS}")
			(paddingTop = "{720:M, 1080:MS}")
			(paddingBottom = "{720:M, 1080:MS}")
			(align = "center")
		)
		(block
			(style (width = 300px) (height = 116px) (bind backgroundImage "_bgImage"))
		)
		(block
			(style (width = 100%) (height = 40px) (marginTop = "M"))
			(tf
				(class $TextDefault19NM)
				(style (width = 100%) (textAlign = "center") (alpha = "TA"))
				(bind text "_text")
			)
		)
	)
	(element HorizontalDividerTwoPx)

	(block
		(bind visible "!_valueData.length")
		(style (width = 100%) (height = "{720:80px, 1080:100px}") (align = "center|middle"))
		(tf
			(class $TextDefaultBold36NM)
			(style (alpha = "TA"))
			(bind text "formatSeparator(_value)")
		)
	)
	(block
		(bind visible "_valueData.length")
		(style
			(width = 100%)
			(height = "{720:80px, 1080:100px}")
			(paddingLeft = "LM")
			(paddingRight = "LM")
			(align = "center|middle")
		)
		(controller $Repeat renderer='MetaEventResultsRepeater'
			(bind count "_valueData.length")
			(args
				_taskCategory = "_valueData[$index].type"
				_totalResult = "_valueData[$index].value"
			)
		)
	)
	(block
		(style (width = 100%))
		(controller $Instance renderer = 'HorizontalDividerTwoPx' (bind enabled "_bottomText"))
	)

	(block
		(bind visible "_bottomText")
		(style
			(width = 100%)
			(marginTop = "MS")
			(marginBottom = "MS")
			(paddingLeft = "{720:M, 1080:MS}")
			(paddingRight = "{720:M, 1080:MS}")
		)
		(tf
			(class $TextDefault17NM)
			(style (width = 100%) (textAlign = "center") (alpha = "TC"))
			(bind text "_bottomText")
		)
	)
)

(def element MetaEventResultsRepeater (_taskCategory:str = '', _totalResult:number = 0)
	(style
		(width = 100%)
		(flow = "horizontal")
		(bind marginTop "$index ? M : 0")
	)
	(tf
		(class $TextDefaultNM)
		(style (width = 100%) (alpha = "TC"))
		(bind text "tr('IDS_SSE_CONDITION_CATEGORY_DESCRIPTION_' + toUpper(_taskCategory) + '_SHORT')")
	)
	(tf
		(class $TextDefaultBoldNM)
		(style (alpha = "TA"))
		(bind text "_totalResult ? _totalResult : 'IDS_DASH'")
	)
)

(def element RarityRibbon (_rarity:number)
	(style
		(width = 16px)
		(height = 16px)
		(bind backgroundImage "'swf:../service_kit/rarities_svg/rarities_svg.swf:rarity_' + _rarity")
	)
)

(def element InnerPanelFullsizeAbsolute ()
	(class $FullsizeAbsolute)
	(style (backgroundColor = "SC.Ui_styles.SERVICE_COLORS.INNER_PANEL"))
)

(def element DefaultScrollButton (	_canScroll:bool,
									_rollOver:bool,
									_mouseDown:bool,
									_buttonCarouselName:str,
									_clickDispatchedEv:str,
									_clickDispatchedParams:dict = {},
									_isEnabled:bool = true,
									_safetyZone:number = 0px,
									_direction:number = "ScrollDirection.LEFT",
									_soundSet:str = '')
	(name = "_buttonCarouselName")

	(scope
		(macro MOUSE_HANDLER_SCOPE)
		(var bgIconPath:str = "_direction == ScrollDirection.LEFT 	? 'url:../service_kit/buttons/carousel_arrows/arrow_left.png'
																	: 'url:../service_kit/buttons/carousel_arrows/arrow_right.png'")
		(var isRollOver:bool = 			"_rollOver 	|| rollOver")
		(var isMouseDown:bool = 		"_mouseDown || mouseDown")
		(var iconColorTransform:dict = 	"	!_isEnabled 				? CT_SCROLL_DISABLED :
											!_canScroll 				? CT_CANT_SCROLL :
											isRollOver && !isMouseDown 	? CT_ROLL_OVER :
											isMouseDown 				? CT_DOWN
																		: CT_SCROLL_IDLE")
	)

	(style
		(width = 28px)
		(height = 28px)

		(bind hitTest "_canScroll && _isEnabled")
		(bind padding "-_safetyZone")
	)

	(block
		(macro MOUSE_EVENTS_DISPATCHER)
		(macro SOUND_HANDLER _soundSet="_soundSet")
		(dispatch "_clickDispatchedEv" args="_clickDispatchedParams" dir="EventDirection.UP" (bind enabled "_canScroll") (event "evClicked"))

		(class $Fullsize)
		(style
			(align = "center|middle")
			(backgroundColor = "NO_COLOR")
		)

		(block
			(style
				(hitTest = false)
				(height = 18px)
				(width = 12px)
				(backgroundImage = "bgIconPath")
			)
			(macro DEFAULT_CONTROL_STATE_ANIMATION_CT "iconColorTransform")
		)
	)
)

(def element ExplosionAnimation (_colorTransform:dict = {})
	(style
		(hitTest = false)
		(position = "absolute")
		(width = 550px)
		(height = 550px)
		(backgroundSize = "cover")
		(backgroundImage = 'url:../animations/spine/account_leveling/explosion/explosion.skel')
	)

	(bind colorTransform "_colorTransform ? _colorTransform : CT_NONE")

	(controller $Spine)
)

(def element TextButton (_label:str='', _name:str='', _methods:array = [], _dispatchedEv:str='', _dispatchParams:dict = {})
	(scope
		(macro MOUSE_HANDLER_SCOPE)

		(var state:number = "	mouseDown	? SC.Ui_styles.BUTTON_STATE.DOWN :
								rollOver	? SC.Ui_styles.BUTTON_STATE.OVER
											: SC.Ui_styles.BUTTON_STATE.UP")

		(var labelAlpha:number = "TEXT_BUTTON_ALPHA[state]")
	)
	(bind name "_name")
	(style (alpha = "labelAlpha"))

	(tf
		(class $TextDefaultNM)
		(bind text "_label")
	)
	(block
		(style
			(position = "absolute")
			(width = 100%)
			(bottom = "-XS")
			(height = 1px)
			(backgroundColor = 0xE6FFFFFF)
		)
	)
	(macro DEFAULT_CONTROL_STATE_ANIMATION_ALPHA
		_trigger="state"
		_alpha="labelAlpha"
	)
	(macro MOUSE_HANDLER
		_methods = "_methods"
		_dispatchedEv = "_dispatchedEv"
		_dispatchParams = "_dispatchParams"
		_soundSet = "'button_context'"
	)
)
