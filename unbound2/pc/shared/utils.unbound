(def css $Fullsize ()
	(width = 100%)
	(height = 100%))

(def css $FullsizeAbsolute ()
	(width = 100%)
	(height = 100%)
	(position = "absolute"))

(def css $MiddleAligned ()
	(left = 50%)
	(marginLeft = -50%))

(def css $MiddleVAligned ()
	(top = 50%)
	(marginTop = -50%))
	





(def css $EyeLevelAligned ()
	(extends $MiddleAligned)
	(position = "absolute")
	(top = "{720:360,2160:900}")
	(marginTop = -50%)
)

(def css $MiddleVHAbsolutely ()
	(position = "absolute")
	(left = 50%)
	(top = 50%)
	(marginTop = -50%)
	(marginLeft = -50%)
)

(def css $MiddleAlignedAbsolutely ()
    (extends $MiddleAligned)
    (position = "absolute"))

(def css $MiddleVAlignedAbsolutely ()
    (extends $MiddleVAligned)
    (position = "absolute"))

(def css $InfoLineBoundaries ()
	(marginBottom = 6px)
	(marginTop = 6px))

(def css $InfoBlockHorizontalIndent ()
	(width = 100%)
	(paddingLeft = 12px)
	(paddingRight = 12px)
)
(def css $InfoBlockIndent ()
	(extends $InfoBlockHorizontalIndent)
	(paddingTop = 9px)
	(paddingBottom = 9px)
)

(def css $InfoBlockHorizontalIndentNoWidth ()
	(marginLeft = 12px)
	(marginRight = 12px)
)

(def css $InfoBlockIndentNoWidth ()
	(extends $InfoBlockHorizontalIndentNoWidth)
	(marginTop = 9px)
	(marginBottom = 9px)
)

(def css $None ())

(def element HorizontalDividerTwoPx ()
	(style
		(width = 100%) (height = 2) (backgroundSize = "fill")
		(backgroundImage = 'url:../service_kit/dividers/divider_h.png')
	)
)

(def element DottedHorizontalDivider ()
	(style
		(width = 100%)
		(height = 2px)
		(backgroundRepeatX = true)
		(backgroundRepeatY = false)
		(backgroundImage = 'url:../service_kit/dividers/divider_h_secondary.png')
	)
)

(def element VerticalDivider ()
	(style
		(height = "100%") (width = "3px") (backgroundSize = "fill")
		(backgroundImage = 'url:../service_kit/dividers/divider_v.png')
	)
)

(def element DottedLine ()
	(style
		(width = 100%)
		(height = 1px)
		(backgroundRepeatX = true)
		(backgroundRepeatY = false)
		(backgroundImage = 'url:../service_kit/dividers/divider_h_dotted.png')
		(alpha = 0.5)
	)
)





(def constant BLUR_TYPE "{	LOW:			'blurmap_low',
							MEDIUM:			'blurmap_medium',
							MAXIMUM:		'blurmap_maximum',
							HALF_SPHERE:	'blurmap_half_sphere',
							LOW_SPHERE:		'blurmap_low_sphere',
							BOX:			'blurmap_smoothed_box',
							RIGHT_GRADIENT:	'blurmap_right_gradient',
							INFOTIP_ARROW:	'blurmap_infotip_arrow_vert'
}")

(def element DeclareBlurLayer ()
	(scope
		(struct blurOptionEnabledPref = GET_PREF_BOOL(_option = "'graphics.GUI.blur'"))
	)
	(style (position = "absolute"))

	
	(bind visible "blurOptionEnabledPref.value")
	(rendererString = 'blurLayer')

	(controller $Instance layout=true
		(bind enabled "blurOptionEnabledPref.value")
		(exprs
			(style (backgroundColor = 0x000000FF))
		)
	)
)

(def element BlurMap (_blurType:str = "BLUR_TYPE.MEDIUM")
	(class $Fullsize)
	(mouseEnabled = false)
	(mouseChildren = false)

	
	(rendererString = 'blurMeBaby')

	(block
		(class $Fullsize)
		(style
			(bind backgroundImage "'img://gui/blur/' + _blurType + '.png'")
			(backgroundSize = "fill")
		)
	)
)

(def element BlurMapWithLayerPanel (_blurType:str = "BLUR_TYPE.MEDIUM")
	(class $FullsizeAbsolute)

	(element DeclareBlurLayer)

	(element BlurMap
		_blurType = "_blurType"
	)
)

(def element BlurMapWithLayerContrastPanel (_blurType:str = "BLUR_TYPE.MEDIUM", _isContrastBorder:bool = true)
	(scope
		(struct highContrast = HIGH_CONTRAST_INFO())
	)
	(class $Fullsize)

	(block
		(class $FullsizeAbsolute)
		(controller $Instance renderer='BlurMapWithLayerPanel'
			(bind enabled "!highContrast.isEnabled")
			(args
				_blurType = "_blurType"
			)
		)
	)

	(block
		(bind visible "highContrast.isEnabled")
		(class $FullsizeAbsolute)
		(style
			(scale9grid = 3)
			(bind backgroundImage "'url:../service_kit/panel_backgrounds/hint_panel_high_contrast' + (!_isContrastBorder ? '_no_border' : '') + '.png'")
		)
	)
)

(def element InfotipPinBlurmap ()
	(style
		(width = 22px)
		(height = 12px)
	)

	(element BlurMap
		_blurType = "BLUR_TYPE.INFOTIP_ARROW"
	)
)



