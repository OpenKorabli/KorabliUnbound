









(def struct PULL_PRICE (_entityId:str, _actionId:number)
	(var priceComponent:gfx = "$datahub.getPrimaryEntity(CC.priceComponent, _entityId + '_' + toString(_actionId)).priceComponent")
	(var info:dict = "{	currency: 			priceComponent.currency			?: '',
						basePrice: 			priceComponent.basePrice		?: 0,
						finalPrice: 		priceComponent.finalPrice		?: 0,
						discountPercent: 	priceComponent.discountPercent	?: 0,
						type: 				priceComponent.type				?: 0,
						till: 				priceComponent.till				?: 0,
						isPrivate: 			priceComponent.isPrivate }" (event "priceComponent.evChanged"))
)

(def struct PULL_PRICE_WITH_REFUND_OPERATIONS (_entityId:str, _actionId:number)
	(var priceEntity:dhEntity =			"getPrimaryEntity(CC.priceComponent, _entityId + '_' + toString(_actionId))")
	(var priceComponent:dhComponent =	"priceEntity.priceComponent")
	(var refundComponent:dhComponent =	"priceEntity.refundComponent")

	(var info:dict =					"{	currency: 			priceComponent.currency			?: '',
											basePrice: 			priceComponent.basePrice		?: 0,
											finalPrice: 		priceComponent.finalPrice		?: 0,
											discountPercent: 	priceComponent.discountPercent	?: 0,
											type: 				priceComponent.type				?: 0,
											till: 				priceComponent.till				?: 0,
											isPrivate: 			priceComponent.isPrivate }" (event "priceComponent.evChanged"))
)

(def struct PULL_GUIDING_TIP (_type:number)
	(var guidingTipCollection:gfx = "$datahub.getPrimWatcher(CC.newGuidingTip, _type)")
	(var guidingTipEntity:gfx = "guidingTipCollection.entity" (event "guidingTipCollection.event"))
	(var isActive:bool = "guidingTipEntity.newGuidingTip.isActive" (event "guidingTipEntity.newGuidingTip.evChanged"))
	(var targetId:str = "guidingTipEntity.newGuidingTip.targetID ?: ''" (event "guidingTipEntity.newGuidingTip.evChanged") (event "guidingTipEntity.newGuidingTip.evTargetIDChanged"))
)

(def struct PULL_OWN_SHIP (_playerShipId:number)
	(var shipEntity:gfx = "$datahub.getPrimaryEntity(CC.ownShip, _playerShipId)")
	(var shipComponent:gfx = "shipEntity.ship")
	(var ownShipComponent:gfx = "shipEntity.ownShip")
)

(def struct GET_COMMAND (_commandName:str, _binding:number=0)
	(var commandEntity:gfx = "$datahub.getPrimaryEntity(CC.preference, 'commands.' + _commandName + '.value' + toString(_binding + 1))")
	(var keyCode:number = "commandEntity.preference.value[0] ?: 0" (event "commandEntity.preference.evValueChanged "))
	(var mods:number = "commandEntity.preference.value[1] ?: 0" (event "commandEntity.preference.evValueChanged "))
)

(def struct DRAG_INFOTIP_DATA_SCOPE (_type:str)
	(var dragInfotipDataEntity:gfx = "$datahub.getPrimaryEntity(CC.dragInfotipData, _type)")
	(var dragInfotipData:gfx = "dragInfotipDataEntity.dragInfotipData")
	
	(var infotipHeight:number = "dragInfotipData.panelHeight" (event "dragInfotipData.evPanelHeightChanged"))
	(var isInfotipDragging:bool = "dragInfotipData.isDragging" (event "dragInfotipData.evIsDraggingChanged"))
)

(def struct PULL_CLANINFO (_clanId:number)
	(var clanEntity:gfx = "$datahub.getPrimaryEntity(CC.clan, _clanId)")
	(var tag:str = "clanEntity.clan.tag" (event "clanEntity.clan.evTagChanged"))
	(var name:str = "clanEntity.clanExtended.name" (event "clanEntity.clanExtended.evNameChanged"))
)

(def struct USER_PREF_DATA ()
	(var userPrefsEntity:gfx =	"$datahub.getSingleEntity(CC.userPrefs)")
	(var prefs:dict = "userPrefsEntity.userPrefs.userPrefs ?: {}" (event "userPrefsEntity.userPrefs.evUserPrefsChanged"))
)

(def struct PULL_ROUTE (_id:str)
	(var routeEntity:dhEntity = "getPrimaryEntity(CC.route, _id)")
	(var isActive:bool = "routeEntity.route.isActive" (event "routeEntity.route.evIsActiveChanged"))
)

(def struct PULL_FULL_ROUTE (_id:str)
	(var routeEntity:gfx = "$datahub.getPrimaryEntity(CC.route, _id)")
	(var componentRoute:gfx = "routeEntity ? routeEntity.route : null")
	(var isActive:bool =			"componentRoute.isActive"			(event "componentRoute.evIsActiveChanged"))
	(var activeChild:str =		"componentRoute.activeChild"		(event "componentRoute.evActiveChildChanged"))
	(var prevActiveChild:str =	"componentRoute.prevActiveChild"	(event "componentRoute.evActiveChildChanged"))
	(var children:array =		"componentRoute.children"			(event "componentRoute.evChildrenChanged"))
)

(def struct FEATURES (_state:number)
	(var featureComponent:dhComponent = "getPrimaryEntity(CC.accountFeature, pow(2, _state)).accountFeature")
	(var state:str ="featureComponent.state" (event "featureComponent.evStateChanged"))
)

(def struct PULL_PRIME_TIME (_id:expression)
	(var primeTimeEntity:gfx = "$datahub.getEntity(_id)")
	(var startTime:number = "primeTimeEntity.primeTime.primeTimeStartTime" (event "primeTimeEntity.primeTime.evChanged"))
	(var finishTime:number = "primeTimeEntity.primeTime.primeTimeFinishTime" (event "primeTimeEntity.primeTime.evChanged"))
	(var daylightshift:number = "primeTimeEntity.primeTime.daylightshift" (event "primeTimeEntity.primeTime.evChanged"))
	(var serverTime:number = "currentServerSeconds()" (event "evInfrequent"))
	(var isActive:bool = "startTime - daylightshift <= serverTime && serverTime <= finishTime - daylightshift")
)

(def struct PULL_CURRENT_CLAN_BATTLE_PRIME_TIME ()
	(var primeTimesChosenCollection:gfx = "$datahub.getCollection(CC.clanBattlePrimeTime).getChildByPath('chosen')")
	(var chosenPrimeTimeEntity:gfx = "primeTimesChosenCollection.items[0]" (event "primeTimesChosenCollection.evUpdated"))
	(var primeTimesFixedCollection:gfx = "$datahub.getCollection(CC.clanBattlePrimeTime).getChildByPath('fixed')")
	(var fixedPrimeTimeEntity:gfx = "primeTimesFixedCollection.items[0]" (event "primeTimesFixedCollection.evUpdated"))
	(var currentPrimeTimeEntity:gfx = "fixedPrimeTimeEntity ?: chosenPrimeTimeEntity")
)

(def struct GET_PREF_BOOL (_option:expression)
	(var preferenceComponent:dhComponent = "getPrimaryEntity(CC.preference, _option).preference")
	(var value:bool = "toBool(preferenceComponent.value)" (event "preferenceComponent.evValueChanged"))
)

(def struct GET_PREF_NUMBER (_option:expression)
	(var preferenceComponent:dhComponent = "getPrimaryEntity(CC.preference, _option).preference")
	(var value:number = "toNumber(preferenceComponent.value)" (event "preferenceComponent.evValueChanged"))
)

(def struct GET_PREF_STR (_option:expression)
	(var preferenceComponent:dhComponent = "getPrimaryEntity(CC.preference, _option).preference")
	(var value:str = "toString(preferenceComponent.value)" (event "preferenceComponent.evValueChanged"))
)

(def struct HIGH_CONTRAST_INFO ()
	(struct uiContrastOptionEnabledPref =	GET_PREF_BOOL(_option = "'graphics.GUI.contrast'"))
	(struct blurOptionEnabledPref =			GET_PREF_BOOL(_option = "'graphics.GUI.blur'"))
	(var isEnabled:bool = "uiContrastOptionEnabledPref.value || !blurOptionEnabledPref.value")
)

(def struct PULL_NEW_CONTENT (_type:expression)
	(var newContentComponent:gfx = "$datahub.getPrimaryEntity(CC.newContent, _type).newContent")
	(var value:number = "newContentComponent.count ?: 0" (event "newContentComponent.evCountChanged"))
)

(def struct PORT_BANNER_ALPHA (_alphaBannerVariants:dict, _isMouseDown:bool, _isRollOver:bool)
	(var state:number = "_isMouseDown	? SC.Ui_styles.BUTTON_STATE.DOWN :
						_isRollOver		? SC.Ui_styles.BUTTON_STATE.OVER
										: SC.Ui_styles.BUTTON_STATE.UP")

	(var alpha:number = "_alphaBannerVariants[state]")
)

(def struct SSE_TASKS_STATUS_FLAGS (_sseOpenEnded:dhComponent, _sseCorePersistent:dhComponent, _sseCore:dhComponent, _isManualRewardClaim:bool=false, _sseGlobal:dhComponent=null)
	(var isPostBattle:bool =	"toBool(_sseCorePersistent)")
	(var isDone:bool =			"isPostBattle	? _sseCorePersistent.isDone		: _sseCore.isDone"		(event "_sseCore.evChanged"))
	(var isFailed:bool =		"isPostBattle	? false							: _sseCore.isFailed"	(event "_sseCore.evChanged"))
	(var isLocked:bool =		"isPostBattle	? false							: _sseCore.isLocked"	(event "_sseCore.evChanged"))
	(var isClaimed:bool =		"isPostBattle	? _sseCorePersistent.isClaimed	: _sseCore.isClaimed"	(event "_sseCore.evChanged") (event "_sseCorePersistent.evIsClaimedChanged"))
	(var isFeatured:bool =		"isPostBattle	? _sseCorePersistent.isFeatured	: _sseCore.isFeatured"	(event "_sseCore.evChanged"))
	(var isGlobalSse:bool = 	"toBool(_sseGlobal)")

	(var isRewarded:bool =		"_sseOpenEnded.isRewarded" (event "_sseOpenEnded.evChanged"))
	(var isReceived:bool =		"_isManualRewardClaim || isGlobalSse 	? isClaimed :
								 toBool(_sseOpenEnded)					? isRewarded
																		: isDone")

	(var hasGlobalSseProgress:bool = "_sseGlobal.personalProgress > 0" (event "_sseGlobal.evChanged"))
	(var isNotParticipatedInGlobalSse:bool = "isDone && isGlobalSse && (!_isManualRewardClaim && !isClaimed || _isManualRewardClaim && !hasGlobalSseProgress)")
	(var isInactive:bool = "isReceived || isFailed || isLocked || isNotParticipatedInGlobalSse")

)

(def struct PULL_WINDOW_QUEUE ()
	(var entity:dhEntity =			"getSingleEntity(CC.windowManager)")
	(var component:dhComponent =	"entity.windowManager")
	(var queue:array =				"component.windowQueue ?: []" (event "component.evWindowQueueChanged"))
)

(def struct ADAPTIVE_FONT_SIZE(_minStageSize:number, _maxStageSize:number, _curStageSize:number, _fontSizes:array, _isBold:bool=false)
	(var inverseLerp:number = "(_curStageSize - _minStageSize) / (_maxStageSize - _minStageSize)")
	(var index:number = "floor(inverseLerp * (_fontSizes.length - 1))")
	(var value:str = "'$TextDefault' + (_isBold ? 'Bold' : '') +toString(_fontSizes[index]) + 'NM'")
)

(def struct GET_TEAM_NAME (_isChallenge:bool=false)
	(var battleResultsStructuredEntity:dhEntity = "getSingleEntity(CC.battleResultsStructured)")
	(var battleResultsStructuredComponent:dhComponent = "battleResultsStructuredEntity.battleResultsStructured")
	(var gameData:dict = "battleResultsStructuredEntity.dataComponent.data.game_data")

	(var battleInfoComponent:dhComponent = "getSingleEntity(CC.battleData).battleInfo")

	
	(var actualBattleInfoComponent:dhComponent = "battleInfoComponent != null ? battleInfoComponent : battleResultsStructuredComponent")
	(var alphaTeamNameFromDH:str = 	"actualBattleInfoComponent.alphaTeamName")
	(var bravoTeamNameFromDH:str = 	"actualBattleInfoComponent.bravoTeamName")

	(var battleType:str = " battleInfoComponent.battleType ?: gameData.battleType")
	(var isCustomTeamName:bool = "battleType == SC.Common.BATTLE_TYPES.CLAN_BATTLE || battleType == SC.Common.BATTLE_TYPES.TRAINING_BATTLE || battleType == SC.Common.BATTLE_TYPES.TOURNAMENT_BATTLE")
	(var isFogOfWar:bool = "battleInfoComponent.isFogOfWar")

	(var alphaTeamName:str = "	_isChallenge 		? 'IDS_PARTICIPANTS' :
								isCustomTeamName	? alphaTeamNameFromDH
													: 'IDS_ALLY_TEAM'")
	(var bravoTeamName:str = "isCustomTeamName ? bravoTeamNameFromDH : 'IDS_ENEMY_TEAM'")
)

(def struct GET_AVATAR_HEALTH_PROGRESS (_healthComponent:expression)
	(var isAlive:bool = "_healthComponent.isAlive" (event "_healthComponent.evIsAliveChanged"))
	(var healthValue:number = "_healthComponent.value" (event "_healthComponent.evValueChanged"))
	(var healthMaxValue:number = "_healthComponent.max" (event "_healthComponent.evMaxChanged"))
	(var healthProgress:number = "	healthMaxValue 	? healthValue * 100 / healthMaxValue :
									isAlive 		? 100
													: 0")
)

(def struct SHIP_DATA_SCOPE (_shipId:number)
	(var shipEntity:dhEntity = "getPrimaryEntity(CC.ship, _shipId)")
	(var shipComponent:dhComponent = "shipEntity.ship")
	(var subType:str = 			"shipComponent.subtype")
	(var shipIDS:str = 			"shipComponent.nameIDS")
	(var shipLevelRome:str =	"shipComponent.levelRome")
	(var shipLevelIcon:str =	"shipComponent.levelIcon")
	(var flagName:str =			"shipComponent.flagName")
)

(def struct VISIBLE_DRUM_FIRE_MODE_SLOT (_equipmentSlotComponentId:number)
	(var selectedShipInfoEntity:dhEntity = "getSingleEntity(CC.selectedShipInfo)")
	(var shipTTX:dict = "selectedShipInfoEntity.selectedShipInfo.shipTTX" (event "selectedShipInfoEntity.selectedShipInfo.evChanged"))
	(var isSwitchableDrum:bool = "shipTTX.artillery.drumFireMode.isSwitchable.value")
	(var showSlot:bool = "_equipmentSlotComponentId != SC.Ships.SHIP_INFO_WEAPON_TYPE.VALUE_TO_NAME[SC.Ships.SHIP_INFO_WEAPON_TYPE.FIRE_MODE] || isSwitchableDrum")
)

(def struct SERVER_TIME ()
	(var value:number = "currentServerSeconds()" (event "evInfrequent"))
)

(def struct COUNTDOWN (_time:number, _serverTime:number, _format:str, _declination:str='', _isLocalTime:bool=false)
	(var value:str = "formatTime(_time - _serverTime, _format, _declination, _isLocalTime)")
)

(def struct STAGE_SIZE ()
	(var stageComponent:dhComponent = "getSingleComponent(CC.stage)")
	(var width:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
	(var height:number = "stageComponent.height" (event "stageComponent.evStageSizeChanged"))
)

(def struct ADAPTIVE_HORIZONTAL_SIZE (_minStageWidth:number, _maxStageWidth:number, _minValue:number, _maxValue:number, _stageWidth:number)
	(var value:number = "_minValue + (_maxValue - _minValue) * (min(_stageWidth, _maxStageWidth) - _minStageWidth) / (_maxStageWidth - _minStageWidth)") 
)

(def struct CURRENT_TOP_WINDOW ()
	(var windowManagerComponent:dhComponent = "getSingleComponent(CC.windowManager)")
	(var name:str = "windowManagerComponent.topWindowNodeName" (event "windowManagerComponent.evTopWindowNodeNameChanged"))
)