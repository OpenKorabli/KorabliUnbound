(def constant NATION_BUTTON_PANEL_WIDTH 188)
(def constant SHIP_CARD_WIDTH 180)
(def constant SHIP_CARD_HEIGHT 84)
(def constant SHIP_TREE_TTX_RIGHT_PADDING 336)

(def constant SHIP_TREE_BLOCK_WIDTH 106)
(def constant SHIP_TREE_BLOCK_HEIGHT 116)
(def constant SHIP_TREE_BLOCK_MARGIN 16)
(def constant SHIP_CARD_HALF_HEIGHT 58)

(def constant MIN_NODES_FOR_PARAGON_DROPS 10)
(def constant INFO_ICON_SIZE 24)

(def constant RESEARCH_TREE_SLOT_THUMB_STATE_ALPHA {	SC.Ui_styles.BUTTON_STATE.SELECTED:	0.15,
														SC.Ui_styles.BUTTON_STATE.OVER: 	0.1,
														SC.Ui_styles.BUTTON_STATE.DOWN: 	0.05,
														SC.Ui_styles.BUTTON_STATE.UP: 		0 })

(def constant RESEARCH_TREE_SLOT_STATE_ALPHA {	DEFAULT:	1,
												DISABLED:	0.3
})

(def constant RESEARCH_TREE_CONTENT_STATE_ALPHA {	DEFAULT:	1,
													DISABLED:	0.3
})

(def constant RESEARCH_TREE_ARROW_STATE_ALPHA {		DISABLED:		0,
													HIDDEN:			0.04,
													ACTIVE:			"TA",
													NOT_RESEARCHED:	0.1
})

(def macro CONTRAST_PANEL_NO_BORDER (_isHighContrast:expression)
	(block
		(bind visible "_isHighContrast")
		(class $FullsizeAbsolute)
		(style (backgroundImage = 'url:../service_kit/panel_backgrounds/hint_panel_high_contrast_no_border.png') (scale9grid = 3) (margin = -1px))
	)
)

(def macro SHIP_CARD_STATE_ALPHA (_alpha:expression)
	(alpha = "_alpha")

	(controller $Animation
		(bindcall play
			id = 'ship_card_state_anim'
			duration = 0.2
			to = "{alpha: _alpha}"
			easing = "Easing.quad_in"
			action = "kill"
			
			(bind trigger "_alpha")
		)
	)
)

(def element ShipResearchMainInset ()
	(scope
		(event evScrollToBottom)
		(event evNeedScrollToBottom)

		(event evNationTabButtonClicked)
		(event evFirstNationChanged)
		(event evNationChanged)
		(macro STAGE_SIZE)

		(macro GET_PREF 'isBlurOptionEnabled'		"'graphics.GUI.blur'")
		(macro GET_PREF 'isUIContrastOptionEnabled'	"'graphics.GUI.contrast'")
		(var isHighContrast:bool = "isUIContrastOptionEnabled || !isBlurOptionEnabled")

		(var researchRouteEntity:dhEntity = "getPrimaryEntity(CC.route, SC.Ui_windows.ROUTE.RESEARCH)")
		(var researchRoute:dhComponent = "researchRouteEntity.route")
		(var isInResearch:bool = "researchRoute.isActive" (event "researchRoute.evIsActiveChanged"))
		(var currentActiveChild:str = "researchRoute.activeChild" (event "researchRoute.evActiveChildChanged"))

		(var nationsCollection:dhCollection = "getCollection(CC.researchTreeElements).child('sorted')")

		(var currentNationName:str = "null" watch=false)
		(bind currentNationName "currentActiveChild" init=false watch=false (event "evNationChanged"))

		(struct qualityGraphicsPref = GET_PREF_STR(_option="'graphics.preset'"))
		(var qualityGraphics:str = "qualityGraphicsPref.value")
		(var isStatic:bool = "qualityGraphics == SC.Ui_prefs.GRAPHICS_PRESET.LOW || qualityGraphics == SC.Ui_prefs.GRAPHICS_PRESET.MINIMUM")
	)
	(name = 'scrollerContainer')
	(bindcall externalCall 'sound.playSetSoundDirect' "['dock_inset', 'research']" init=false on='addedToStage')

	(dispatch evScrollToBottom	delay=0.15 dir="EventDirection.DOWN" (event "evNeedScrollToBottom"))

	(dispatch evNationChanged on='addedToStage' (bind enabled "currentActiveChild != null && currentNationName != null") (event "researchRoute.evActiveChildChanged"))

	(class $Fullsize)
	(style
		
		(bind alpha "0" init=true watch=false on='removedFromStage')
	)

	(controller $Animation
		(bindcall play
			keyframes = "[
				{ time:0,		to:{ alpha:0 }},
				{ time:0.05,	to:{ alpha:0 }},
				{ time:0.25,	to:{ alpha:1 }, easing:Easing.sine_in_out }
			]"
			action = "kill"
			on='addedToStage'
		)
		(dispatch evFirstNationChanged on='evAnimEnded' (bind enabled "currentActiveChild != null && currentNationName == null"))
		(dispatch evNationChanged delay=0.2 on='evAnimEnded' (bind enabled "currentActiveChild != null && currentNationName == null"))
	)

	(block
		(class $FullsizeAbsolute)
		(style (paddingTop = -60px))

		(block
			(class $Fullsize)
			(style
				(backgroundImage = 'url:../bg/animated/research/ship_tree_research.skel')
				(backgroundSize = "cover")
			)
			(colorTransform = "{
									redMultiplier:		0.8,
									greenMultiplier:	0.8,
									blueMultiplier:		0.85,
									alphaMultiplier:	1,
									redOffset:			0,
									greenOffset:		0,
									blueOffset:			8,
									alphaOffset:		0
								}")

			(controller $Spine
				(bind enabled "currentActiveChild")
				(bind skin "currentActiveChild" init=true watch=false (bind trigger "currentActiveChild"))
				(bindcall pause init=true	(bind enabled "isStatic"))
				(bindcall resume			(bind enabled "!isStatic"))
			)
		)
	)

	(element DeclareBlurLayer)

	
	(block
		(style (position = "absolute") (width = 100%) (height = 72px) (hitTest = false))
		
		(block
			(class $Fullsize)
			(controller $Instance renderer='BlurMap'
				(bind enabled "!isHighContrast")
				(args
					_blurType = "BLUR_TYPE.MAXIMUM"
				)
			)
		)

		(macro CONTRAST_PANEL_NO_BORDER _isHighContrast = "isHighContrast")
	)

	
	(block
		(style (position = "absolute") (width = 100%) (height = 37px) (bottom = 0px) (hitTest = false))
		(block
			(class $Fullsize)
			(controller $Instance renderer='BlurMap'
				(bind enabled "!isHighContrast")
				(args
					_blurType = "BLUR_TYPE.MAXIMUM"
				)
			)
		)

		(macro CONTRAST_PANEL_NO_BORDER _isHighContrast = "isHighContrast")
	)

	
	(block
		(bind name "'tree_content_' + currentActiveChild")
		(class $Fullsize)

		(block
			(class $Fullsize)

			(controller $Animation
				(bindcall play
					keyframes = "[
						{ time:0,		to:{ alpha:0 }},
						{ time:0.15,	to:{ alpha:0 }},
						{ time:0.45,	to:{ alpha:1 }, easing:Easing.sine_in_out}
					]"
					action = "kill"
					(event "evNationTabButtonClicked")
					(event "evFirstNationChanged")
				)
			)

			(controller $Instance renderer='ShipResearchTree'
				(bind enabled "toBool(currentNationName)")
				(args
					_currentNationName = "currentNationName"
					_isHighContrast = "isHighContrast"
				)
			)
		)
	)

	(element DeclareBlurLayer)

	
	(hblock
		(style (position = "absolute") (height = 100%) (paddingTop = 71px) (paddingBottom = 36px) (bind width "NATION_BUTTON_PANEL_WIDTH"))

		(block
			(class $Fullsize)
			(controller $Instance renderer='BlurMap'
				(bind enabled "!isHighContrast")
				(args
					_blurType = "BLUR_TYPE.RIGHT_GRADIENT"
				)
			)
		)
		
		(hblock
			(class $FullsizeAbsolute)
			(style (paddingRight = -35px))
			(macro CONTRAST_PANEL_NO_BORDER _isHighContrast = "isHighContrast")

			(block
				(bind visible "isHighContrast")
				(style (height = 100%) (position = "absolute") (right = "-XXS") (paddingBottom = "XXS"))
				(element VerticalDivider)
			)
		)
	)

	(element DeclareBlurLayer) 

	
	(block
		(class $FullsizeAbsolute)
		(style (top = 70px) (marginTop = "-XXS") (hitTest = false))

		(block
			(style
				(width = 100%)
				(height = 24px)
				(alpha = 0.4)
				(marginTop = 3px)
				(backgroundImage = 'url:../service_kit/panel_backgrounds/drag_shadow.png')
				(scale9grid = 3)
			)
		)

		(block
			(style (position = "absolute") (width = 100%))
			(element HorizontalDividerTwoPx)
		)
  	)

	
	(block
		(style (width = 100%) (height = 37px) (hitTest = false))

		(block
			(style
				(width = 100%)
				(height = 24px)
				(alpha = 0.2)
				(backgroundImage = 'url:../service_kit/panel_backgrounds/drag_shadow.png')
				(scale9grid = 3)
				(scaleY = -1)
			)
		)
		(block
			(style (position = "absolute") (width = 100%))
			(element HorizontalDividerTwoPx)
		)
	)

	
	(block
		(style (position = "absolute") (left = 0px) (bind top "stageHeight * 0.11") (marginTop = "{ 720:LS, 1080:XXS }"))
		
		(controller $Repeat renderer='NationTabButton'
			(bind count "nationsCollection.items.length")
			(args
				_labelTF = "nationsCollection.items[$index].researchTreeElements.nation"
				_currentNationName = "currentActiveChild"
			)
		)
	)

	(block
		(style
			(position = "absolute")
			(top = "S")
			(left = "S")
			(backgroundImage = 'url:../service_kit/icons/icon_question_mark_grey.png')
		)
		(controller $Tooltip
			(renderer = 'ModuleTreeHelpTooltip')
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)
)

(def element ShipResearchTree (_currentNationName:str, _isHighContrast:bool)
	(scope
		(event evScrollToBottom)
		(event evHorScrollValueChanged)

		(macro STAGE_SIZE)
		(macro PULL_SHIP_ID)

		(var nationResearchArrows:dhComponent = "getPrimaryEntity(CC.nationResearchArrows, _currentNationName).nationResearchArrows")

		(var researchTreeEntity:dhEntity = "getPrimaryEntity(CC.researchTreeElements, _currentNationName)")
		(var researchTreeElements:dhComponent = "researchTreeEntity.researchTreeElements")
		(var maxNodesVertical:number = "researchTreeElements.maxNodesVertical ?: 0")
		(var maxNodesHorizontal:number = "researchTreeElements.maxNodesHorizontal ?: 0")
		(var shipXIds:array = "researchTreeElements.topShipIds ?: []")

		(var paragonSeasonEntity:dhEntity = "getSingleEntity(CC.paragonSeason)")
		(var isParagonEnabled:bool = "paragonSeasonEntity.paragonSeason.enabled" (event "paragonSeasonEntity.paragonSeason.evUpdate"))
		(var isParagonDropsEnabled:bool = "isParagonEnabled && maxNodesVertical >= MIN_NODES_FOR_PARAGON_DROPS")

		(var paragonInfoEntity:dhEntity = "getSingleEntity(CC.paragonInfo)")
		(var isDropNationAvailable:bool = "paragonInfoEntity.paragonInfo.dropNationAvailable" (event "paragonInfoEntity.paragonInfo.evUpdate"))

		(var useClassGap:bool = "stageWidth > 1900")
		(var maxNodesHorizonalWithGaps:number = "useClassGap	? maxNodesHorizontal + researchTreeElements.types.length
																: maxNodesHorizontal + 1")
		(var contentWidth:number = "maxNodesHorizonalWithGaps * SHIP_TREE_BLOCK_WIDTH + SHIP_TREE_TTX_RIGHT_PADDING + LM")

		(var nodesHeight:number = "maxNodesVertical * SHIP_TREE_BLOCK_HEIGHT + L + XS")
		(var contentHeight:number = "isParagonEnabled && isDropNationAvailable ? nodesHeight + LS : nodesHeight")

		(var leftOffset:number = "NATION_BUTTON_PANEL_WIDTH + LM + (contentWidth < stageWidth ? (stageWidth - contentWidth) / 2 : 0)")

		(var branchTypeContainerOffset:number = "0")
		(bind branchTypeContainerOffset "-$event.newValue" init=false watch=false (event "evHorScrollValueChanged"))

		(var maxSessionShipLen:number = "researchTreeElements.shipIds.length" watch=false)
		(bind maxSessionShipLen "max(researchTreeElements.shipIds.length, maxSessionShipLen)" init=false watch=false (bind trigger "researchTreeElements.shipIds.length"))
	)
	(class $Fullsize)

	(hblock
		(style
			(height = 28px)
			(marginTop = 44px)

			(bind width "contentWidth")
			(bind marginLeft "leftOffset")
			(bind visualOffsetX "branchTypeContainerOffset")
		)

		(controller $Repeat renderer='BranchTypeLabel'
			(bind count "researchTreeElements.types.length")
			(args
				_researchTreeData = "researchTreeElements.types[$index]"
				_gapCoords = "researchTreeElements.gapCoords"
				_useClassGap = "useClassGap"
				_nation = "_currentNationName"
			)
		)
	)

	(scrollArea
		(class $Fullsize)
		(style (backgroundColor = "NO_COLOR"))

		(verticalSlider DefaultVerticalSlider
			_isContrastScrollBar = true
		)

		(horizontalSlider DefaultHorizontalSlider
			_valueChangedEvent = 'evHorScrollValueChanged'
			_isContrastScrollBar = true
		)

		(vscrollPolicy = 'auto')
		(hscrollPolicy = 'auto')

		(content
			(block
				(style
					(marginTop = "L")
					(bind width "contentWidth")
					(bind height "contentHeight")
					(bind marginLeft "leftOffset")
				)

				(block
					(class $FullsizeAbsolute)
					(controller $Repeat renderer='TreeArrow'
						(bind count "nationResearchArrows.researchArrows.length")
						(args
							_useClassGap = "useClassGap"
							_arrowId = "nationResearchArrows.researchArrows[$index]"
							_gapCoords = "researchTreeElements.gapCoords"
						)
					)

					(controller $Repeat renderer='TreeArrowInfo'
						(bind count "nationResearchArrows.infoResearchArrows.length")
						(args
							_useClassGap = "useClassGap"
							_arrowId = "nationResearchArrows.infoResearchArrows[$index]"
							_gapCoords = "researchTreeElements.gapCoords"
						)
					)
				)

				(block
					(class $FullsizeAbsolute)
					(controller $Repeat renderer='ShipTreeCard'
						(bind count "maxSessionShipLen")
						(args
							_shipId = "$index <= maxSessionShipLen - 1 ? toNumber(researchTreeElements.shipIds[$index]) : null"
							_useClassGap = "useClassGap"
							_gapCoords = "researchTreeElements.gapCoords"
						)
					)
				)

				(block
					(class $FullsizeAbsolute)
					(controller $Repeat renderer='ParagonsResearchTreeButton'
						(bind enabled "isParagonEnabled")
						(bind count "shipXIds.length")
						(args
							_shipId = "toNumber(shipXIds[$index])"
							_useClassGap = "useClassGap"
							_gapCoords = "researchTreeElements.gapCoords"
						)
					)
				)
			)

			(block
				(style (bind width "max(stageWidth, contentWidth + leftOffset)") (hitTest = false) (marginTop = "MS") (marginBottom = "LS"))
				(controller $Instance renderer='HorizontalDividerTwoPx' (bind enabled "isParagonDropsEnabled"))
			)

			(block
				(style (width = 100%) (paddingLeft = "NATION_BUTTON_PANEL_WIDTH + LM"))

				(controller $Instance renderer='ParagonsResearchTreeFooter'
					(bind enabled "isParagonDropsEnabled")
				)
			)
		)

		(bindcall scrollToDirection horDir="ScrollDirection.LEFT" vertDir="ScrollDirection.TOP"		animated=false	on='addedToStage'		(bind enabled "_currentNationName != SC.Common.NATION.COMMONWEALTH") (bind trigger "_currentNationName"))
		(bindcall scrollToDirection horDir="ScrollDirection.LEFT" vertDir="ScrollDirection.BOTTOM"	animated=false	on='addedToStage'		(bind enabled "_currentNationName == SC.Common.NATION.COMMONWEALTH") (bind trigger "_currentNationName"))
		(bindcall scrollToDirection horDir="ScrollDirection.LEFT" vertDir="ScrollDirection.BOTTOM"	animated=true	maxAnimatedDistance=100	(event "evScrollToBottom"))
	)
)

(def element ParagonsResearchTreeButton (_shipId:number, _gapCoords:array, _useClassGap:bool)
	(scope
		(var shipEntity:dhEntity = "getPrimaryEntity(CC.ship, _shipId)")
		(var isExplored:bool = "shipEntity.upgradableShipInfo.isExplored" (event "shipEntity.upgradableShipInfo.evUpdate") (event "shipEntity.evAdded") (event "shipEntity.evRemoved"))
		(var isParagonsDropBranchButtonVisible:bool = "isExplored && shipEntity.ship.group == SC.Ships.SHIP_GROUPS.UPGRADEABLE")

		(var paragonButtonOffset:number = "shipEntity.ship.hasShipsToExplore ? SHIP_CARD_HEIGHT + (SHIP_TREE_BLOCK_MARGIN * 2) : 0px")
		(var prevShipEntity:dhEntity = "getPrimaryEntity(CC.ship, shipEntity.ship.previousShipId)")
		(var useClassGap:bool = "_useClassGap && !(shipEntity.ship.subtype == prevShipEntity.ship.subtype && shipEntity.ship.level == prevShipEntity.ship.level)")
	)
	(style
		(position = "absolute")
		(width = "SHIP_TREE_BLOCK_WIDTH * 2")
		(height = "SHIP_TREE_BLOCK_HEIGHT")

		(bind left "((useClassGap ? _gapCoords[shipEntity.shipResearchTreeParams.treeX] : shipEntity.shipResearchTreeParams.treeX) * SHIP_TREE_BLOCK_WIDTH) ?: 0")
		(bind top "(shipEntity.shipResearchTreeParams.treeY + 1) * SHIP_TREE_BLOCK_HEIGHT + paragonButtonOffset ?: 0")
	)

	(controller $Instance renderer='ParagonsDropBranchButton'
		(bind enabled "isParagonsDropBranchButtonVisible")
		(args
			_shipId = "_shipId"
			_country = "shipEntity.ship.country"
		)
	)
)

(def element ShipTreeCard (_shipId:number, _useClassGap:bool=false, _gapCoords:array=[], _isNotShipTree:bool=false, _isNewMarker:bool=false, _isRelative:bool=false)
	(scope
		(macro MOUSE_HANDLER_SCOPE)

		(var shipId:number = "_shipId" watch=false)
		(bind shipId "_shipId != null ? _shipId : shipId" init=false watch=false (bind trigger "_shipId"))

		(struct shipExplorePrice = PULL_PRICE(_entityId = "toString(shipId)" _actionId = "SC.Common.PRICE_ACTION.RESEARCH"))
		(struct shipBuyPrice = PULL_PRICE(_entityId = "toString(shipId)" _actionId = "SC.Common.PRICE_ACTION.BUY"))

		(var ownShipEntity:dhEntity = "getPrimaryEntity(CC.ownShip, shipId)")
		(var ownShipInfo:dhComponent = "ownShipEntity.ownShip")
		(var rentUntil:number = "ownShipInfo.timeRent ?: 0" (event "ownShipInfo.evUpdateDockState"))
		(var isOwned:bool = "ownShipInfo != null")

		(var shipEntity:dhEntity = "getPrimaryEntity(CC.ship, shipId)")
		(var shipInfo:dhComponent = "shipEntity.ship")
		(var giftCounterComponent:dhComponent = "shipEntity.giftCounterComponent")
		(var upgradableShipInfo:dhComponent = "shipEntity.upgradableShipInfo")
		(var shipResearchTreeParams:dhComponent = "shipEntity.shipResearchTreeParams")
		(var highlightState:number = "shipEntity.highlight.state" (event "shipEntity.highlight.evStateUpdated"))

		(var pathPreview:str = "shipInfo.pathPreview" (event "shipInfo.evCurrentSkinChanged") (event "shipInfo.evUpdate"))
		(macro PULL_SHIP_ID)
		(var isSelected:bool = "viewedShipId == shipId && !_isNotShipTree")

		(var isUpgradeableExclOrUlt:bool = "shipInfo.group == SC.Ships.SHIP_GROUPS.UPGRADEABLE_EXCL ||
											shipInfo.group == SC.Ships.SHIP_GROUPS.UPGRADEABLE_ULT")
		
		(var isExplored:bool = "upgradableShipInfo.isExplored" (event "upgradableShipInfo.evUpdate"))
		(var isDependencyResearched:bool = "upgradableShipInfo.dependencyResearched" (event "upgradableShipInfo.evUpdate"))
		
		(var isResearchAvailable:bool = "!isExplored && isDependencyResearched && shipInfo.group != SC.Ships.SHIP_GROUPS.SUPER_SHIP")
		(var isBuyAvailable:bool = "isExplored && !isOwned")

		(var prevShipEntity:dhEntity = "getPrimaryEntity(CC.ship, shipInfo.previousShipId)")
		(var prevShipInfo:dhComponent = "prevShipEntity.ship")
	
		(var isGiftShip:bool = "giftCounterComponent != null")
		(var isGiftShipAvailable:bool = "giftCounterComponent.canClaim" (event "giftCounterComponent.evChanged"))
		
		(var isFarming:bool = "shipInfo.isFarming" (event "shipInfo.evUpdate"))
		(var isSpecial:bool = "shipInfo.uiSpecial" (event "shipInfo.evUpdate"))
		(var levelIcon:str = "shipInfo.levelIcon" (event "shipInfo.evCurrentSkinChanged"))
		(var levelRome:str = "shipInfo.levelRome")
		(var shipType:str = "shipInfo.subtype")
		(var isElite:bool = "upgradableShipInfo.isElite" (event "upgradableShipInfo.evUpdate"))

		(var useClassGap:bool = "_useClassGap && !(shipType == prevShipInfo.subtype && shipInfo.level == prevShipInfo.level)")

		(var expMultiply:number = "ownShipInfo.expMultiply ?: 0" (event "ownShipInfo.evExpMultiplyChanged"))
		(var isBonusTagsVisible:bool = "!_isNotShipTree && (shipInfo.bonusTags.length > 0 || expMultiply > 1)" (event "shipInfo.evBonusTagsChanged"))

		
		(struct prevShipGuidingTip =			PULL_GUIDING_TIP(_type="SC.Context_guiding_tip.TIP_TYPE.RESEARCH_SHIP"))
		(struct targetShipGuidingTip =			PULL_GUIDING_TIP(_type="SC.Context_guiding_tip.TIP_TYPE.RESEARCH_FINAL"))
		(struct repeatTargetShipGuidingTip =	PULL_GUIDING_TIP(_type="SC.Context_guiding_tip.TIP_TYPE.RESEARCH_SHIP_REPEAT"))

		(var currentTipId:number = "prevShipGuidingTip.isActive			? SC.Context_guiding_tip.TIP_TYPE.RESEARCH_SHIP :
									targetShipGuidingTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.RESEARCH_FINAL :
									repeatTargetShipGuidingTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.RESEARCH_SHIP_REPEAT
																		: SC.Context_guiding_tip.TIP_TYPE.NONE")

		(var hasNextButton:bool = "	currentTipId == SC.Context_guiding_tip.TIP_TYPE.RESEARCH_SHIP ||
									currentTipId == SC.Context_guiding_tip.TIP_TYPE.RESEARCH_SHIP_REPEAT")
		(var currentTargetId:str = "prevShipGuidingTip.isActive		? prevShipGuidingTip.targetId :
									targetShipGuidingTip.isActive	? targetShipGuidingTip.targetId 
																	: repeatTargetShipGuidingTip.targetId")

		(var isNewGuidingTipVisible:bool = "currentTipId != SC.Context_guiding_tip.TIP_TYPE.NONE && currentTargetId == shipId")
		

		(var isManagementAvailable:bool = "shipInfo.isManagementAvailable" (event "shipInfo.evGroupChanged"))
		(var isEnableForWatchModules:bool = "!_isNotShipTree && isManagementAvailable" (event "shipInfo.evGroupChanged"))

		(struct nationTreeFeature = FEATURES(_state = "SC.Common.ACCOUNT_FEATURE.NATIONS_TREE"))
		(var isShipTreeMenuEnabled:bool = "!_isNotShipTree && isManagementAvailable && nationTreeFeature.state != 'locked'")
		(var isContextMenuVisible:bool = "false")

		(var priceInfo:dict = "	!isOwned && isResearchAvailable	?	isUpgradeableExclOrUlt	?	{	finalPrice: upgradableShipInfo.costFreeXP,
																									currency: SC.Common.CURRENCIES.FREE_XP }
																							:	shipExplorePrice.info :
								isBuyAvailable					?	shipBuyPrice.info
																:	null")
		
		(var isEventLike:bool = "shipInfo.isEventLike" (event "shipInfo.evUpdate"))
		(var isEarlyAccess:bool = "shipInfo.group == SC.Ships.SHIP_GROUPS.EARLY_ACCESS")

		(var isPriceVisible:bool = "!isEventLike && !isEarlyAccess && (!isOwned && isResearchAvailable || isBuyAvailable) && priceInfo != null")

		(var isActiveSale:bool = "	shipBuyPrice.info.finalPrice != shipBuyPrice.info.basePrice && !isOwned ||
									shipExplorePrice.info.finalPrice != shipExplorePrice.info.basePrice && !isExplored")

		(var expDeficit:number = "upgradableShipInfo.expDeficit" (event "upgradableShipInfo.evUpdate"))
		(var creditsDeficit:number = "upgradableShipInfo.creditsDeficit ?: 0" (event "upgradableShipInfo.evUpdate"))

		(var isHighlighted:bool = "highlightState == SC.Common.HIGHLIGHT.HIGHLIGHTED")
		(var isHidden:bool = "highlightState == SC.Common.HIGHLIGHT.HIDDEN")

		(var isActiveState:bool = "isResearchAvailable || isExplored || isEventLike || isEarlyAccess")

		(var isHighFrameAlphaShipGroup:bool = "	shipInfo.group != SC.Ships.SHIP_GROUPS.START &&
												shipInfo.group != SC.Ships.SHIP_GROUPS.UPGRADEABLE &&
												shipInfo.group != SC.Ships.SHIP_GROUPS.SUPER_SHIP")
		
		
		(var slotAlpha:number = "isHidden 	?	RESEARCH_TREE_SLOT_STATE_ALPHA.DISABLED
											:	RESEARCH_TREE_SLOT_STATE_ALPHA.DEFAULT")

		(var contentAlpha:number = "isHighlighted || rollOver || isActiveState || isSelected || isGiftShip || isContextMenuVisible	? RESEARCH_TREE_CONTENT_STATE_ALPHA.DEFAULT
																																	: RESEARCH_TREE_CONTENT_STATE_ALPHA.DISABLED")

		(var borderAlpha:number = "	isHighlighted								? TA :
									isContextMenuVisible						? 0.7 :
									isSelected									? 1 :
									isOwned										? TA :
									isHighFrameAlphaShipGroup					? 0.3 :
									isEventLike || isEarlyAccess				? 0.3 :
									isResearchAvailable && expDeficit <= 0		? 0.3 :
									isBuyAvailable && creditsDeficit <= 0		? 0.3
																				: 0.1")

		(var thumbAlphaState:number = "	_isNotShipTree						? SC.Ui_styles.BUTTON_STATE.UP :
										isContextMenuVisible || mouseDown	? SC.Ui_styles.BUTTON_STATE.DOWN :
										isSelected							? SC.Ui_styles.BUTTON_STATE.SELECTED :
										rollOver							? SC.Ui_styles.BUTTON_STATE.OVER
																			: SC.Ui_styles.BUTTON_STATE.UP")

		(var thumbAlpha:number = "RESEARCH_TREE_SLOT_THUMB_STATE_ALPHA[thumbAlphaState]")
		
	)
	(bind name "'upgradeTree_' + shipInfo.fullName")
	(style
		(bind position "_isRelative ? relative : absolute")
		(width = "SHIP_TREE_BLOCK_WIDTH * 2")
		(height = "SHIP_TREE_BLOCK_HEIGHT")
		(padding = "SHIP_TREE_BLOCK_MARGIN")

		(bind left "((useClassGap ? _gapCoords[shipResearchTreeParams.treeX] : shipResearchTreeParams.treeX) * SHIP_TREE_BLOCK_WIDTH) ?: 0")
		(bind top "shipResearchTreeParams.treeY * SHIP_TREE_BLOCK_HEIGHT ?: 0")
	)
	(bind visible "_shipId != null")
	(macro MOUSE_EVENTS_DISPATCHER)
	(macro SOUND_HANDLER _soundSet = "!_isNotShipTree ? 'button_ship' : ''")
	(bindcall externalCall "!isSelected ? 'inputMapping.onAction' : ''" "[ 'viewShip', { shipId: shipId }]" watch=false on='click')
	(bindcall externalCall "isEnableForWatchModules && isSelected && !isContextMenuVisible ? 'inputMapping.onAction' : ''" "['navigateTo', { route: SC.Ui_windows.ROUTE.MANAGEMENT, data: { shipId: shipId }}]" watch=false on='leftClick')

	(macro SHIP_CARD_STATE_ALPHA _alpha="slotAlpha")

	
	(block
		(class $FullsizeAbsolute)
		(style (hitTest = false))

		(block
			(class $FullsizeAbsolute)
			(style (backgroundImage = 'url:../service_kit/frames/one_pixel_frame.png') (scale9grid = 2))
			(macro SHIP_CARD_STATE_ALPHA _alpha="borderAlpha")
		)

		(block
			(class $FullsizeAbsolute)
			(style (backgroundColor = 0xFFFFFFFF))
			(macro SHIP_CARD_STATE_ALPHA _alpha="thumbAlpha")
		)
	)

	
	(block
		(class $FullsizeAbsolute)
		(style (backgroundColor = "NO_COLOR"))

		(controller $Instance renderer='GuidingTipHub'
			(bind enabled "isNewGuidingTipVisible")
			(args
				_tipId = "currentTipId"
				_tipPositioning = "TIP_POSITION_BOTTOM"
				_noPointer = "hasNextButton"
				_hasNextButton = "hasNextButton"
				_modalWindowName =	'Dock'
				_onShowDelay = 0.6
				_screenOffsetLeft = 94px
				_screenOffsetTop = 150px
				_isHideOnBounds = true
			)
		)

		(controller $Tooltip
			(renderer = 'ShipExtendedTooltip')
			(args
				_shipId = "shipId"
				_isFromTree = "!_isNotShipTree"
			)
			(macro DEFAULT_TOOLTIP_HORIZONTAL_BEHAVIOUR "0")
		)

		(controller $Tooltip
			(bind enabled "isShipTreeMenuEnabled")
			(renderer = 'ShipTreeMenu')
			(args _shipId = "shipId")
			(macro DEFAULT_MENU_BEHAVIOUR "1")

			(bind isContextMenuVisible "true" init=false on='evStartShow')
			(bind isContextMenuVisible "false" init=false on='evHide')
		)
	)

	
	(block
		(class $FullsizeAbsolute)
		(style (padding = "XS"))
		(macro SHIP_CARD_STATE_ALPHA _alpha="contentAlpha")
		
		(block
			(style
				(position = "absolute")
				(left = "XXS")
				(top = 5px)
				(hitTest = false)
			)

			(block
				(style
					(bind scaleX "SHIP_SCALE_MAP[SIZE.SMALL]") (bind scaleY "SHIP_SCALE_MAP[SIZE.SMALL]")
					(bind backgroundImage "'url:' + pathPreview")
					(backgroundSize = "autosize")
				)
			)
		)

		
		(hblock
			(style (marginLeft = 3px) (marginTop = "XS") (align = "middle") (hitTest = false))

			(block
				(style
					(marginTop = "-S")
					(marginBottom = -10px)
					(marginLeft = -5px)
					(marginRight = 3px)
				)
				(element ShipIcon
					_shipType = "shipType"
					_isSpecial = "isSpecial"
					_isFarming = "isFarming"
					_isElite = "isElite"
				)
			)

			(block
				(style
					(bind marginLeft "levelIcon.length > 0 ? -XS : 0")
					(bind marginRight "levelIcon.length > 0 ? -1 : 0")
				)
				(element ShipLevelNM
					_levelIcon =		"levelIcon"
					_colorTransform =	"isFarming || isSpecial	? COLOR_TRANSFORM_WHITE_TO_YELLOW : {}"
					_levelRome =		"levelRome"
					_alpha =			"isFarming || isSpecial ? 1 : TA"
					_textColor =		"isFarming || isSpecial	? SC.Ui_styles.SERVICE_COLORS.YELLOW : SC.Ui_styles.SERVICE_COLORS.WHITE"
				)
			)
		)

		
		(hblock
			(style
				(position = "absolute")
				(right = "XXS")
			)

			(hblock
				(bind visible "!isGiftShip")

				(block
					(style (marginTop = "XS") (hitTest = false))
					(controller $Instance renderer='PriceTag'
						(bind enabled "isPriceVisible")
						(args
							_priceInfo = "priceInfo"
							_showDiscountTag = "isActiveSale"
						)
					)
				)

				(block
					(bind visible "isOwned && rentUntil == 0")
					(style
						(width = 19px) (height = 19px)
						(backgroundImage = 'url:../service_kit/unified_status_icons/icon_check.png')
						(hitTest = false)
					)
				)
			)

			(block
				(bind visible "isGiftShip && !isOwned")
				(style
					(width = 19px) (height = 19px)
					(bind backgroundImage "'url:../service_kit/unified_status_icons/icon_reward_' +  (isGiftShipAvailable ? 'available' : 'default') + '.png'")
					(hitTest = false)
				)
			)

			(block	
				(controller $Instance renderer='RentTimerIcon'
					(bind enabled "rentUntil > 0")
					(args
						_rentUntil = "rentUntil"
					)
				)
			)

			(block
				(bind visible "isEarlyAccess")
				(style
					(height = 21px)
					(width = 21px)
					(backgroundImage = 'swf:../service_kit/icons_svg/icons_svg.swf:early_access')
					(hitTest = false)
				)
			)
		)

		
		(block
			(style (position = "absolute") (right = 6px) (bottom = 6px) (hitTest = false))
			(tf
				(class $TextDefaultBoldNM)
				(style
					(bind textColor "isFarming || isSpecial	? SC.Ui_styles.SERVICE_COLORS.YELLOW
															: SC.Ui_styles.SERVICE_COLORS.WHITE")
					(bind alpha "isFarming || isSpecial ? 1 : TA")
				)
				(bind text "toUpper(tr(shipInfo.nameIDS))")
			)
		)

		
		(block
			(style (position = "absolute") (bottom = 1px))

			(controller $Instance renderer='ShipBonusTags'
				(bind enabled "isBonusTagsVisible")
				(args
					_shipEntityId = "shipEntity.id"
					_isInShipResearch = "!_isNotShipTree"
				)
			)
		)

		
		(block
			(class $FullsizeAbsolute)
			(style (hitTest = false) (align = "middle|center") (hitTest = false))

			(controller $Instance renderer='IssuedStamp'
				(bind enabled "isEventLike && !isOwned")
				(args
					_text = "toUpper(tr('IDS_UNAVAILABLE_TO_DISPLAY_SOON'))"
					_angleRotation = -6
					_alpha = "TA"
				)
			)
		)
	)

	
	(block
		(macro DEFAULT_CONTROL_MARKER_ANIMATION "_isNewMarker")
		(style
			(position = "absolute")
			(right = -20px)
			(top = -10px)
			(hitTest = false)
		)

		(element MarkerNew)
	)
)

(def element TreeArrow (_arrowId:number, _gapCoords:array, _useClassGap:bool)
	(scope
		(var arrowComponent:dhComponent = "getEntity(_arrowId).researchArrow")
		(var arrowData:dict = "arrowComponent.arrow")
		(var isOverlayArrow:bool = "arrowComponent.isOverlayArrow")

		(var highlightState:number = "arrowComponent.highlighted" (event "arrowComponent.evHighlightedChanged"))
		(var isHighlighted:bool = "highlightState == SC.Common.HIGHLIGHT.HIGHLIGHTED")
		(var isHidden:bool = "highlightState == SC.Common.HIGHLIGHT.HIDDEN")
		(var isDisabled:bool = "!isHighlighted && isOverlayArrow")

		(var ownShipEntity:dhEntity = "getPrimaryEntity(CC.ownShip, arrowData.shipId)")
		(var arrowAlpha:number = "	isDisabled								? RESEARCH_TREE_ARROW_STATE_ALPHA.DISABLED   :
									isHidden								? RESEARCH_TREE_ARROW_STATE_ALPHA.HIDDEN :
									ownShipEntity != null || isHighlighted  ? RESEARCH_TREE_ARROW_STATE_ALPHA.ACTIVE
																			: RESEARCH_TREE_ARROW_STATE_ALPHA.NOT_RESEARCHED")
	
		(var isVertical:bool = "arrowData.startX == arrowData.endX")
		(var startOffset:number = "isVertical	? (arrowData.isFirst ? SHIP_TREE_BLOCK_HEIGHT - SHIP_TREE_BLOCK_MARGIN : SHIP_TREE_BLOCK_HEIGHT / 2)
												: (arrowData.isFirst ? SHIP_TREE_BLOCK_WIDTH * 2 - SHIP_TREE_BLOCK_MARGIN : SHIP_TREE_BLOCK_WIDTH)")
	)
	(style
		(position = "absolute")
		(backgroundColor = 0xffffffff)

		(bind left "(_useClassGap ? _gapCoords[arrowData.startX] : arrowData.startX) * SHIP_TREE_BLOCK_WIDTH + (isVertical || (arrowData.rightToLeft && ! arrowData.isLast) ? SHIP_TREE_BLOCK_WIDTH : startOffset)")
		(bind top "arrowData.startY * SHIP_TREE_BLOCK_HEIGHT + (isVertical ? startOffset : SHIP_TREE_BLOCK_HEIGHT / 2 )")
		(bind width "isVertical ? 1 : (_useClassGap ? _gapCoords[arrowData.endX] - _gapCoords[arrowData.startX] : arrowData.endX - arrowData.startX) * SHIP_TREE_BLOCK_WIDTH - startOffset + (arrowData.isLast ? SHIP_TREE_BLOCK_MARGIN : SHIP_TREE_BLOCK_WIDTH)")
		(bind height "isVertical ? (arrowData.endY - arrowData.startY) * SHIP_TREE_BLOCK_HEIGHT - startOffset + (arrowData.isLast ? SHIP_TREE_BLOCK_MARGIN : SHIP_TREE_BLOCK_HEIGHT / 2) : 1")
	)
	(macro SHIP_CARD_STATE_ALPHA _alpha = "arrowAlpha")
)

(def element TreeArrowInfo (_arrowId:number, _gapCoords:array, _useClassGap:bool)
	(scope
		(var arrowComponent:dhComponent = "getEntity(_arrowId).infoResearchArrow")
		(var arrowData:dict = "arrowComponent.arrow")
		
		(var shipEntity:dhEntity = "getPrimaryEntity(CC.ship, arrowData.shipIdTo)")
		(var shipInfo:dhComponent = "shipEntity.ship")
		(var upgradableShipInfo:dhComponent = "shipEntity.upgradableShipInfo")
		(var shipResearchTreeParams:dhComponent = "shipEntity.shipResearchTreeParams")

		(var prevShipEntity:dhEntity = "getPrimaryEntity(CC.ship, shipInfo.previousShipId)")
		(var prevShipInfo:dhComponent = "prevShipEntity.ship")

		(var prevOwnShipEntity:dhEntity = "getPrimaryEntity(CC.ownShip, shipInfo.previousShipId)")
		(var isPrevShipOwned:bool = "prevOwnShipEntity != null")

		(var useClassGap:bool = "_useClassGap && !(shipInfo.subtype == prevShipInfo.subtype && shipInfo.level == prevShipInfo.level)")

		(var highlighteStateBeforeIcon:number = "arrowComponent.highlightedBeforeInformer" (event "arrowComponent.evHighlightedBeforeInformerChanged"))
		(var highlighteStateAfterIcon:number = "arrowComponent.highlightedAfterInformer" (event "arrowComponent.evHighlightedAfterInformerChanged"))

		(var arrowBeforeIconAlpha:number = "highlighteStateBeforeIcon == SC.Common.HIGHLIGHT.HIDDEN								? RESEARCH_TREE_ARROW_STATE_ALPHA.HIDDEN :
											isPrevShipOwned || highlighteStateBeforeIcon == SC.Common.HIGHLIGHT.HIGHLIGHTED		? RESEARCH_TREE_ARROW_STATE_ALPHA.ACTIVE
																																: RESEARCH_TREE_ARROW_STATE_ALPHA.NOT_RESEARCHED")

		(var arrowAfterIconAlpha:number = "	highlighteStateAfterIcon == SC.Common.HIGHLIGHT.HIDDEN								? RESEARCH_TREE_ARROW_STATE_ALPHA.HIDDEN :
											isPrevShipOwned || highlighteStateAfterIcon == SC.Common.HIGHLIGHT.HIGHLIGHTED		? RESEARCH_TREE_ARROW_STATE_ALPHA.ACTIVE
																																: RESEARCH_TREE_ARROW_STATE_ALPHA.NOT_RESEARCHED")

		(var iconAlpha:number = "highlighteStateBeforeIcon == SC.Common.HIGHLIGHT.HIDDEN && highlighteStateAfterIcon == SC.Common.HIGHLIGHT.HIDDEN ? 0.1 : 1")

		(var isVertical:bool = "arrowData.startX == arrowData.endX")
		(var startOffset:number = "isVertical	? (arrowData.isFirst ? SHIP_TREE_BLOCK_HEIGHT - SHIP_TREE_BLOCK_MARGIN : SHIP_TREE_BLOCK_HEIGHT / 2)
												: (arrowData.isFirst ? SHIP_TREE_BLOCK_WIDTH * 2 - SHIP_TREE_BLOCK_MARGIN : SHIP_TREE_BLOCK_WIDTH)")
	)
	(style
		(position = "absolute")
		(bind flow "isVertical ? vertical : horizontal")

		(bind left "(_useClassGap ? _gapCoords[arrowData.startX] : arrowData.startX) * SHIP_TREE_BLOCK_WIDTH + (isVertical || (arrowData.rightToLeft && ! arrowData.isLast) ? SHIP_TREE_BLOCK_WIDTH : startOffset)")
		(bind top "arrowData.startY * SHIP_TREE_BLOCK_HEIGHT + (isVertical ? startOffset : SHIP_TREE_BLOCK_HEIGHT / 2 )")

		(bind width "isVertical ? 1 : (_useClassGap ? _gapCoords[arrowData.endX] - _gapCoords[arrowData.startX] : arrowData.endX - arrowData.startX) * SHIP_TREE_BLOCK_WIDTH - startOffset + (arrowData.isLast ? SHIP_TREE_BLOCK_MARGIN : SHIP_TREE_BLOCK_WIDTH)")
		(bind height "isVertical ? (arrowData.endY - arrowData.startY) * SHIP_TREE_BLOCK_HEIGHT - startOffset + (arrowData.isLast ? SHIP_TREE_BLOCK_MARGIN : SHIP_TREE_BLOCK_HEIGHT / 2) : 1")
	)

	(block
		(style
			(bind width "	isVertical														?	1px :
							shipResearchTreeParams.arrowDirection == SC.Common.DIRECTION.RIGHT	?	-(INFO_ICON_SIZE / 2) + (useClassGap ? (SHIP_TREE_BLOCK_WIDTH / 2) : 0) + SHIP_TREE_BLOCK_MARGIN
																							:	100%")

			(bind height "isVertical ? 100% : 1px")
			(backgroundColor = 0xffffffff)
		)
		(macro SHIP_CARD_STATE_ALPHA _alpha = "arrowBeforeIconAlpha")
	)

	(block
		(style
			(bind width "!isVertical ? INFO_ICON_SIZE : 1px")
			(bind height "isVertical ? INFO_ICON_SIZE : 1px")
			(align = "center|middle")
		)
		(macro SHIP_CARD_STATE_ALPHA _alpha = "iconAlpha")

		(element ShipsBranchesFeaturesInfoIcon
			_branchId = "shipInfo.branchId"
			_country = "shipInfo.country"
			_useClassGap = "useClassGap"
			_arrowDirection = "shipResearchTreeParams.arrowDirection"
		)
	)

	(block
		(style
			(bind width "	isVertical														?	1px :
							shipResearchTreeParams.arrowDirection == SC.Common.DIRECTION.LEFT	?	-(INFO_ICON_SIZE / 2) + (useClassGap ? (SHIP_TREE_BLOCK_WIDTH / 2) : 0) + SHIP_TREE_BLOCK_MARGIN
																							:	100%")
			(bind height "isVertical ? 4px : 1px")
			(backgroundColor = 0xffffffff)
		)
		(macro SHIP_CARD_STATE_ALPHA _alpha = "arrowAfterIconAlpha")
	)
)