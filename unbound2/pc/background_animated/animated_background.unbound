(def constant DEFAULT_ANIMATED_BG_CT "{	redMultiplier:		1,
										greenMultiplier:	1,
										blueMultiplier:		1,
										alphaMultiplier:	1,
										redOffset:			0,
										greenOffset:		0,
										blueOffset:			0,
										alphaOffset:		0 }")

(def constant HIDDEN_ANIMATED_BG_CT "{	redMultiplier:		0,
										greenMultiplier:	0,
										blueMultiplier:		0,
										alphaMultiplier:	1,
										redOffset:			0,
										greenOffset:		0,
										blueOffset:			0,
										alphaOffset:		0 }")

(def struct GET_COLOR_SETTING(_baseColors:dict={})
	(var value:dict = "{
							redMultiplier:		'redMultiplier'		in _baseColors ? _baseColors['redMultiplier']	: 1,
							greenMultiplier:	'greenMultiplier'	in _baseColors ? _baseColors['greenMultiplier']	: 1,
							blueMultiplier:		'blueMultiplier'	in _baseColors ? _baseColors['blueMultiplier']	: 1,
							alphaMultiplier:	'alphaMultiplier'	in _baseColors ? _baseColors['alphaMultiplier']	: 1,
							redOffset:			'redOffset'			in _baseColors ? _baseColors['redOffset']		: 0,
							greenOffset:		'greenOffset'		in _baseColors ? _baseColors['greenOffset']		: 0,
							blueOffset:			'blueOffset'		in _baseColors ? _baseColors['blueOffset']		: 0,
							alphaOffset:		'alphaOffset'		in _baseColors ? _baseColors['alphaOffset']		: 0
						}")
)

(def struct ANIMATED_BG_SCOPE(_selectedCategory:str, _type:number, _customData:dict={}, _modalWindowName:str = null)
	
	(var customBgColor:dict = "'backgroundColor' in _customData	? _customData['backgroundColor'] : null")
	(var customEffectColor:dict = "'effectColor' in _customData	? _customData['effectColor'] : null")
	

	(var curConfig:dict = "ANIMATED_BG_CONFIG_MAP[_type]")
	(var configData:dict =	"_selectedCategory in curConfig				? curConfig[_selectedCategory]
																		: curConfig['default']")

	
	(var hasBgPath:bool = "'backgroundPath' in configData")
	(var currentBgPath:str = "hasBgPath									? configData['backgroundPath']
																		: 'url:../bg/animated/sse/base/recolor.skel'")

	(var baseBackgroundColor:dict = "customBgColor						? customBgColor :
									!hasBgPath							? HIDDEN_ANIMATED_BG_CT :
									'backgroundColor' in configData		? configData['backgroundColor']
																		: DEFAULT_ANIMATED_BG_CT")

	(struct currentBackgroundColor = GET_COLOR_SETTING(_baseColors="baseBackgroundColor"))

	
	(var baseEffectColor:dict = "customEffectColor						? customEffectColor :
								'effectColor' in configData				? configData['effectColor']
																		: DEFAULT_ANIMATED_BG_CT")

	(struct currentEffectColor = GET_COLOR_SETTING(_baseColors="baseEffectColor"))

	(struct currentTopWindow = CURRENT_TOP_WINDOW())
	(var isOnTopWindow:bool = "_modalWindowName != null	? currentTopWindow.name == _modalWindowName
														: null")

	
	(struct qualityGraphicsPref = GET_PREF_STR(_option="'graphics.preset'"))
	(var qualityGraphics:str = "qualityGraphicsPref.value")
	(var isStatic:bool = "	'isStatic' in _customData																		? _customData['isStatic'] :
							isIn(qualityGraphics, [SC.Ui_prefs.GRAPHICS_PRESET.LOW, SC.Ui_prefs.GRAPHICS_PRESET.MINIMUM])	? true :
							isOnTopWindow != null																			? !isOnTopWindow
																															: false")

	(var isStaticBG:bool = "isStatic || !hasBgPath")

	(var isEffectPath:bool = "'effectPath' in configData")
	(var effectPath:str = 	"isEffectPath						? configData['effectPath']
																: ''")
)

(def element ModalWindowAnimatedBackground (	_selectedCategory:str = 'default',
												_type:number = "SC.Ui_styles.ANIMATED_BG.DEFAULT",
												_hideTime:number = 0.3,
												_hideDelay:number = 0,
												_modalWindowName:str = null)
	(scope
		(event startShow)
		(event startHide)

		(struct animBgData = ANIMATED_BG_SCOPE(_selectedCategory="_selectedCategory" _type="_type" _modalWindowName="_modalWindowName"))
	)
	(class $Fullsize)
	(alpha = 0)

	(controller $Animation
		(bindcall play duration=0.3 to="{ alpha: 1 }" action="kill" (event "startShow"))
		(bindcall play delay="_hideDelay" duration="_hideTime" to="{ alpha: 0 }" action="kill" watch=false (event "startHide"))
	)

	
	(block
		(class $FullsizeAbsolute)

		(element AnimatedBackgroundSubstrate
			_curBgPath = "animBgData.currentBgPath"
			_curBgColor = "animBgData.currentBackgroundColor.value"
			_isStatic = "animBgData.isStaticBG"
		)
	)

	
	(block
		(class $FullsizeAbsolute)
		(controller $Instance renderer='AnimatedBackgroundEffect'
			(bind enabled "animBgData.isEffectPath")
			(args
				_curEffectPath = "animBgData.effectPath"
				_curEffectColor = "animBgData.currentEffectColor.value"
				_isStatic = "animBgData.isStatic"
			)
		)
	)
)

(def element AnimatedBackground (	_selectedCategory:str = 'default',
									_type:number = "SC.Ui_styles.ANIMATED_BG.DEFAULT",
									_customData:dict = {}
								)
	(scope
		(struct animBgData = ANIMATED_BG_SCOPE(_selectedCategory="_selectedCategory" _type="_type" _customData="_customData"))
	)
	(class $Fullsize)

	
	(block
		(class $FullsizeAbsolute)
	
		(element AnimatedBackgroundSubstrate
			_curBgPath = "animBgData.currentBgPath"
			_curBgColor = "animBgData.currentBackgroundColor.value"
			_isStatic = "animBgData.isStaticBG"
		)
	)

	
	(block
		(class $FullsizeAbsolute)
		(controller $Instance renderer='AnimatedBackgroundEffect'
			(bind enabled "animBgData.isEffectPath")
			(args
				_curEffectPath = "animBgData.effectPath"
				_curEffectColor = "animBgData.currentEffectColor.value"
				_isStatic = "animBgData.isStatic"
			)
		)
	)
)

(def element AnimatedBackgroundSubstrate (_curBgPath:str, _curBgColor:dict, _isStatic:bool)
	(class $FullsizeAbsolute)
	(style
		(bind backgroundImage "_curBgPath")
		(backgroundSize = "cover")
	)
	(colorTransform = "_curBgColor")

	(controller $Spine
		(mergeLayers = true)
		(bindcall pause init=true	(bind enabled "_isStatic"))
		(bindcall resume			(bind enabled "!_isStatic"))
	)

	(controller $Animation
		
		(bindcall play duration=0.6 to="{ colorTransform: _curBgColor }" action="kill" (bind trigger "_curBgColor"))
	)
)

(def element AnimatedBackgroundEffect (_curEffectPath:str, _curEffectColor:dict, _isStatic:bool)
	(scope
		(var curEffectPath:str = "_curEffectPath" watch=false)
	)
	(class $FullsizeAbsolute)
	(style
		(bind backgroundImage "curEffectPath")
		(backgroundSize = "cover")
		(align = "center|middle")
	)
	(alpha = 0)
	(colorTransform = "_curEffectColor")

	(controller $Spine
		(mergeLayers = true)
		(bindcall pause init=true	(bind enabled "_isStatic"))
		(bindcall resume			(bind enabled "!_isStatic"))
	)

	(controller $Animation
		(controllerEvents evEffectAlphaAnimStarted)
		
		(bindcall play
			id = 'EffectColorAnim'
			duration = 0.6
			to = "{ colorTransform: _curEffectColor }"
			action = "kill"
			(bind trigger "_curEffectColor")
		)
		
		(bindcall play
			id = 'EffectAlphaAnim'
			duration = 0.6
			from = "{ alpha:0 }"
			to = "{ alpha:1 }"
			action = "kill"
			onStartedEvent = 'evEffectAlphaAnimStarted'
			init = true
			(bind trigger "_curEffectPath")
		)
		(bind curEffectPath "_curEffectPath" init=false watch=false on='evEffectAlphaAnimStarted')
	)
)