(def css $AccountVerticalLineProgress ()
	(height = 27px)
	(width = 1px)
	(backgroundColor = "SC.Ui_styles.SERVICE_COLORS.WHITE")
	(alpha = 0.5)
)

(def css $AccountHorizontalLineProgress ()
	(width = 100%)
	(height = 1px)
	(backgroundColor = "SC.Ui_styles.SERVICE_COLORS.WHITE")
	(alpha = 0.5)
)

(def element PlayerProfileAccountPage ()
	(scope
		(event evAccountLevelingItemClicked)

		(event evCarouselScrollValueChanged)
		(event evCarouselCanScrollChanged)

		(event evScrollToPrev)
		(event evScrollToNext)

		(var carouselCanScrollLeft:bool =	"$event ? $event.down	: false"	(event "evCarouselCanScrollChanged"))
		(var carouselCanScrollRight:bool =	"$event ? $event.up		: false"	(event "evCarouselCanScrollChanged"))

		(var accountLevellingCardCollection:dhCollection = "getCollectionByPath(CC.accountLevelCarouselPosition, 'sorted')")
		(var accountLevellingCardCollectionLen:number = "accountLevellingCardCollection.length")

		(var accountLevelEntity:dhEntity =		"getSingleEntity(CC.accountLevel)")
		(var accountLevelEntityIndex:number =	"accountLevelEntity.accountLevel.carouselLevelIndex"	(event "accountLevelEntity.accountLevel.evCarouselLevelIndexChanged"))

		(var accountLevelingRouteEntity:dhEntity = "getPrimaryEntity(CC.route, SC.Ui_windows.ROUTE.LEVELING)")
		(var dataComponent:dhComponent = "accountLevelingRouteEntity.dataComponent")
		(var pageData:dict = "dataComponent.data" (event "dataComponent.evDataChanged"))
		
		(var carouselScrollIndex:number = "pageData.isPortBannerClicked 		? pageData.rewardTypeReason == AL_REWARD_TYPE_PROMO		? pageData.promoRewardLevel - 1
																																		: max(accountLevelEntityIndex - 1, 0)
																				: max(accountLevelEntityIndex - 1, 0)" watch=false)

		(bind carouselScrollIndex "max(accountLevelEntityIndex - 1, 0)" init=false watch=false (bind trigger "accountLevelEntityIndex"))

		(var carouselItemSelectedIndex:number = "pageData.isPortBannerClicked	? pageData.rewardTypeReason == AL_REWARD_TYPE_PROMO		? pageData.promoRewardLevel
																																		: accountLevelEntityIndex
																				: accountLevelEntityIndex" watch=false)

		(bind carouselItemSelectedIndex		"$event && 'carouselItemSelectedIndex' in $event	? $event.carouselItemSelectedIndex
																								: accountLevelEntityIndex" init=false watch=false (event "evAccountLevelingItemClicked") (bind trigger "accountLevelEntityIndex"))

		(var accountLevelPointsEntity:dhEntity = "getSingleEntity(CC.accountLevelPoints)")
		(var accountLevelPoints:dhComponent = "accountLevelPointsEntity.accountLevelPoints")

		
		(var selectedCarouselItemEntity:dhEntity = "accountLevellingCardCollection.getEntityAtIndex(carouselItemSelectedIndex)")
		(var isFeature:bool = "carouselItemSelectedIndex >= 0")

		(struct stageSize = STAGE_SIZE())
		(struct itemWidth = ADAPTIVE_HORIZONTAL_SIZE (	_minStageWidth	= 1280px
														_minValue		= 332px
														_maxStageWidth	= 1920px
														_maxValue		= 428px
														_stageWidth		= "stageSize.width")) 
	)
	(class $Fullsize)
	(style
		(paddingLeft = 188px)
		(align = "center")
	)

	(block
		(style
			(paddingTop = "{ 720:60px, 1080:160px }")
			(height = 100%)
		)

		(block
			(macro DEFAULT_CACHED_SHOW_ANIMATION 1)
			(style (marginBottom = "{ 720:0px, 1080:90px }"))

			(block
				(style
					(position = "absolute")
					(bottom = 27px)
					(width = 100%)
					(align = "middle")
					(hitTest = false)
				)

				(element CarouselDivider)

				(block
					(style
						(width = 100%)
						(height = 300px)
						(alpha = 1.2)
						(hitTest = false)
						(position = "absolute")
						(top = 1px)
						(backgroundImage = 'url:../accountLevel/progressBarIcons/AL_bg_info.png')
						(backgroundSize = "fill")
					)
				)
			)

			(hblock
				(name = 'PlayerProfileAccount')

				(block
					(style
						(marginRight = "L")
						(marginTop = 71px)
					)
					(element DefaultScrollButton
						_buttonCarouselName = 'buttonAccountCarouselLeft'
						_canScroll = "carouselCanScrollLeft"
						_clickDispatchedEv = 'evScrollToPrev'
						_direction = "ScrollDirection.LEFT"
					)
				)
				(scrollArea
					(style
						(width = "{ 1280:868, 1920:1052 }")
						(height = 224px)
						(backgroundColor = "NO_COLOR")
					)

					(macro DEFAULT_HORIZONTAL_SCROLL_PARAMS
						_singleStep = "itemWidth.value"
						_wheelScrollAcceleration = "0.8"
						_canScrollChangedEvent = "'evCarouselCanScrollChanged'"
						_valueChangedEvent = "'evCarouselScrollValueChanged'"
						_isScrollBarVisible = "false"
					)

					(repeatController = 'AccountLevellingCarousel')
					(scrollPerItem = true)

					(content
						(style
							(flow = "horizontal")
							(height = 100%)
							(paddingRight = "{ 1280:-168px, 1920:-264px }")
						)

						(controller $DynamicRepeat renderer='AccountLevellingCarouselItem' name='AccountLevellingCarousel'
							(bind count "accountLevellingCardCollectionLen")
							(args
								_collection = "accountLevellingCardCollection"
								_isSelected = "carouselItemSelectedIndex == $index"
							)

							(itemHeight = 224px)
							(bind itemWidth "itemWidth.value")
							(bind itemOffset "itemWidth.value * 2")
						)
					)

					(bindcall scrollTo		animated=false	index="carouselScrollIndex" watch=false on='addedToStage')
					(bindcall scrollTo		animated=true	index="carouselScrollIndex" watch=false (bind trigger "carouselScrollIndex"))
					(bindcall scrollLeft	(event "evScrollToPrev"))
					(bindcall scrollRight	(event "evScrollToNext"))
				)

				(block
					(style
						(marginLeft = "L")
						(marginTop = 71px)
					)
					(element DefaultScrollButton
						_buttonCarouselName = 'ALCarouselCanScrollRight'
						_canScroll = "carouselCanScrollRight"
						_clickDispatchedEv = 'evScrollToNext'
						_direction = "ScrollDirection.RIGHT"
					)
				)
			)
		)

		(block
			(macro DEFAULT_CACHED_SHOW_ANIMATION 2)
			(style (marginLeft = "{ 1280:70px, 1480:150px }"))

			(controller $Animation
				(bindcall play
					keyframes = "[
						{ time:0, 		to:{ alpha: 0 }},
						{ time:0.15, 	to:{ alpha: 0 }},
						{ time:0.3, 	to:{ alpha: 1 }, easing:Easing.quad_out}
					]"
					action = "kill"
					(bind trigger "carouselItemSelectedIndex")
				)
			)

			(element AccountLevellingStepInfo
				_selectedCarouselItemEntity = "selectedCarouselItemEntity"
			)
		)
	)
)

(def element AccountLevellingCarouselItem(_collection:dhCollection, _isSelected:bool)
	(scope
		(var accountLevelCarouselPositionEntity:dhEntity = "_collection[$index]")
		(var isAccountLastStep:bool = "accountLevelCarouselPositionEntity.accountLevelCarouselPosition.isLastStep" (event "accountLevelCarouselPositionEntity.accountLevelCarouselPosition.evIsLastStepChanged"))
	)
	(style
		(width = "{ 1280:332px, 1920:428px }")
		(height = 224px)
		(flow = "horizontal")
	)
	
	(block
		(dispatch evAccountLevelingItemClicked args="{ carouselItemSelectedIndex: $index }" dir="EventDirection.UP" on='leftClick')

		(controller $Tooltip
			(renderer = 'AccountLevellingCarouselItemTooltip')
			(args
				_featureEntityId = "accountLevelCarouselPositionEntity.id"
				_isSelected = "_isSelected"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)

		(element AccountLevellingCarouselItemIcon
			_accountLevelingStepEntity = "accountLevelCarouselPositionEntity"
			_isSelected = "_isSelected"
		)
	)

	
	(block
		(style (width = 100%) (marginTop = 71px))
		
		(controller $Instance renderer='AccountLevelingProgressItem'
			(bind enabled "!isAccountLastStep")
			(args
				_accountLevelingStepEntity = "accountLevelCarouselPositionEntity"
			)
		)
	)
)


(def element AccountLevellingCarouselItemIcon (_accountLevelingStepEntity:dhEntity, _isSelected:bool)
	(scope
		(macro MOUSE_HANDLER_SCOPE)
		(var accountLevelPointsEntity:dhEntity = "getSingleEntity(CC.accountLevelPoints)")
		(var currentPoints:number = "accountLevelPointsEntity.accountLevelPoints.currentLevelPoints" (event "accountLevelPointsEntity.accountLevelPoints.evCurrentLevelPointsChanged"))

		(var accountStepPoints:number = "_accountLevelingStepEntity.accountLevelCarouselPosition.points" (event "_accountLevelingStepEntity.accountLevelCarouselPosition.evChanged"))

		(var isPromo:bool = "_accountLevelingStepEntity.hasComponent(CC.accountPromoRewardBanner)")
		(var promoTitle:str = "_accountLevelingStepEntity.accountPromoRewardBanner.title" (event "_accountLevelingStepEntity.accountPromoRewardBanner.evChanged"))

		(var stepLevel:number = "_accountLevelingStepEntity.accountLevelingStep.level")
		(var stepFeature:number = "_accountLevelingStepEntity.accountLevelingStep.features" (event "_accountLevelingStepEntity.accountLevelingStep.evFeaturesChanged"))

		(var isNewMarker:bool = "_accountLevelingStepEntity.hasComponent(CC.newItem)")

		(var battlesToStep:number = "accountStepPoints - currentPoints")
		(var isLocked:bool = "battlesToStep > 0")
		(var carouselItemTitle:str = "isPromo ? promoTitle : toString(stepLevel)")

		(var isActiveState:bool = "_isSelected && (!isLocked || isPromo)")
		(var iconColorTransform:dict = "rollOver && !_isSelected ? {
																		redMultiplier: 1,
																		greenMultiplier: 1,
																		blueMultiplier: 1,
																		alphaMultiplier: 1,
																		redOffset: 15,
																		greenOffset: 15,
																		blueOffset: 15,
																		alphaOffset: 0
																	}
																: CT_NONE")
			
		(var featureEntity:dhEntity = "getPrimaryEntity(CC.accountFeature, stepFeature)")
		(var iconFeaturePath:str = "featureEntity.accountFeature.iconPath" (event "featureEntity.accountFeature.evStateChanged"))
		(var featureUrl:str = "	isPromo		? 'url:../accountLevel/unlocks/icon_promo.png' :
								isLocked	? 'url:' + iconFeaturePath + '_locked.png'
											: 'url:' + iconFeaturePath + '.png'")
	)
	(macro MOUSE_EVENTS_DISPATCHER)
	(macro SOUND_HANDLER "_isSelected ? '' : 'button_account_level'")
	(bindcall externalCall "isNewMarker ? 'inputMapping.onAction' : ''" "['makeSeen', { entityId: _accountLevelingStepEntity.id }]" init=false watch=false on='leftClick')

	(style
		(height = 224px)
		(width = 164px)
		(backgroundColor = "NO_COLOR")
	)

	(block
		(bind visible "!isLocked || isPromo")
		(style
			(position = "absolute")
			(height = 164px)
			(width = 164px)
			(align = "center|middle")
			(hitTest = false)
		)

		(block
			(class $Fullsize)
			(style
				(backgroundSize = "fill")
				(backgroundImage = 'url:../accountLevel/progressBarIcons/unlock_shadow.png')
				(alpha = "_isSelected ? 0.8 : 0.6")
				(scaleX = "_isSelected ? 1 : 0.8")
				(scaleY = "_isSelected ? 1 : 0.8")
			)
			(controller $Animation
				(bindcall play
					duration = 0.1
					from = "{ alpha: 0.6, scaleX: 0.8, scaleY: 0.8 }"
					to = "{ alpha: 0.8, scaleX: 1, scaleY: 1 }"
					reverse = "!_isSelected"
					action = "kill"
					(bind trigger "_isSelected")
				)
			)
		)
	)

	(block	
		(block
			(bind name "'accountLevelingIcon_' + _isSelected")
			(style
				(height = 164px)
				(width = 164px)
				(hitTest = false)
				(bind backgroundImage "featureUrl")
				(backgroundSize = "cover")
				(visualOffsetY = "isActiveState ? -XS : 0px")
			)
			(macro DEFAULT_CONTROL_STATE_ANIMATION_CT "iconColorTransform")

			(controller $Animation
				(bindcall play
					duration = 0.1
					from = "{ visualOffsetY: 0px }"
					to = "{ visualOffsetY: -XS }"
					reverse = "!isActiveState"
					action = "kill"
					(bind trigger "isActiveState")
				)
			)
		)
		(block
			(macro DEFAULT_CONTROL_MARKER_ANIMATION "isNewMarker")
			(style
				(position = "absolute")
				(right = "-XXS")
				(top = 10px)
			)
			
			(element MarkerNew)
		)

		(block
			(bind visible "isLocked && !isPromo")
			(class $FullsizeAbsolute)
			(style (align = "center|middle"))

			(block
				(style
					(width = 60px)
					(height = 60px)
					(backgroundImage = 'url:../accountLevel/progressBarIcons/accountLevelingBigLockIcon.png')
					(backgroundSize = "fill")
				)
			)
		)
	)

	(block
		(style
			(width = 100%)
			(align = "center")
			(position = "absolute")
			(bottom = "XXS")
			(hitTest = false)
		)

		(element ALCarouselPointer
			_isSelected = "_isSelected"
		)

		(block
			(bind name "'accountLevelingTitle_' + _isSelected")
			(style (marginTop = "SXS"))

			(tf
				(class $TextDefaultBold19NM)
				(alpha = "_isSelected ? TA : 0.7")
				(bind text "carouselItemTitle")

				(controller $Animation
					(bindcall play
						duration = 0.1
						from = "{ alpha: 0.7 }"
						to = "{ alpha: TA }"
						reverse = "!_isSelected"
						action = "kill"
						(bind trigger "_isSelected")
					)
				)
			)
		)
	)
)

(def element ALCarouselPointer (_isSelected:bool)
	(style
		(width = 102px)
		(height = 11px)
		(backgroundSize = "fill")
		(backgroundImage = 'url:../accountLevel/progressBarIcons/carousel_pointer_up.png')
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(backgroundImage = 'url:../accountLevel/progressBarIcons/carousel_pointer_toggle.png')
			(backgroundSize = "fill")
			(alpha = "_isSelected ? 1 : 0")
		)

		(controller $Animation
			(bindcall play
				duration = 0.1
				from = "{ alpha: 0 }"
				to = "{ alpha: 1 }"
				reverse = "!_isSelected"
				action = "kill"
				(bind trigger "_isSelected")
			)
		)
	)
)


(def element AccountLevelingProgressItem (_accountLevelingStepEntity:dhEntity)
	(scope
		(var accountLevelCarouselPosition:dhComponent = "_accountLevelingStepEntity.accountLevelCarouselPosition")
		(var accountStepPoints:number = "accountLevelCarouselPosition.points" (event "accountLevelCarouselPosition.evChanged"))
		(var accountNextStepPoints:number = "accountLevelCarouselPosition.nextStepPoints" (event "accountLevelCarouselPosition.evNextStepPointsChanged"))
		(var isProgressBarWithSteps:bool = "accountNextStepPoints - accountStepPoints < 16")

		(var renderProgressItem:str = "isProgressBarWithSteps ? 'AccountStepsProgressWithRewards' : 'AccountLineProgressWithRewards'")
	)
	(style
		(width = 100%)
		(height = 27px)
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(backgroundImage = 'url:../accountLevel/progressBarIcons/border.png')
			(scale9grid = 5)
			(alpha = 0.5)
		)
	)

	(block
		(class $Fullsize)
		(style
			(align = "middle")
			(paddingLeft = 1px)
			(paddingRight = 1px)
		)

		(controller $Instance
			(bind renderer "renderProgressItem")
			(args
				_accountLevelingStepEntity = "_accountLevelingStepEntity"
			)	
		)
	)
)

(def element AccountLineProgressWithRewards (_accountLevelingStepEntity:dhEntity)
	(scope
		(var accountLevelCarouselPosition:dhComponent = "_accountLevelingStepEntity.accountLevelCarouselPosition")
		(var accountStepPoints:number = "accountLevelCarouselPosition.points" (event "accountLevelCarouselPosition.evChanged"))
		(var accountNextStepPoints:number = "accountLevelCarouselPosition.nextStepPoints" (event "accountLevelCarouselPosition.evNextStepPointsChanged"))

		(var accountLevelPointsEntity:dhEntity = "getSingleEntity(CC.accountLevelPoints)")
		(var currentProgressPoints:number = "accountLevelPointsEntity.accountLevelPoints.currentLevelPoints" (event "accountLevelPointsEntity.accountLevelPoints.evCurrentLevelPointsChanged"))

		(var battlesToNextStep:number = "accountStepPoints - currentProgressPoints")

		(var stepsCount:number = "accountNextStepPoints - accountStepPoints")

		(var progressWidth:number = "currentProgressPoints >= accountNextStepPoints 	? 100% :
									currentProgressPoints > accountStepPoints			? (100% / stepsCount) * (currentProgressPoints - accountStepPoints)
																						: 0px")
	)
	(style
		(width = 100%)
		(height = 17px)
	)

	(block
		(class $FullsizeAbsolute)

		(block
			(class $AccountHorizontalLineProgress)
		)

		(block
			(class $Fullsize)
			(style (align = "middle"))

			(block
				(style
					(width = 100%)
					(height = 1px)
					(backgroundImage = "'url:../accountLevel/progressBarIcons/accountLevelingProgressRepeaterBG.png'")
					(backgroundRepeatX = true)
				)
			)
		)

		(block
			(class $AccountHorizontalLineProgress)
		)
	)

	(block
		(style
			(height = 100%)
			(bind width "progressWidth")
			(backgroundColor = "SC.Ui_styles.SERVICE_COLORS.YELLOW")
		)
	)
)

(def element AccountStepsProgressWithRewards (_accountLevelingStepEntity:dhEntity)
	(scope
		(var accountLevelCarouselPosition:dhComponent = "_accountLevelingStepEntity.accountLevelCarouselPosition")
		(var accountStepPoints:number = "accountLevelCarouselPosition.points" (event "accountLevelCarouselPosition.evChanged"))
		(var accountNextStepPoints:number = "accountLevelCarouselPosition.nextStepPoints" (event "accountLevelCarouselPosition.evNextStepPointsChanged"))

		(var accountLevelPointsEntity:dhEntity = "getSingleEntity(CC.accountLevelPoints)")
		(var currentProgressPoints:number = "accountLevelPointsEntity.accountLevelPoints.currentLevelPoints" (event "accountLevelPointsEntity.accountLevelPoints.evCurrentLevelPointsChanged"))

		(var stepsCount:number = "accountNextStepPoints - accountStepPoints")
		(var trueStepsCount:number = "max(stepsCount, 1)")
		(var progressItemWidth:number = "100% / trueStepsCount")
	)
	(style
		(align = "center")
		(width = 100%)
		(height = 17px)
		(align = "middle")
	)

	(block
		(class $FullsizeAbsolute)

		(block
			(class $AccountHorizontalLineProgress)
		)

		(block
			(class $Fullsize)
			(style (align = "middle"))

			(block
				(style
					(width = 100%)
					(height = 1px)
					(backgroundImage = "'url:../accountLevel/progressBarIcons/accountLevelingProgressRepeaterBG.png'")
					(backgroundRepeatX = true)
				)
			)
		)

		(block
			(class $AccountHorizontalLineProgress)
		)
	)

	(hblock
		(class $Fullsize)
		
		(controller $Repeat renderer='AccountProgressStep'
			(bind count "trueStepsCount")
			(args
				_stepPoints = "accountStepPoints"
				_currentProgressPoints = "currentProgressPoints"
				_itemWidth = "progressItemWidth"
				_isLastItem = "$index == trueStepsCount - 1"
				_isSamePointReward = "trueStepsCount != stepsCount"
			)
		)
	)
)

(def element AccountProgressStep (_stepPoints:number, _currentProgressPoints:number, _itemWidth:number, _isLastItem:bool, _isSamePointReward:bool)
	(scope
		(var isSameLevelRewardHack:bool = "_isSamePointReward && _currentProgressPoints >= _stepPoints")
		(var isUnlocked:bool = "$index < _currentProgressPoints - _stepPoints || isSameLevelRewardHack")
	)

	(style
		(bind width "_itemWidth")
		(height = 100%)
		(flow = "horizontal")
		(align = "middle")
	)

	(block
		(class $Fullsize)
		(style (bind backgroundColor "isUnlocked ? SC.Ui_styles.SERVICE_COLORS.YELLOW : NO_COLOR"))
	)

	(block
		(bind visible "!_isLastItem")
		(class $AccountVerticalLineProgress)
	)
)




(def element AccountLevellingCarouselItemTooltip (_featureEntityId:number, _isSelected:bool)
	(scope
		(var accountLevelingStepEntity:dhEntity = "getEntity(_featureEntityId)")
		(var accountStepPoints:number = "accountLevelingStepEntity.accountLevelCarouselPosition.points" (event "accountLevelingStepEntity.accountLevelCarouselPosition.evChanged"))

		(var accountEntity:dhEntity = "getSingleEntity(CC.accountSelf)")
		(var abuseStatus:number = "accountEntity.accountInfo.abuseStatus" (event "accountEntity.accountInfo.evAbuseStatusChanged"))
		(var isAbuseStatusConfirmed:bool = "abuseStatus == SC.Common.ABUSE_STATUS.CONFIRMED")

		(var accountPromoRewardBanner:dhComponent = "accountLevelingStepEntity.accountPromoRewardBanner")
		(var isPromo:bool =			"accountPromoRewardBanner != null")
		(var promoTitle:str =		"accountPromoRewardBanner.title"				(event "accountPromoRewardBanner.evChanged"))
		(var promoDueDate:number =	"accountPromoRewardBanner.expirationTime ?: 0"	(event "accountPromoRewardBanner.evChanged"))

		(var formattedDueDatePromoReward:str = "formatTime(promoDueDate, 'dd.MM.yy', '', true)")
		(var timerText:str = "subst('IDS_PROMO_REWARD_DAYS_LEFT', [], { _date: formattedDueDatePromoReward })")

		(var stepFeature:number =	"accountLevelingStepEntity.accountLevelingStep.features" (event "accountLevelingStepEntity.accountLevelingStep.evFeaturesChanged"))
		(var stepLevel:number =		"accountLevelingStepEntity.accountLevelingStep.level")
	
		(var featureEntity:dhEntity = "getPrimaryEntity(CC.accountFeature, stepFeature)")
		(var iconFeaturePath:str = "featureEntity.accountFeature.iconPath" (event "featureEntity.accountFeature.evStateChanged"))
		(var titleFeature:str = "featureEntity.accountFeature.title" (event "featureEntity.accountFeature.evStateChanged"))

		(var accountLevelPointsEntity:dhEntity = "getSingleEntity(CC.accountLevelPoints)")
		(var currentProgressPoints:number = "accountLevelPointsEntity.accountLevelPoints.currentLevelPoints" (event "accountLevelPointsEntity.accountLevelPoints.evCurrentLevelPointsChanged"))
		(var battlesToStep:number = "accountStepPoints - currentProgressPoints")
		(var isTimeLeftVisible:bool = "battlesToStep > 0 && isPromo && promoDueDate > 1")
	
		(var featureAlStatusIcon:str = "battlesToStep < 1 		? SC.Ui_styles.UNIFIED_STATUS.CHECK :
										isAbuseStatusConfirmed 	? SC.Ui_styles.UNIFIED_STATUS.WARNING
																: SC.Ui_styles.UNIFIED_STATUS.LOCK")

		(var featureAlStatusText:str = "battlesToStep < 1 		? isPromo 	? 'IDS_ACCOUNT_LEVEL_CAROUSEL_TOOLTIP_REWARD_RECEIVED'
																			: 'IDS_AVAILABLE_ACCESS_LEVEL' :
										isAbuseStatusConfirmed 	? 'IDS_ACCOUNT_PROGRESS_ABUSED'
																: subst('IDS_BATTLES_TO_NEXT_STEP', [], { battles: battlesToStep }, battlesToStep)")

		(var headerText:str = "isPromo ? promoTitle : titleFeature")
		(var subheaderText:str = "isPromo ? 'IDS_PROMO_REWARD_HEADER' : subst('IDS_PROFILE_ACCOUNT_LEVEL', [], {_accountLevel: stepLevel})")
		(var imageUrl:str = "'url:' + (isPromo ? '../accountLevel/unlocks/icon_promo' : iconFeaturePath) + '_small.png'")
	)
	(style (width = 360px))

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)
	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER

		(element TooltipSystemHeaderWithIconAndText
			_imageWidth = 80px
			_imageHeight = 80px
			_imageUrl = "imageUrl"
			_headerText = "headerText"
			_subheaderText = "subheaderText"
		)

		(element TooltipSystemHorizontalDivider)
		(element TooltipSystemStatusLine
			_text = "featureAlStatusText"
			_unifiedStatus = "featureAlStatusIcon"
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider' (bind enabled "isTimeLeftVisible"))
		)
		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemStatusLine'
				(bind enabled "isTimeLeftVisible")
				(args
					_text = "timerText"
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.DATE"
				)
			)
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider' (bind enabled "!_isSelected"))
		)
		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemStatusLine'
				(bind enabled "!_isSelected")
				(args
					_text = 'IDS_HINT_LEFT_CLICK_FOR_FURTHER_INFO'
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
				)
			)
		)
	)
)

(def element AccountLevellingStepInfo (_selectedCarouselItemEntity:dhEntity)
	(scope
		(var points:number = "_selectedCarouselItemEntity.accountLevelCarouselPosition.points ?: 0" (event "_selectedCarouselItemEntity.accountLevelCarouselPosition.evChanged"))
		
		(var accountPromoRewardBanner:dhComponent = "_selectedCarouselItemEntity.accountPromoRewardBanner")
		(var isPromo:bool = "accountPromoRewardBanner != null")

		(var accountLevelPointsEntity:dhEntity = "getSingleEntity(CC.accountLevelPoints)")
		(var currentPoints:number = "accountLevelPointsEntity.accountLevelPoints.currentLevelPoints ?: 0" (event "accountLevelPointsEntity.accountLevelPoints.evCurrentLevelPointsChanged"))
		(var battlesToStep:number = "points - currentPoints")

		(var accountEntity:dhEntity = "getSingleEntity(CC.accountSelf)")
		(var abuseStatus:number = "accountEntity.accountInfo.abuseStatus" (event "accountEntity.accountInfo.evAbuseStatusChanged"))
		(var isAbuseStatusConfirmed:bool = "abuseStatus == SC.Common.ABUSE_STATUS.CONFIRMED")

		(var accountLevelStatusData:dict =	"isAbuseStatusConfirmed	?	{	text: 'IDS_ACCOUNT_PROGRESS_ABUSED',
																			unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.WARNING}
																	:	{	text: subst('IDS_BATTLES_TO_NEXT_STEP', [], { battles: battlesToStep }, battlesToStep),
																			unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.LOCK }")

		
		(var accountLevelingStep:dhComponent = "_selectedCarouselItemEntity.accountLevelingStep")
		(var stepFeature:number =	"accountLevelingStep.features" (event "accountLevelingStep.evFeaturesChanged"))
		(var stepLevel:number =		"accountLevelingStep.level")
		(var stepRewardId:number =	"accountLevelingStep.rewardId")

		(var featureEntity:dhEntity =			"getPrimaryEntity(CC.accountFeature, stepFeature)")
		(var accountFeature:dhComponent = 		"featureEntity.accountFeature")
		(var featureHeaderText:str =			"accountFeature.title"		(event "accountFeature.evStateChanged"))
		(var featureSubHeaderText:str =			"accountFeature.text"			(event "accountFeature.evStateChanged"))
		(var featureIconPath:str =				"accountFeature.iconPath"		(event "accountFeature.evStateChanged"))
		(var featureDescriptionArray:array =	"accountFeature.descriptions"	(event "accountFeature.evStateChanged"))
		(var featureLocationText:str =			"accountFeature.location"		(event "accountFeature.evStateChanged"))

		(var featureImageUrl:str = "featureIconPath ? ('url:' + featureIconPath + (battlesToStep > 0 ? '_locked_big.png' : '_big.png')) : ''")

		(var featureRewardEntity:dhEntity =		"getEntity(stepRewardId)")
		(var featureRewards:array = "	featureRewardEntity.hasComponent(CC.rewardsContainer)	? featureRewardEntity.rewardsContainer.rewardIds :
										featureRewardEntity										? [featureRewardEntity.id]
																								: []")
		

		
		(var promoHeaderText:str = 		"accountPromoRewardBanner.title"				(event "accountPromoRewardBanner.evChanged"))
		(var promoFullDescription:str =	"accountPromoRewardBanner.fullDescription"		(event "accountPromoRewardBanner.evChanged"))
		(var promoSubHeaderText:str =	"accountPromoRewardBanner.shortDescription"		(event "accountPromoRewardBanner.evChanged"))
		(var promoImageBig:str =		"accountPromoRewardBanner.imageBig"				(event "accountPromoRewardBanner.evChanged"))
		(var promoDueDate:number = 		"accountPromoRewardBanner.expirationTime ?: 0"	(event "accountPromoRewardBanner.evChanged"))
		(var promoRewardId:number = 	"accountPromoRewardBanner.rewardId"				(event "accountPromoRewardBanner.evChanged"))

		(var promoRewardEntity:dhEntity = "getEntity(promoRewardId)")

		(struct serverTime = SERVER_TIME())
		(var formattedDueDatePromoReward:str = "formatTime(promoDueDate, 'dd.MM.yy', '', true)")
		(var timerText:str = "subst('IDS_PROMO_REWARD_DAYS_LEFT', [], { _date: formattedDueDatePromoReward })")
		(var isTimeRunningOut:bool = "promoDueDate - serverTime.value < DAY_IN_SEC")

		(var promoImageEntity:dhEntity = "getPrimaryEntity(CC.byteArrayData, promoImageBig)")
		(var promoImageData:gfx = "promoImageEntity.byteArrayData.data" (event "promoImageEntity.byteArrayData.evChanged"))

		(var isTimedPromoReward:bool = "promoDueDate > 1 && battlesToStep > 0")
		(var promoRewards:array = "	promoRewardEntity.hasComponent(CC.rewardsContainer)	? promoRewardEntity.rewardsContainer.rewardIds :
									promoRewardEntity									? [promoRewardEntity.id]
																						: []")
		

		
		(var headerText:str =		"isPromo ? promoHeaderText		: featureHeaderText")
		(var subHeaderText:str =	"isPromo ? promoSubHeaderText	: featureSubHeaderText")
		(var buttonRequestParams:dict = "{	isPromo:			isPromo,
											battles:			points,
											battlesToStep:		battlesToStep,
											rewards:			isPromo	? promoRewards
																		: featureRewards,
											headerText:			isPromo	? promoHeaderText
																		: featureHeaderText,
											locationText:		featureLocationText,
											descriptionText:	promoFullDescription,		### for promo
											descriptionArray:	featureDescriptionArray,	### for feature
											dueDate:			isPromo	?	isTimedPromoReward	? promoDueDate
																								: 0
																		:	0 } ")
		
	)
	(style
		(width = 844px)
		(height = 256px)
		(flow = "horizontal")
	)

	(block
		(controller $Instance renderer='AccountLevelPreviewImage'
			(bindcall recreate (bind trigger "promoImageData"))
			(args
				_isPromo = "isPromo"
				_promoImageData = "promoImageData"
				_featureImageUrl = "featureImageUrl"
				_battlesToStep = "battlesToStep"
			)
		)
	)

	(block
		(class $Fullsize)
		(style (paddingTop = "LM") (paddingLeft = "LM"))

		(tf
			(name = 'accountLevelingRewardTitle')
			(class $TextDefaultBold30NM)
			(style
				(leading = -6)
				(maxWidth = 540px)
				(bind alpha "battlesToStep > 0 ? TC : TA")
			)
			(bind text "headerText")
		)

		(block
			(bind visible "!isPromo")
			(style
				(width = 100%)
				(marginTop = "SXS")
			)

			(tf
				(class $TextDefault17NM)
				(style
					(width = 100%)
					(leading = -3)
					(alpha = "TC")
				)
				(bind text "subst('IDS_PROFILE_ACCOUNT_LEVEL', [], {_accountLevel: stepLevel})")
			)
		)

		(block
			(bind visible "battlesToStep > 0")
			(style
				(width = 100%)
				(alpha = "TC")
				(marginTop = "M")
			)
			(controller $Tooltip
				(bind enabled "battlesToStep > 0 && isAbuseStatusConfirmed")
				(renderer = 'AbuseStatusProfileTooltip')
				(args
					_mouseInstructionText = 'IDS_CHOOSE_ACCOUNT_ACTION'
				)
				(macro DEFAULT_TOOLTIP_BEHAVIOUR)
			)

			(element StatusLine
				_text = "accountLevelStatusData.text"
				_unifiedStatus = "accountLevelStatusData.unifiedStatus"
			)
		)
		
		(block
			(bind visible "isTimedPromoReward")
			(style
				(width = 100%)
				(marginTop = "SXS")
				(alpha = "TC")
			)
			(element StatusLine
				_text = "timerText"
				_unifiedStatus = "isTimeRunningOut	? SC.Ui_styles.UNIFIED_STATUS.DATE_ATTENTION
													: SC.Ui_styles.UNIFIED_STATUS.DATE"
			)
		)

		(tf
			(name = 'accountLevelingRewardShortDescription')
			(class $TextDefault19NM)
			(style
				(maxWidth = 500px)
				(alpha = "TC")
				(marginTop = "MS")
			)
			(bind text "subHeaderText")
		)

		(block
			(name = 'accountLevelingRewardSeeMoreButton')
			(style (marginTop = "L"))

			(controller $Tooltip
				(renderer = 'SimpleStatusTooltip')
				(args
					_text = 'IDS_HINT_LEFT_CLICK_FOR_FURTHER_INFO'
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
				)
				(macro DEFAULT_TOOLTIP_BEHAVIOUR)
			)

			(element DefaultButton
				_width = 140px
				_isTransactionBtn = true
				_label = 'IDS_PRMP_DETAILS_BUTTON'
				_methods = "[{
								type: 'inputMapping.onRequest',
								name: 'openModalALCarouselElementInfo',
								args: buttonRequestParams
							}]"
			)
		)
	)
)

(def element AccountLevelPreviewImage (_isPromo:bool, _promoImageData:gfx, _featureImageUrl:str, _battlesToStep:number)
	(name = 'accountLevelingRewardImage')
	(style
		(width = 256px)
		(height = 256px)
		(backgroundSize = "cover")
		(bind backgroundImage "_isPromo ? _promoImageData : _featureImageUrl")
		(align = "center|middle")
	)

	(block
		(bind visible "_battlesToStep > 0 && !_isPromo")
		(style
			(width = 60px)
			(height = 60px)
			(backgroundImage = 'url:../accountLevel/progressBarIcons/accountLevelingBigLockIcon.png')
			(backgroundSize = "fill")
		)
	)
)