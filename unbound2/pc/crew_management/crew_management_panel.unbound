(def constant CREW_MANAGEMENT_ABILITIES_INSET 0)
(def constant CREW_MANAGEMENT_ASSIGN_INSET 1)

(def element CrewNationSpecializationBlock (_crewId:number = 0, _crewHistoryId:number = 0)
	(scope
		(struct crewReal =		PULL_CREW(_crewId = "_crewId"))
		(struct crewHistory =	PULL_CREW_HISTORY_INFO(_crewHistoryId = "_crewHistoryId"))

		(var crew:dhComponent =		"_crewId ? crewReal.component : crewHistory.component")

		(var crewNation:str =	"crew.nation"	(event "crew.evChanged"))
		(var isNoNation:bool =	"crewNation == SC.Common.NATION.COMMON")
	)

	(style (width = 100%))

	(block
		(style (width = 100%))
		(controller $Instance renderer='StatusLine'
			(bind enabled "isNoNation")
			(args
				_unifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.INFO"
				_text =				'IDS_NO_NATION_CREW'
			)
		)
	)

	(tf
		(bind visible "!isNoNation")

		(class $TextDefaultNM)
		(style (width = 100%) (marginBottom = "XS") (alpha = "TA"))
		(text = 'IDS_CREW_SPECIALIZATION_TO_NATION')
	)

	(block
		(bind visible "!isNoNation")

		(style
			(flow = "horizontal")
			(align = "middle")
			(marginBottom = -5px)
		)

		(element NationFlagsTiny _shipCountry = "crewNation")

		(tf
			(class $TextDefault17NM)
			(style (marginLeft = "S") (alpha = "TA"))

			(bind text "isNoNation ? '' : tr(toUpper('IDS_' + crewNation))")
		)
	)
)

(def element CrewPanelSpecializationAdoptationBlock (_crewId:number, _crewHistoryId:number = 0, _isShipVisible:bool = false, _isSmallPanel:bool = false)
	(scope
		(struct crewReal =		PULL_CREW(_crewId = "_crewId"))
		(struct crewHistory =	PULL_CREW_HISTORY_INFO(_crewHistoryId = "_crewHistoryId"))

		(var crew:dhComponent = "_crewId ? crewReal.component : crewHistory.component")
		(var retrainingComponent:dhComponent = "crewReal.entity.retraining")

		(var curShipId:number =		"crew.shipID"	(event "crew.evShipChanged"))
		(var isInAdaptation:bool =	"retrainingComponent != null")

		(var label:str = "isInAdaptation	? _isShipVisible	? 'IDS_CREW_IN_ADAPTATION_TO_ANOTHER_SHIP'
																: 'IDS_CREW_IN_ADAPTATION_TO_SELECT_SHIP'
											: 'IDS_CREW_SPECIALIZATION_TO_SELECT_SHIP'")

		(var unifiedStatus:str = "isInAdaptation ? SC.Ui_styles.UNIFIED_STATUS.ATTENTION : SC.Ui_styles.UNIFIED_STATUS.DEFAULT")

		(var adaptationXpBarSpacing:number = "_isSmallPanel ? XS : S")
	)

	(style (width = 100%) (backgroundColor = "NO_COLOR"))

	(controller $Tooltip
		(renderer='CrewSpecializationAdoptationTooltip')
		(args
			_isInAdaptation = "isInAdaptation"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		(align = "top|right")
	)

	(block
		(bind visible "crew.specializationID != curShipId || isInAdaptation")
		(style (width = 100%) (marginBottom = 3px))

		(controller $Instance renderer='ShipWithLabel'
			(bind enabled "crew.specializationID != curShipId || isInAdaptation")
			(args
				_shipId = "_isShipVisible ? crew.specializationID : null"
				_unifiedStatus = "unifiedStatus"
				_label = "label"
			)
		)
	)

	(block
		(bind visible "isInAdaptation")

		(style (width = 100%) (bind marginTop "isInAdaptation ? adaptationXpBarSpacing : 0"))

		(controller $Instance renderer='CrewExperienceBar'
			(bind enabled "isInAdaptation")
			(args
				_crewId = "_crewId"
			)
		)
	)
)

(def element CrewSpecializationAdoptationTooltip (_isInAdaptation:bool)
	(style (width = 320px) (hitTest = false))
	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)
	
	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(element TooltipSystemHeaderSubheaderText
			_headerText = "_isInAdaptation ? 'IDS_TOOLTIP_DESC_CREW_IN_ADAPTATION_HEADER' : 'IDS_TOOLTIP_CREW_SPECIALIZATION_HEADER'"
		)

		(element TooltipSystemHorizontalDivider)
		(element TooltipSystemDescriptionText
			_descriptionText = "_isInAdaptation ? 'IDS_TOOLTIP_DESC_CREW_IN_ADAPTATION_DESC_ONE' : 'IDS_TOOLTIP_DESC_CREW_SPECIALIZATION_TO_SELECT_SHIP'"
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider' (bind enabled "_isInAdaptation"))
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemDescriptionText'
				(bind enabled "_isInAdaptation")
				(args
					_descriptionText = 'IDS_TOOLTIP_DESC_CREW_IN_ADAPTATION_DESC_TWO'
				)
			)
		)
	)
)

(def element CrewPanel (_currentRoute:str, _crewId:number = 0, _shipId:number = 0, _isCrewInfoModalWindow:bool = false)
	(scope
		(macro STAGE_SIZE)
		(var isSmallPanel:bool = "stageHeight < 760")

		(macro PULL_SHIP_ID)

		(struct crew =			PULL_CREW(_crewId = "_crewId"))
		(struct permissions =	PULL_CREW_PERMISSIONS(_crew = "crew.component"))

		(var isDisabledCrewPanel:bool = 	"permissions.isDisabledBarracks && permissions.isDisabledCrewFire")
		(var skillMatrixId:number =			"crew.component.skillMatrixId ?: 0" (event "crew.component.evChanged"))
		(var isButtonsBlockVisible:bool =	"_crewId > 0 && skillMatrixId")

		(var rendererName:str =		"_crewId > 0 ? 'CrewPanelContent' : 'CrewPanelEmptyContent'")
	)

	(style (width = 100%))

	(block
		(style (width = 100%))

		(controller $Instance
			(bind renderer "rendererName")
			(args
				_crewId =					"_crewId"
				_shipId =					"viewedShipId"
				_isSmallPanel =				"isSmallPanel"
				_isCrewInfoModalWindow =	"_isCrewInfoModalWindow"
			)
		)
	)

	(block
		(style (width = 100%) (bind marginTop "isSmallPanel ? S : SXS"))

		(controller $Instance renderer='CrewPanelEmptyButtons'
			(bind enabled "_crewId == 0")
			(args
				_isSmallPanel =	"isSmallPanel"
			)
		)

		(controller $Instance renderer='CrewPanelCommonButtons'
			(bind enabled "!isDisabledCrewPanel && isButtonsBlockVisible")
			(args
				_currentRoute =	"_currentRoute"
				_isSmallPanel =	"isSmallPanel"
			)
		)

		(controller $Instance renderer='StatusLine'
			(bind enabled "isDisabledCrewPanel && isButtonsBlockVisible")
			(args
				_text = 'IDS_DISABLE_CREW_PANEL'
				_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
				_width = "100%"
			)
		)
	)
)

(def element CrewPanelEmptyContent (_shipId:number, _isSmallPanel:bool = false)
	(scope
		(var size:number =				"_isSmallPanel ? SIZE.MEDIUM : SIZE.LARGE")
		(var infoStatusMargin:number =	"_isSmallPanel ? S : SXS")

		(var shipEntity:dhEntity =			"getPrimaryEntity(CC.ownShip, _shipId)")
		(var shipInfo:dhComponent =			"shipEntity.ship" (event "shipEntity.ship.evUpdate"))
		(var isWithoutCrewPenalty:bool =	"shipInfo.isWithoutCrewPenalty")
	)

	(style (width = 100%) (align = "center"))

	(element CrewStereotypeWithName _size = "size")

	(tf
		(class $TextDefaultNM)
		(style (width = 100%) (marginTop = "XS") (marginLeft = -6px) (leading = -3) (alpha = "TA"))
		(text = 'IDS_CREW_HIRE_CREW_DESCRIPTION_0')
	)

	(tf
		(class $TextDefaultNM)
		(style (width = 100%) (marginTop = "SXS") (marginLeft = -6px) (leading = -3) (alpha = "TA"))
		(text = 'IDS_CREW_HIRE_CREW_DESCRIPTION_1')
	)

	(block
		(style (width = 100%) (bind marginTop "isWithoutCrewPenalty ? infoStatusMargin : 0"))

		(controller $Instance renderer='HorizontalDividerTwoPx' (bind enabled "isWithoutCrewPenalty"))
	)

	(block
		(style (width = 100%) (bind marginTop "isWithoutCrewPenalty ? infoStatusMargin : 0"))

		(controller $Instance renderer='StatusLine'
			(bind enabled "isWithoutCrewPenalty")
			(args
				_unifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.INFO"
				_text =				'IDS_NO_SPECIALIZATION_REQUIRED_FOR_SHIP_STATUS_LINE'
				_width =			100%
			)
		)
	)
)

(def element CrewPanelContent (_crewId:number = 0, _shipId:number = 0, _isCrewInfoModalWindow:bool = false, _isSmallPanel:bool = false)
	(scope
		(struct crew =			PULL_CREW(_crewId = "_crewId"))
		(var retrainingComponent:dhComponent = "crew.entity.retraining")

		(struct ownShipInfo =	PULL_OWN_SHIP(_playerShipId = "_shipId"))

		(var shipSubtype:str = "ownShipInfo.shipComponent.subtype ?: ''")

		(var isMaxLevel:bool =			"crew.component.isMaxLevel"					(event "crew.component.evLevelUp"))
		(var specializationID:number =	"crew.component.specializationID ?: 0"		(event "crew.component.evChanged"))
		(var timeRent:number =			"crew.component.timeRent ?: 0"				(event "crew.component.evTimeRentChanged") (event "crew.component.evChanged"))
		(var skillMatrixId:number =		"crew.component.skillMatrixId ?: 0"			(event "crew.component.evChanged"))
		(var allSkillPoints:number =	"crew.component.allSkillPoints ?: 0"		(event "crew.component.evLevelUp"))
		(var crewNation:str =			"crew.component.nation ?: ''"				(event "crew.component.evChanged"))
		(var classificationId:number =	"crew.component.classificationId"			(event "crew.component.evClassificationIdChanged"))

		(var isCurrencyDeficit:bool =	"retrainingComponent.allTypesBlocked"		(event "retrainingComponent.evRetrainingUpdated"))

		(var isLocked:bool =		"ownShipInfo.ownShipComponent.isLocked"			(event "ownShipInfo.ownShipComponent.evUpdateLock"))
		(var isInFormation:bool =	"ownShipInfo.ownShipComponent.isInFormation"	(event "ownShipInfo.ownShipComponent.evUpdateLock"))

		(var isInAdaptation:bool =	"retrainingComponent != null")
		(var isXpBarVisible:bool =	"crew.component && !isMaxLevel && !isInAdaptation && skillMatrixId")

		
		(var isCrewSpecialization:bool = "specializationID > 0")
		(var isEmptyCrew:bool = "crewNation == SC.Common.NATION.COMMON")
		(var isCrewNationSpecialization:bool = "!isCrewSpecialization && !isEmptyCrew")

		(var isCrewElite:bool =					"classificationId == SC.Common.COMMANDER_CLASSIFICATIONS.ELITE")
		(var canCrewBeUpgradedToElite:bool =	"isIn(classificationId, SC.Common.COMMANDER_CLASSIFICATIONS.CAN_LEARN_ELITE_CREW_BOOK)")

		(var hasAnySpecialization:bool = "isCrewSpecialization || isCrewNationSpecialization")

		(var isThisShipSpecDiffersFromCrewShipSpec:bool =	"specializationID != _shipId")
		(var isFastTrainingButtonVisible:bool =				"!(isInAdaptation || isMaxLevel) && skillMatrixId")
		(var isSpecializationAdoptationVisible:bool =		"(isThisShipSpecDiffersFromCrewShipSpec || isInAdaptation) && !isCrewNationSpecialization")
		(var isCrewNationSpecializationBlockVisible:bool =	"_isCrewInfoModalWindow && _shipId == 0 && !isSpecializationAdoptationVisible")
		(var isShipPreparedBlockVisible:bool =				"!isCrewNationSpecializationBlockVisible && isThisShipSpecDiffersFromCrewShipSpec && specializationID != 0 && !isInAdaptation")
		(var isCrewPanelAssignedBlockVisible:bool =			"_isCrewInfoModalWindow && (!isInAdaptation || (isInAdaptation && isThisShipSpecDiffersFromCrewShipSpec))")

		(var isFastTrainingDisabled:bool = "isInFormation || isLocked || isInAdaptation || isEmptyCrew")
		(var fastTrainingDenyReason:str = "	isInFormation			?	'IDS_FAST_TRAINING_DISABLE_REASON_SHIP_IS_IN_FORMATION' :
											isLocked				?	'IDS_FAST_TRAINING_DISABLE_REASON_SHIP_IS_IN_BATTLE' :
											isInAdaptation			?	'IDS_FAST_TRAINING_DISABLE_REASON_IN_ADAPTATION' :
											isEmptyCrew				?	'IDS_FAST_TRAINING_DISABLE_REASON_NATION_COMMON'
																	:	''")

		(var finishTrainingDenyReason:str = "	isInFormation		?	'IDS_RETRAINING_DISABLE_REASON_SHIP_IS_IN_FORMATION' :
												isLocked			?	'IDS_RETRAINING_DISABLE_REASON_SHIP_IS_IN_BATTLE' :
												isCurrencyDeficit	?	'IDS_NOT_ENOUGH_FUNDS'
																	:	''")
		(var crewStereotypeSize:number = "_isSmallPanel ? SIZE.MEDIUM : SIZE.LARGE")
		(var isRental:bool = "timeRent > 0")

		(var buttonSize:number =	"_isSmallPanel ? SIZE.SMALL : SIZE.MEDIUM")
		(var elemSpacing:number =	"_isSmallPanel ? S : SXS")

		(var levelText:str = "subst(isMaxLevel ? 'IDS_CREW_PANEL_MAX_LEVEL' : 'IDS_CREW_PANEL_LEVEL', [], {crewLevel: allSkillPoints})")
		(var substituteMap:dict = "{	'[el_left_sm]': 'elite_wreath_left_small',
										'[el_right_15_sm]':'elite_wreath_right_15_small' }")

		(var crewDataEntity:dhEntity =	"getSingleEntity(CC.crewData)")
		(var crewData:dhComponent =		"crewDataEntity.crewData")
		(var booksAmount:number =		"crewData.eliteCrewBooksCount ?: 0"		(event "crewData.evEliteCrewBooksCountChanged"))
		(var doesPlayerHaveBook:bool =	"booksAmount > 0")
		(var canConvertIntoElite:bool =	"doesPlayerHaveBook && !isRental && canCrewBeUpgradedToElite")

		(var isCrewInfoLowerDividerVisible:bool = "_isCrewInfoModalWindow && (isCrewElite || canConvertIntoElite)")
		(var isEliteMentorshipNew:bool = "crew.entity.hasComponent(CC.newItem)")

		(var doesPlayerHaveNewEliteBooks:bool =	"crewDataEntity.hasComponent(CC.newItem)")
		(var isNewEliteBookMarkerShown:bool =	"doesPlayerHaveNewEliteBooks && canCrewBeUpgradedToElite")
	)
	(macro UNIFIED_STATUS_TO_COLOR_AND_ALPHA "SC.Ui_styles.UNIFIED_STATUS.ATTENTION" "'attentionTextColor'" "'attentionTextAlpha'")

	(style (width = 100%) (align = "center"))

	(element CrewStereotypeWithName
		_crewId =			"_crewId"
		_shipClass =		"shipSubtype"
		_size =				"crewStereotypeSize"
		_isRentIconHidden =	true
		_hideSkillPoints =	true
	)

	(block
		(bind visible "skillMatrixId && allSkillPoints > 0")
		(style (width = 100%) (marginTop = "SXS"))

		(tf
			(class $TextDefaultNM)
			(name = 'crew_level')
			(style (alpha = "TA"))
			(bindcall substitute imageOffset="6" substitutionMap="substituteMap" sourceText="levelText" postfix='' init=true)
		)
	)


	
	(block
		(bind visible "isXpBarVisible")

		(style
			(width = 100%)
			(marginTop = "S")
			(marginBottom = "XS")
		)

		(block
			(style (width = 100%))

			(controller $Instance renderer='CrewExperienceBar'
				(bind enabled "isXpBarVisible")
				(args
					_crewId = "_crewId"
				)
			)
		)
	)

	(block
		(bind visible "isInAdaptation")

		(style
			(width = 100%)
			(bind marginTop "elemSpacing")
			(marginBottom = "XS")
		)

		(controller $Instance renderer='CrewPanelSpecializationAdoptationBlock'
			(bind enabled "isInAdaptation")
			(args
				_crewId =			"_crewId"
				_isShipVisible =	"isThisShipSpecDiffersFromCrewShipSpec || _isCrewInfoModalWindow"
				_isSmallPanel =		"_isSmallPanel"
			)
		)
	)
	

	
	(block
		(bind visible "isFastTrainingButtonVisible")

		(style (bind marginTop "elemSpacing") (width = 100%))

		(controller $Instance renderer='DefaultButton'
			(bind enabled "isFastTrainingButtonVisible")
			(args
				_size =					"buttonSize"
				_width =				100%
				_label =				'IDS_FAST_TRAINING_BUTTON_LABEL'
				_isTransactionBtn =		true
				_enabled =				"!isFastTrainingDisabled"
				_methods =				"[{ type: 'inputMapping.onRequest', name: CREW_ACTIONS.OPEN_FAST_TRAINING_WINDOW, args: { crewID: _crewId } }]"
				_focusIndex =			0
			)
		)

		(controller $Tooltip
			(renderer='SimpleStatusTooltip')
			(bind enabled "isFastTrainingButtonVisible && isFastTrainingDisabled")
			(args
				_unifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.NEGATIVE"
				_text =				"fastTrainingDenyReason"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)

	(block
		(style (width = 100%) (bind marginTop "isInAdaptation ? elemSpacing : 0"))

		(controller $Instance renderer='DefaultButton'
			(bind enabled "isInAdaptation")
			(args
				_label =				'IDS_FINISH_RETRAINING_BUTTON'
				_size =					"buttonSize"
				_width =				220px
				_focusIndex =			0
				_isTransactionBtn =		true
				_enabled =				"!finishTrainingDenyReason"
				_methods =				"[{ type: 'inputMapping.onRequest', name: CREW_ACTIONS.OPEN_CREW_RETRAIN_WINDOW, args: { shipId: _shipId, crewId: _crewId} }]"
			)
		)

		(controller $Tooltip
			(renderer='SimpleStatusTooltip')
			(bind enabled "isInAdaptation && finishTrainingDenyReason")
			(args
				_unifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.NEGATIVE"
				_text =				"finishTrainingDenyReason"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)
	

	
	(block
		(bind visible "!_isCrewInfoModalWindow && skillMatrixId")

		(style (width = 100%) (bind marginTop "elemSpacing"))

		(controller $Instance renderer='DefaultButton'
			(bind enabled "!_isCrewInfoModalWindow && skillMatrixId")
			(args
				_enabled =		"hasAnySpecialization && !isInFormation"
				_size =			"buttonSize"
				_width =		100%
				_label =		'IDS_PERSONAL_FILE_BUTTON_LABEL'
				_methods =		"[{ type: 'inputMapping.onRequest', name: CREW_ACTIONS.OPEN_CREW_INFO_WINDOW, args: { _crewId: _crewId } }]"
				_focusIndex =	1
			)
		)

		(block
			(style
				(hitTest = false)
				(position = "absolute")
				(bind right "_isSmallPanel ? 74px : XL")
				(bind top "_isSmallPanel ? 0 : XXS")
			)

			(block
				(macro DEFAULT_CONTROL_MARKER_ANIMATION "isEliteMentorshipNew || isNewEliteBookMarkerShown")
				(style (position = "absolute"))

				(element MarkerNew)
			)
		)

		(controller $Tooltip
			(renderer='SimpleStatusTooltip')
			(bind enabled "!hasAnySpecialization || isInFormation")
			(args
				_unifiedStatus =	"!hasAnySpecialization		? SC.Ui_styles.UNIFIED_STATUS.ATTENTION
																: SC.Ui_styles.UNIFIED_STATUS.NEGATIVE"
				_text =				"!hasAnySpecialization		? 'IDS_HINT_CREW_WITHOUT_NATION'
																: 'IDS_HINT_CREW_INFO_UNAVAILABLE_DUE_IN_FORMATION'"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)
	

	
	(block
		(style (width = 100%) (bind marginTop "isRental ? SXS : 0"))
		(controller $Instance renderer = 'HorizontalDividerTwoPx' (bind enabled "isRental"))
	)

	(block
		(style (width = 100%) (bind marginTop "isRental ? elemSpacing : 0"))
		(controller $Instance renderer='CrewPanelRentTimer'
			(bind enabled "isRental")
			(args
				_crewId = "_crewId"
			)
		)
	)
	

	
	(block
		(style (width = 100%) (bind marginTop "isCrewNationSpecializationBlockVisible ? elemSpacing : 0"))
		(controller $Instance renderer='HorizontalDividerTwoPx' (bind enabled "isCrewNationSpecializationBlockVisible"))
	)

	(block
		(style (width = 100%) (bind marginTop "isCrewNationSpecializationBlockVisible ? elemSpacing : 0"))
		(controller $Instance renderer='CrewNationSpecializationBlock'
			(bind enabled "isCrewNationSpecializationBlockVisible")
			(args
				_crewId = "_crewId"
			)
		)
	)
	

	
	(block
		(bind visible "isShipPreparedBlockVisible")

		(style
			(width = 100%)
			(marginBottom = 3px)
			(bind marginTop "elemSpacing")
		)

		(block
			(bind visible "isShipPreparedBlockVisible")
			(style
				(width = 100%)
				(bind marginBottom "elemSpacing")
			)
			(controller $Instance renderer='HorizontalDividerTwoPx' (bind enabled "isShipPreparedBlockVisible"))
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='ShipWithLabel'
				(bind enabled "isShipPreparedBlockVisible")
				(args
					_shipId =	"specializationID"
					_label =	'IDS_CREW_SPECIALIZATION_TO_SELECT_SHIP'
				)
			)
		)

		(controller $Tooltip
			(renderer='CrewSpecializationAdoptationTooltip')
			(args
				_isInAdaptation = "isInAdaptation"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
			(align = "top|right")
		)
	)
	

	
	(block
		(style
			(width = 100%)
			(bind marginTop "isCrewPanelAssignedBlockVisible ? elemSpacing : 0")
		)

		(controller $Instance renderer='CrewPanelAssignedBlock'
			(bind enabled "isCrewPanelAssignedBlockVisible")
			(args
				_shipId =		"_shipId"
				_isSmallPanel =	"_isSmallPanel"
			)
		)
	)
	

	(block
		(style
			(width = 100%)
			(bind marginTop "(skillMatrixId && !_isCrewInfoModalWindow) || isCrewInfoLowerDividerVisible ? elemSpacing : 0")
		)

		(controller $Instance renderer = 'HorizontalDividerTwoPx' (bind enabled "(skillMatrixId && !_isCrewInfoModalWindow) || isCrewInfoLowerDividerVisible"))
	)
)

(def element CrewPanelAssignedBlock (_shipId:number = 0, _isSmallPanel:bool = false)
	(scope
		(macro PULL_SHIP_ID)
		(var isFromBarracksStatusVisible:bool =		"_shipId == 0")
		(var isToProceedToSkillsBtnVisible:bool =	"_shipId > 0 && _shipId != playerShipId")
	)

	(style (width = 100%))

	(element HorizontalDividerTwoPx)

	(block
		(bind visible "_shipId > 0")

		(style
			(width = 100%)
			(marginBottom = 3px)
			(bind marginTop "_isSmallPanel ? S : SXS")
		)

		(controller $Instance renderer='ShipWithLabel'
			(bind enabled "_shipId > 0")
			(args
				_shipId = "_shipId"
				_label = 'IDS_CREW_ASSIGNED_TO_SELECT_SHIP'
			)
		)
	)

	(block
		(bind visible "isToProceedToSkillsBtnVisible")

		(style (width = 100%) (bind marginTop "_isSmallPanel ? S : SXS"))

		(controller $Instance renderer='DefaultButton'
			(bind enabled "isToProceedToSkillsBtnVisible")
			(args
				_type =		"SC.Ui_styles.BUTTON_TYPE.SECONDARY"
				_size =		"SIZE.SMALL"
				_width =	96px
				_label =	'IDS_TO_ABILITIES_BUTTON'
				_methods =	"[	{ type: 'inputMapping.onAction', name: 'selectShip', args: { shipId: _shipId } },
								{ type: 'inputMapping.onRequest', name: CREW_ACTIONS.CLOSE_SKILLS_INFO_WINDOW, args: {} } ]"
			)
		)
	)

	(block
		(bind visible "isFromBarracksStatusVisible")

		(style
			(width = 100%)
			(bind marginTop "isFromBarracksStatusVisible	? _isSmallPanel ? S : SXS
															: 0")
		)

		(controller $Instance renderer='StatusLine'
			(bind enabled "isFromBarracksStatusVisible")
			(args
				_text = 'IDS_CREW_IN_BARRACKS'
			)
		)
	)
)

(def element CrewPanelCommonButtons (_currentRoute:str, _isSmallPanel:bool = false)
	(scope
		(macro PULL_SHIP_ID)
		(struct shipInfo =			PULL_OWN_SHIP(_playerShipId = "playerShipId"))
		(var isLocked:bool =		"shipInfo.ownShipComponent.isLocked"		(event "shipInfo.ownShipComponent.evUpdateLock"))
		(var isInFormation:bool =	"shipInfo.ownShipComponent.isInFormation"	(event "shipInfo.ownShipComponent.evUpdateLock"))
		(var crewId:number =		"shipInfo.ownShipComponent.crewId"			(event "shipInfo.ownShipComponent.evCrewChanged"))

		(struct crew =			PULL_CREW(_crewId = "crewId"))
		(struct permissions =	PULL_CREW_PERMISSIONS(_crew = "crew.component"))

		(var isDisabledCrewPanel:bool =			"permissions.isDisabledBarracks && permissions.isDisabledCrewFire")

		(var crewData:dhComponent =			"getSingleComponent(CC.crewData)")
		(var freeBarracksSlots:number =		"crewData.freeBarracksSlots ?: 0"	(event "crewData.evFreeBarracksSlotsChanged"))
		(var canDisassignCrew:bool =		"freeBarracksSlots > 0")

		(var isDisassignButtonEnabled:bool =	"!isLocked && !isInFormation && canDisassignCrew")

		(var disassignDisableTooltipText:str =	"	isInFormation		? 'IDS_DISASSIGN_CREW_DENY_REASON_IN_FORMATION' :
													isLocked			? 'IDS_DISASSIGN_CREW_DENY_REASON_IN_BATTLE' :
													!canDisassignCrew	? 'IDS_ASSIGN_NEW_CREW_DISABLE_REASON_FULL_BARRACKS'
																		: ''")

		(var fireCrewTooltipText:str =	"isInFormation	? 'IDS_FIRE_CREW_DENY_REASON_IN_FORMATION' :
										 isLocked		? 'IDS_FIRE_CREW_DENY_REASON_IN_BATTLE'
														: ''")

		(var isCrewAbilitiesInset:bool =	"_currentRoute == SC.Ui_windows.ROUTE.CREW_ABILITIES_MANAGEMENT")
		(var crewManagementInset:number =	"isCrewAbilitiesInset ? CREW_MANAGEMENT_ASSIGN_INSET : CREW_MANAGEMENT_ABILITIES_INSET")

		(var buttonSize:number =	"_isSmallPanel ? SIZE.SMALL : SIZE.MEDIUM")
		(var buttonMargin:number =	"_isSmallPanel ? S : SXS")
	)

	(style (width = 100%))

	(block
		(bind visible "!permissions.isDisabledBarracks")

		(style
			(width = 100%)
			(bind marginBottom "!permissions.isDisabledBarracks ? buttonMargin : 0")
		)

		(controller $Instance renderer='DefaultButton'
			(bind enabled "!permissions.isDisabledBarracks")
			(args
				_type =				"SC.Ui_styles.BUTTON_TYPE.SECONDARY"
				_name =				'CrewDisassignButton'
				_label =			'IDS_CREW_TO_BARRACKS'
				_size =				"buttonSize"
				_width =			100%
				_enabled =			"isDisassignButtonEnabled"
				_methods =			"[{ type: !disassignDisableTooltipText ? 'inputMapping.onAction' : '', name: CREW_ACTIONS.DISASSIGN, args: { crewId: crewId } }]"
				_isTransactionBtn =	true
				_focusIndex =		2
			)
		)

		(controller $Tooltip
			(bind enabled "disassignDisableTooltipText != ''")
			(renderer = 'SimpleStatusTooltip')
			(args
				_unifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.NEGATIVE"
				_text =				"disassignDisableTooltipText"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)

	(block
		(bind visible "!permissions.isDisabledCrewFire")

		(style
			(width = 100%)
			(bind marginBottom "!permissions.isDisabledCrewFire ? buttonMargin : 0")
		)

		(controller $Instance renderer='DefaultButton'
			(bind enabled "!permissions.isDisabledCrewFire")
			(args
				_type =				"SC.Ui_styles.BUTTON_TYPE.SECONDARY"
				_name =				'CrewFireButton'
				_label =			'IDS_CREW_FIRE'
				_size =				"buttonSize"
				_width =			100%
				_enabled =			"!isLocked"
				_methods =			"[{ type: 'inputMapping.onRequest', name: CREW_ACTIONS.OPEN_FIRE_CREW_WINDOW, args: { crewId: crewId } }]"
				_isTransactionBtn =	true
				_focusIndex =		3
			)
		)

		(controller $Tooltip
			(bind enabled "fireCrewTooltipText != ''")
			(renderer = 'SimpleStatusTooltip')
			(args
				_unifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.NEGATIVE"
				_text =				"fireCrewTooltipText"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)

	(block
		(style (width = 100%))

		(controller $Instance renderer='DefaultButton'
			(bind enabled "!permissions.isDisabledBarracks")
			(args
				_label =			"isCrewAbilitiesInset ? 'IDS_ALL_CREW_BUTTON' : 'IDS_TO_ABILITIES_BUTTON'"
				_size =				"buttonSize"
				_width =			100%
				_focusIndex =		4
				_defaultFocused =	false
				_methods =			"[{ type: 'inputMapping.onAction', name: 'navigateTo', args: { route: isCrewAbilitiesInset	? SC.Ui_windows.ROUTE.CREW_ASSIGNMENTS_MANAGEMENT
																																: SC.Ui_windows.ROUTE.CREW_ABILITIES_MANAGEMENT } }]"
				_name =				'btn_replace_crew'
			)
		)
	)
)


(def element CrewPanelEmptyButtons (_isSmallPanel:bool = false)
	(scope
		(macro PULL_SHIP_ID)
		(struct shipInfo = PULL_OWN_SHIP(_playerShipId = "playerShipId"))

		(var crewData:dhComponent =			"getSingleComponent(CC.crewData)")
		(var freeBarracksSlots:number =		"crewData.freeBarracksSlots ?: 0"			(event "crewData.evFreeBarracksSlotsChanged"))

		(var lastBoardedCrewId:number =		"shipInfo.shipComponent.lastBoardedCrewId ?: 0"	(event "shipInfo.shipComponent.evLastBoardedCrewIdChanged")
																							(event "shipInfo.shipComponent.evUpdate"))

		(var isDemoWithoutStats:bool =		"shipInfo.shipComponent.group == SC.Ships.SHIP_GROUPS.DEMO_WITHOUT_STATS || shipInfo.shipComponent.group == SC.Ships.SHIP_GROUPS.DEMO_WITHOUT_STATS_PREM")
		(var isWithoutCrewPenalty:bool =	"shipInfo.shipComponent && shipInfo.shipComponent.isWithoutCrewPenalty" (event "shipInfo.shipComponent.evUpdate"))
		(var isLocked:bool =				"shipInfo.ownShipComponent.isLocked"		(event "shipInfo.ownShipComponent.evUpdateLock"))
		(var isInFormation:bool =			"shipInfo.ownShipComponent.isInFormation"	(event "shipInfo.ownShipComponent.evUpdateLock"))
		(var crewId:number =				"shipInfo.ownShipComponent.crewId"			(event "shipInfo.ownShipComponent.evCrewChanged"))
		(var ownShipTimeRent:number =		"shipInfo.ownShipComponent.timeRent ?: 0"	(event "shipInfo.ownShipComponent.evUpdateDockState"))

		(struct crew =		PULL_CREW(_crewId = "lastBoardedCrewId"))
		(var hasLastBoardedCrew:bool =					"crew.entity != null")
		(var otherShipId:number =						"crew.component.shipID"					(event "crew.component.evShipChanged"))
		(var lastBoarderCrewSpecializationId:number =	"crew.component.specializationID ?: 0"	(event "crew.component.evChanged"))
		(var isReturnLastCrewButtonVisible:bool =		"crewId == 0 && lastBoardedCrewId != 0 && hasLastBoardedCrew")

		(var otherShipEntity:dhEntity =	"getPrimaryEntity(CC.ownShip, otherShipId)")
		(var isOtherShipExist:bool =	"otherShipEntity != null")
		(var isOtherShipLocked:bool =	"otherShipEntity.ownShip.isLocked" (event "otherShipEntity.ownShip.evUpdateLock"))

		(var isLastBoardedCrewLocked:bool =		"isOtherShipExist && isOtherShipLocked")
		(var canAssignWithoutRetrain:bool =		"lastBoarderCrewSpecializationId == playerShipId || isWithoutCrewPenalty")
		(var isReturnButtonDisabled:bool =		"isLocked || isInFormation || isLastBoardedCrewLocked")

		(var methodType:str =	"canAssignWithoutRetrain ? 'inputMapping.onAction' : 'inputMapping.onRequest'")
		(var methodName:str =	"canAssignWithoutRetrain ? CREW_ACTIONS.ASSIGN_TO_SHIP : CREW_ACTIONS.OPEN_CREW_RETRAIN_WINDOW")

		(var isRentalOwnShip:bool = "ownShipTimeRent > 0")

		(var lockRecruitReasonStatus:dict = "	(freeBarracksSlots <= 0) && isRentalOwnShip		? {	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.NEGATIVE,
																									text: 'IDS_UNABLE_HIRE_CREW_NO_PLACE_IN_BARRACKS_TOOLTIP' } :
												isDemoWithoutStats								? {	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.ATTENTION,
																									text: 'IDS_RECRUIT_CREW_DENY_REASON_CURRENT_SHIP_IS_DEMO_WITHOUT_STATS' } :
												isInFormation									? {	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.ATTENTION,
																									text: 'IDS_ASSIGN_CREW_DENY_REASON_CURRENT_SHIP_IN_FORMATION' } :
												isLocked 										? {	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.ATTENTION,
																									text: 'IDS_ASSIGN_CREW_DENY_REASON_CURRENT_SHIP_IN_BATTLE' }
																								: null")

		(struct crewHireNewTip =			PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE_NEW"))
		(struct crewHireRepeatNewTip =		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE_NEW_REPEAT"))

		(var newTipId:number = "crewHireNewTip.isActive				? SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE_NEW :
								crewHireRepeatNewTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE_NEW_REPEAT
																	: SC.Context_guiding_tip.TIP_TYPE.NONE")

		(var isNewTipVisible:bool =	"newTipId != SC.Context_guiding_tip.TIP_TYPE.NONE")


		(var buttonSize:number =	"_isSmallPanel ? SIZE.SMALL : SIZE.MEDIUM")
		(var buttonMargin:number =	"_isSmallPanel ? S : SXS")
	)

	(style (width = 100%))


	(element HorizontalDividerTwoPx)

	(block
		(style (bind marginTop "isReturnLastCrewButtonVisible ? buttonMargin : 0"))

		(controller $Instance renderer='DefaultButton'
			(bind enabled "isReturnLastCrewButtonVisible")
			(args
				_label =			'IDS_CREW_HIRE_LAST_CREW'
				_width =			220px
				_size =				"buttonSize"
				_enabled =			"!isReturnButtonDisabled"
				_isTransactionBtn =	true
				_focusIndex =		0
				_methods =			"[{ type: methodType, name: methodName, args: { crewId: lastBoardedCrewId, shipId: playerShipId } }]"
			)
		)

		(controller $Tooltip
			(bind enabled "isReturnLastCrewButtonVisible")
			(renderer='CrewTooltip')
			(args
				_crewId =					"lastBoardedCrewId"
				_targetShipId =				"playerShipId"
				_noContextMenuInstruction =	true
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)

	(block
		(style (bind marginTop "buttonMargin"))

		(element DefaultButton
			_label =			'IDS_HIRE_NEW_CREW'
			_type =				"SC.Ui_styles.BUTTON_TYPE.SECONDARY"
			_width =			220px
			_size =				"buttonSize"
			_enabled =			"!lockRecruitReasonStatus"
			_isTransactionBtn =	true
			_focusIndex =		1
			_methods =			"[{ type: 'inputMapping.onRequest', name: CREW_ACTIONS.OPEN_HIRE_WINDOW, args: {} }]"
			_name =				'recruit'
		)

		(controller $Tooltip
			(renderer = 'SimpleStatusTooltip')
			(bind enabled "lockRecruitReasonStatus != null")
			(args
				_unifiedStatus =	"lockRecruitReasonStatus.unifiedStatus"
				_text =				"lockRecruitReasonStatus.text"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)

		(controller $Instance renderer='GuidingTipHub'
			(bind enabled "isNewTipVisible")
			(args
				_tipId =			"newTipId"
				_tipPositioning =	"TIP_POSITION_RIGHT"
				_modalWindowName =	'ModalWindowCrewManagement'
			)
		)
	)
)
