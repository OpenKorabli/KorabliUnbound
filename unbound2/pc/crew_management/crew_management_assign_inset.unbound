(def constant CREW_MANAGEMENT_RESERVE_ATTENTION_THRESHOLD_AMOUNT 3)

(def element CrewAssignInset ()
	(scope
		(event ItemChooser_sortingOptionSelected)
		(event evSetScrollToFirstItem)
		(event evEnableCrewList)
		(event evShowCrewList)

		(macro PULL_SHIP_ID)

		(macro PULL_ACTIVE_CHILD_ROUTE
			_nodeId =			"SC.Ui_windows.ROUTE.CREW_ASSIGNMENTS_MANAGEMENT"
			_fieldActiveChild =	"'currentCrewManagementSubroute'"
		)

		
		(var crewCollection:dhCollection =				"getCollection(CC.crew)")

		(var crewInBarracksCollectionKey:str =			"'potentiallyVisible.byBusyness.free'")
		(var crewInBarracksCollection:dhCollection =	"crewCollection.getChildByPath(crewInBarracksCollectionKey)")
		(var crewInBarracksItemsLength:number =			"crewInBarracksCollection.length ?: 0")

		(var crewOnShipsCollectionKey:str =				"'potentiallyVisible.byBusyness.busy'")
		(var crewOnShipsCollection:dhCollection =		"crewCollection.getChildByPath(crewOnShipsCollectionKey)")
		(var crewOnShipsItemsLength:number =			"crewOnShipsCollection.length ?: 0")

		(var filteredAndSortedCrewInBarracksCollectionKey:str =			"'potentiallyVisible.byBusyness.free.filtered.sorted'")
		(var filteredAndSortedCrewInBarracksCollection:dhCollection =	"crewCollection.getChildByPath(filteredAndSortedCrewInBarracksCollectionKey)")
		(var filteredAndSortedCrewInBarracksItemsLength:number =		"filteredAndSortedCrewInBarracksCollection.length ?: 0")

		(var filteredAndSortedCrewOnShipsCollectionKey:str =			"'potentiallyVisible.byBusyness.busy.filtered.sorted'")
		(var filteredAndSortedCrewOnShipsCollection:dhCollection =		"crewCollection.getChildByPath(filteredAndSortedCrewOnShipsCollectionKey)")
		(var filteredAndSortedCrewOnShipsItemsLength:number =			"filteredAndSortedCrewOnShipsCollection.length ?: 0")

		(var activeFiltersCollection:dhCollection =			"getCollection(CC.crewFilter)")
		(var activeNationFiltersCollection:dhCollection =	"activeFiltersCollection.getChildByPath('byFilterType.' + SC.Common.CREW_FILTER_TYPE.CREW_NATION + '.selected')")
		(var activeRarityFiltersCollection:dhCollection =	"activeFiltersCollection.getChildByPath('byFilterType.' + SC.Common.CREW_FILTER_TYPE.CREW_TYPE + '.selected')")
		(var activeNationFiltersCollectionLength:number =	"activeNationFiltersCollection.length ?: 0")
		(var activeRarityFiltersCollectionLength:number =	"activeRarityFiltersCollection.length ?: 0")
		

		
		(struct crewSortingIndexPref =				GET_PREF_NUMBER(_option="'ui.crew.sorting.sortIndex'"))
		(var selectedSortingOptionIndex:number =	"crewSortingIndexPref.value")
		(struct crewSortingReversedPref =			GET_PREF_BOOL(_option="'ui.crew.sorting.isReversed'"))
		(var isSortingReversed:bool =				"crewSortingReversedPref.value")
		

		(var isFiltersInfotipVisible:bool = false)

		
		(var crewData:dhComponent =		"getSingleComponent(CC.crewData)")
		(var freeBarracksSlots:number =	"crewData.freeBarracksSlots ?: 0" (event "crewData.evFreeBarracksSlotsChanged"))
		

		(var isCrewAssignmentReserveRouteActive:bool = "currentCrewManagementSubroute == SC.Ui_windows.ROUTE.CREW_ASSIGNMENTS_MANAGEMENT_RESERVE")
		(var isCrewAssignmentShipsRouteActive:bool = "currentCrewManagementSubroute == SC.Ui_windows.ROUTE.CREW_ASSIGNMENTS_MANAGEMENT_SHIPS")

		(var appliedSubCollectionKey:str =		"isCrewAssignmentReserveRouteActive ? filteredAndSortedCrewInBarracksCollectionKey : filteredAndSortedCrewOnShipsCollectionKey")
		(var resultingCollection:dhCollection =	"getCollection(CC.crew).getChildByPath(appliedSubCollectionKey)" watch=false (event "evEnableCrewList"))

		
		(var isCrewListEnabled:bool = false)
		(bind isCrewListEnabled "true"		init=false		(event "evEnableCrewList"))
		(bind isCrewListEnabled "false"		init=false		(bind trigger "currentCrewManagementSubroute"))

		(var isCrewListVisible:bool = false)
		(bind isCrewListVisible "true"		init=false		(event "evShowCrewList"))
		(bind isCrewListVisible "false"		init=false		(bind trigger "currentCrewManagementSubroute"))
		
	)

	(dispatch evEnableCrewList	dir="EventDirection.NONE"	delay="0.15"	on='addedToStage'	(bind trigger "currentCrewManagementSubroute"))
	(dispatch evShowCrewList	dir="EventDirection.NONE"	delay="0.6"							(event "evEnableCrewList"))

	(bindcall externalCall "'direct.action'"	"['option.set',		[ 'ui.crew.sorting.sortIndex',	$event.selectedIndex ]]"	(event "ItemChooser_sortingOptionSelected"))
	(bindcall externalCall "'direct.action'"	"['option.set',		[ 'ui.crew.sorting.isReversed',	$event.direction ]]"		(event "ItemChooser_sortingOptionSelected"))

	(bindcall externalCall 'sound.playSetSoundDirect' "['window', 'openScreen']" init=false watch=false on='addedToStage')

	(dispatch evSetScrollToFirstItem	dir="EventDirection.DOWN"	(bind trigger "selectedSortingOptionIndex"))
	(dispatch evSetScrollToFirstItem	dir="EventDirection.DOWN"	(bind trigger "isSortingReversed"))
	(dispatch evSetScrollToFirstItem	dir="EventDirection.DOWN"	(bind trigger "activeNationFiltersCollectionLength"))
	(dispatch evSetScrollToFirstItem	dir="EventDirection.DOWN"	(bind trigger "activeRarityFiltersCollectionLength"))

	(style
		(width = "{ 1280: 698px, 1920: 1073px }")
		(height = 100%)
		(maxHeight = 759px)
	)

	(hblock
		(style (width = 100%) (height = 32px))

		(hblock
			(class $Fullsize)
			(style (align = "bottom") (bind hitTest "isCrewListVisible"))

			(block
				(element TabButton
					_label =				"tr('IDS_CREW_IN_RESERVE_LIST_TITLE') + ' (' + filteredAndSortedCrewInBarracksItemsLength + ')'"
					_isSelected =			"isCrewAssignmentReserveRouteActive"
					_isDisabled =			"crewInBarracksItemsLength == 0"
					_methods =				"[{ type: 'inputMapping.onAction', name: 'navigateTo', args: { route: SC.Ui_windows.ROUTE.CREW_ASSIGNMENTS_MANAGEMENT_RESERVE } }]"
					_isAttentionMarker =	"freeBarracksSlots <= CREW_MANAGEMENT_RESERVE_ATTENTION_THRESHOLD_AMOUNT"
					_name =					'tab_crew_in_reserve'
				)

				(controller $Tooltip
					(bind enabled "freeBarracksSlots <= CREW_MANAGEMENT_RESERVE_ATTENTION_THRESHOLD_AMOUNT")
					(renderer = 'SimpleStatusTooltip')
					(args
						_unifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
						_text =				"freeBarracksSlots > 0	? subst('IDS_TAB_HINT_CREW_RESERVE_FEW_SPACE_LEFT', [], { count: freeBarracksSlots }, freeBarracksSlots)
																	: 'IDS_TAB_HINT_CREW_RESERVE_NO_SPACE_LEFT'"
					)
					(macro DEFAULT_TOOLTIP_BEHAVIOUR)
				)
			)

			(element TabButton
				_label =				"tr('IDS_CREW_ON_SHIPS_LIST_TITLE') + ' (' + filteredAndSortedCrewOnShipsItemsLength + ')'"
				_isSelected =			"isCrewAssignmentShipsRouteActive"
				_isDisabled =			"crewOnShipsItemsLength == 0"
				_methods =				"[{ type: 'inputMapping.onAction', name: 'navigateTo', args: { route: SC.Ui_windows.ROUTE.CREW_ASSIGNMENTS_MANAGEMENT_SHIPS } }]"
				_name =					'tab_crew_on_ships'
			)
		)

		(hblock
			(block
				(style (marginRight = "XXS"))

				(element ImageButton
					_width =			24px
					_height =			24px
					_backgroundImage =	"isSortingReversed ? 'url:../service_kit/buttons/icons/sort_up.png' : 'url:../service_kit/buttons/icons/sort_down.png'"
					_methods =			"[{ type: 'direct.action', name: 'option.set', args: [ 'ui.crew.sorting.isReversed', !isSortingReversed ] }]"
				)

				(controller $Tooltip
					(renderer='SimpleStatusTooltip')
					(args
						_unifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
						_text =				'IDS_HINT_CREW_FILTERING_SORT_SET_REVERSE'
					)
					(macro DEFAULT_TOOLTIP_BEHAVIOUR)
				)
			)

			(block
				(style (marginTop = "-XS") (marginRight = "XS"))

				(element ItemChooser
					_items =							"[ 'IDS_CREW_SORT_DEFAULT', 'IDS_CREW_SORT_TYPE', 'IDS_CREW_SORT_LEVEL' ]"
					_curIndex =							"selectedSortingOptionIndex"
					_curDirection =						"isSortingReversed"
					_onItemSelectedEvent =				'sortingOptionSelected'
					_itemChooserTooltipUnifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
					_itemChooserTooltipText =			'IDS_HINT_CREW_FILTERING_SORT'
					_dropDownWidth =					160px
					_name =								'CrewOrdering'
				)
			)

			(block
				(style
					(height = 100%)
					(marginRight = "S")
					(paddingTop = "XS")
					(paddingBottom = "XS")
				)

				(element VerticalDivider)
			)

			(block
				(name = 'CrewFiltersButton')

				(element ImageButton
					_width =			26px
					_height =			24px
					_mouseDown =		"isFiltersInfotipVisible"
					_backgroundImage =	'url:../service_kit/buttons/context/filter.png'
				)

				(controller $Tooltip
					(renderer='SimpleStatusTooltip')
					(args
						_unifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
						_text =				'IDS_TOOLTIP_CREW_FILTERS'
					)
					(macro DEFAULT_TOOLTIP_BEHAVIOUR "0")
				)

				(controller $Tooltip
					(renderer='CrewFiltersInfotip')
					(cache = true)
					(macro DEFAULT_INFOTIP_BEHAVIOUR "1")
					(align = "right|innerTop")
					(offset = { x: 6px, y: 0px })
					(pinOffset = "{ across: 0px, along: 2px }")

					(bind isFiltersInfotipVisible "true" init=false watch=false on='evStartShow')
					(bind isFiltersInfotipVisible "false" init=false watch=false on='evHide')
				)
			)
		)

		(block
			(style
				(position = "absolute")
				(width = 100%)
				(bottom = 0px)
			)

			(element HorizontalDividerTwoPx)
		)
	)

	(block
		(class $Fullsize)
		(style (backgroundColor = "SC.Ui_styles.SERVICE_COLORS.INNER_PANEL"))

		(block
			(bind visible "false")

			(class $FullsizeAbsolute)
			(style (alpha = 0) (visualOffsetY = 10px))

			(controller $Instance renderer='CrewList'
				(bind enabled "isCrewListEnabled")
				(args
					_shipId =		"viewedShipId"
					_collection =	"resultingCollection"
				)
			)

			(controller $Animation
				(bindcall play
					duration = 0.15
					from = "{ alpha: 0, visualOffsetY: 10px, visible: false }"
					to = "{ alpha: 1, visualOffsetY: 0px, visible: true }"
					easing = "Easing.line"
					action = "kill"
					reverse = "!isCrewListVisible"
					(bind trigger "isCrewListVisible")
				)
			)
		)

		
		(block
			(class $MiddleVHAbsolutely)
			(style (hitTest = false) (alpha = 1) (visualOffsetY = 0px))

			(tf
				(class $TextDefaultBold17NM)
				(style (alpha = "TA"))
				(text = "toUpper(tr('IDS_DATA_LOADING'))")
			)

			(controller $Animation
				(bindcall play
					duration = 0.15
					from = "{ alpha: 0, visualOffsetY: 10px }"
					to = "{ alpha: 1, visualOffsetY: 0px }"
					easing = "Easing.line"
					action = "kill"
					reverse = "isCrewListVisible"
					(bind trigger "isCrewListVisible")
				)
			)
		)
		
	)

	(element HorizontalDividerTwoPx)
)
