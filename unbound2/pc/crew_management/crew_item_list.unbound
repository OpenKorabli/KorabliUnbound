(def constant CREW_ITEM_WIDTH 339px)
(def constant CREW_ITEM_HEIGHT 124px)
(def constant MIN_SCREEN_WIDTH_TO_FIT_3 1870px)

(def constant CREW_LIST_CARD_COLORS "{
	BACKGROUND:	0xBF242933,
	FADE:		0x99000000,
	OVER:		0x22FFFFFF
}")


(def element CrewList (_shipId:number = 0, _collection:dhCollection = null)
	(scope
		(event evScrollToBegin)
		(event evScrollToIndex)
		(event evSetScrollToFirstItem)
		(event evScrollAreaValueChanged)
		(event evGuidingTipEnabled)

		(macro STAGE_SIZE)
		(var collectionLen:number = "_collection.length")

		(var stageRelativeWidth:number = "min(stageWidth, 1920)")
		(var isAbleToFit3Cards:bool = "stageRelativeWidth >= MIN_SCREEN_WIDTH_TO_FIT_3")
		(var cardsInRow:number = "isAbleToFit3Cards ? 3 : 2")

		(var hGapSize:number = "round(XS + (S - XS) * (stageRelativeWidth - 1280) / (1920 - 1280))") 
		(var crewTileWidth:number =	"round((CREW_ITEM_WIDTH * cardsInRow) + (hGapSize * (cardsInRow - 1)))")

		(var isGuidingTipEnabled:bool = true)
		(bind isGuidingTipEnabled "false"	init=false watch=false		(event "evScrollAreaValueChanged"))
		(bind isGuidingTipEnabled "true"	init=false watch=false		(event "evGuidingTipEnabled"))

		(var selectedTypeFiltersCollection:dhCollection =	"getCollection(CC.crewFilter).getChildByPath('byFilterType.' + SC.Common.CREW_FILTER_TYPE.CREW_TYPE + '.selected')")
		(var selectedNationFiltersCollection:dhCollection =	"getCollection(CC.crewFilter).getChildByPath('byFilterType.' + SC.Common.CREW_FILTER_TYPE.CREW_NATION + '.selected')")
		(var isAnyFilterShown:bool = "selectedTypeFiltersCollection.length > 0 || selectedNationFiltersCollection.length > 0")
	)

	(dispatch evGuidingTipEnabled delay=1 reset=true (event "evScrollAreaValueChanged"))

	(class $FullsizeAbsolute)

	
	(hblock
		(bind visible "isAnyFilterShown")
		(style
			(width = 100%)
			(hgap = "XS")
			(align = "right")
			(paddingTop = "XS")
			(paddingBottom = "XS")
			(paddingRight = "S")
			(backgroundColor = "NO_COLOR")
		)
		(controller $Repeat renderer='CrewAppliedFilter'
			(bind count "SC.Common.CREW_FILTER_TYPE.ALL.length")
			(args
				_filterType = "SC.Common.CREW_FILTER_TYPE.ALL[$index]"
			)
		)
	)
	

	(scrollArea
		(class $Fullsize)
		(style (backgroundColor = "NO_COLOR"))

		(verticalSlider ScrollBarVLightWithValueChangedEvent)
		(hscrollPolicy = 'off')
		(vscrollPolicy = 'auto')
		(scrollPerItem = true)

		(wheelScrollSpeed = 1.0)
		(wheelScrollAcceleration = 0.9)

		(activeControlsAlpha = 1)
		(inactiveControlsAlpha = 1)
		(animationDuration = 0.2)
		(animationEasing = "Easing.cubic_out")

		(topShadow = 'ScrollAreaShadowTop')
		(bottomShadow = 'ScrollAreaShadowBottom')

		(repeatController = 'crewListItemRenderer')

		(content
			(style
				(width = 100%)
				(paddingLeft = "S")
				(paddingRight = "S")
				(paddingBottom = "S")
				(bind paddingTop "isAnyFilterShown ? 0px : { 720: S, 1080: M }")
				(align = "center")
			)

			(block
				(style
					(bind width "crewTileWidth")
					(flow = "tile_horizontal")
					(bind hgap "hGapSize")
					(vgap = "{ 720: XS, 1080: S }")
				)

				(controller $DynamicRepeat renderer='CrewListItemRenderer' name='crewListItemRenderer'
					(bind count "collectionLen")
					(args
						_shipId =				"_shipId"
						_collection =			"_collection"
						_isGuidingTipEnabled =	"isGuidingTipEnabled"
					)
					(itemWidth =	"CREW_ITEM_WIDTH")
					(itemHeight =	"CREW_ITEM_HEIGHT")
					(itemOffset =	"CREW_ITEM_HEIGHT")
				)
			)
		)

		(bindcall scrollToBegin animated=false (bind trigger "_shipId"))
		(bindcall scrollToBegin animated=false (event "evSetScrollToFirstItem"))
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(hitTest = false)
			(align = "center|middle")
		)

		(controller $Instance renderer='NoCrewInListPlug'
			(bind enabled "collectionLen == 0")
			(args
				_text = 'IDS_NO_CREW_FOUND_WITH_APPLIED_FILTERING'
			)
		)
	)
)

(def element NoCrewInListPlug (_text:str)
	(tf
		(class $TextDefault17NM)
		(style (textAlign = "center") (alpha = "TC"))
		(bind text "_text")
	)
)

(def element CrewListItemRenderer (_collection:dhCollection, _shipId:number = 0, _isGuidingTipEnabled:bool = false)
	(scope
		(event evCrewIdChanged)

		(macro MOUSE_HANDLER_SCOPE)

		(var crewData:dhComponent =			"getSingleComponent(CC.crewData)")
		(var freeBarracksSlots:number =		"crewData.freeBarracksSlots ?: 0"	(event "crewData.evFreeBarracksSlotsChanged"))
		(var canDisassignCrew:bool =		"freeBarracksSlots > 0")

		(var shipTargetOwnEntity:dhEntity =	"getPrimaryEntity(CC.ownShip, _shipId)")
		(var targetShipInfo:dhComponent =	"shipTargetOwnEntity.ship" (event "shipTargetOwnEntity.ship.evUpdate"))

		(var shipSubtype:str =				"targetShipInfo.subtype ?: ''")
		(var isWithoutCrewPenalty:bool =	"targetShipInfo.isWithoutCrewPenalty")

		(var resourceEntity:dhEntity =		"getSingleEntity(CC.accountResource)")
		(var operationsAccountLocked:bool =	"resourceEntity.accountResource.operationsLocked" (event "resourceEntity.accountResource.evOperationsLockChanged"))


		(struct crew =	PULL_CREW_BY_ENTITY_INDEX(_id = "_collection[$index].id"))

		(var crewId:number =			"crew.component.id ?: 0")
		(var baseUrl:str =				"crew.component.baseUrl ?: ''"				(event "crew.component.evRankChanged"))
		(var overlayUrl:str =			"crew.component.overlayUrl ?: ''"			(event "crew.component.evRankChanged"))
		(var classificationId:number =	"crew.component.classificationId ?: 0"		(event "crew.component.evClassificationIdChanged"))
		(var allSkillPoints:number =	"crew.component.allSkillPoints ?: 0"		(event "crew.component.evLevelUp"))
		(var timeRentTimeStamp:number =	"crew.component.timeRent ?: 0"				(event "crew.component.evTimeRentChanged") (event "crew.component.evChanged"))
		(var canMove:bool =				"crew.component && crew.component.canMove"	(event "crew.component.evChanged"))
		(var crewNation:str =			"crew.component.nation ?: ''"				(event "crew.component.evChanged"))
		(var peculiarityType:str =		"crew.component.peculiarity"				(event "crew.component.evChanged"))
		(var specializationID:number =	"crew.component.specializationID ?: 0"		(event "crew.component.evChanged"))
		(var shipId:number =			"crew.component.shipID ?: 0"				(event "crew.component.evShipChanged"))
		(var isCrewFireAvailable:bool =	"crew.component.canDismiss"					(event "crew.component.evChanged"))
		(var isInBarracks:bool =		"crew.component.isInBarracks")

		(struct peculiarityPref = GET_PREF_BOOL(_option = "'ui.peculiarityEnabled'"))
		(var isPeculiarityDisabled:bool = "!peculiarityPref.value && peculiarityType")

		(var crewShipId:number =				"isInBarracks ? specializationID : shipId")

		
		(var isCrewSpecialization:bool =		"specializationID > 0")
		(var isEmptyCrew:bool =					"crewNation == SC.Common.NATION.COMMON")
		(var isCrewNationSpecialization:bool =	"!isCrewSpecialization && !isEmptyCrew")
		

		(var ownShipEntity:dhEntity =	"getPrimaryEntity(CC.ownShip, shipId)")

		(var isThisLocked:bool =		"ownShipEntity.ownShip.isLocked"		(event "ownShipEntity.ownShip.evUpdateLock"))
		(var isThisInFormation:bool =	"ownShipEntity.ownShip.isInFormation"	(event "ownShipEntity.ownShip.evUpdateLock"))

		(var isTargetLocked:bool =		"shipTargetOwnEntity.ownShip.isLocked"		(event "shipTargetOwnEntity.ownShip.evUpdateLock"))
		(var isTargetFormation:bool =	"shipTargetOwnEntity.ownShip.isInFormation"	(event "shipTargetOwnEntity.ownShip.evUpdateLock"))
		(var targetCrewId:number =		"shipTargetOwnEntity.ownShip.crewId ?: 0"	(event "shipTargetOwnEntity.ownShip.evCrewChanged"))

		(struct targetCrew =	PULL_CREW(_crewId = "targetCrewId"))

		(var isFromBarracks:bool =			"shipId == 0")
		(var hasSpaceToAssignCrew:bool =	"isFromBarracks || canDisassignCrew || (!canDisassignCrew && targetCrewId == 0)")
		(var crewLockReason:str =			"isThisInFormation		? 'IDS_CREW_LIST_OVERLAY_STATUS_THIS_IN_DIVISION' :
											 isThisLocked			? 'IDS_CREW_LIST_OVERLAY_STATUS_THIS_IN_BATTLE' :
											 isTargetFormation		? 'IDS_CREW_LIST_OVERLAY_STATUS_TARGET_IN_DIVISION' :
											 isTargetLocked			? 'IDS_CREW_LIST_OVERLAY_STATUS_TARGET_IN_BATTLE' :
											 !hasSpaceToAssignCrew	? 'IDS_CREW_LIST_OVERLAY_STATUS_BARRACK_IS_FULL'
																	: ACTION_DENY_REASON_NONE")

		(var isRental:bool = "timeRentTimeStamp > 0")
		(var isDisabledAssign:bool = "targetCrewId == 0	? crew.component && !canMove
														: crew.component && (!canMove || (targetCrew.entity && !targetCrew.component.canMove))" (event "targetCrew.component.evChanged"))

		(var isCrewCompatibleShipBySpecialList:bool =	"indexOf(targetShipInfo.fullName, crew.component.shipsToSeat) > -1"				(event "crew.component.evChanged") (event "targetShipInfo.evUpdate"))
		(var isCrewCompatibleShipByNation:bool =		"indexOf(targetShipInfo.nation, crew.component.nationsToSeat) > -1"				(event "crew.component.evChanged") (event "targetShipInfo.evUpdate"))
		(var isCrewCompatibleShipByGroup:bool =			"indexOf(targetShipInfo.group, crew.component.shipGroups) > -1"					(event "crew.component.evChanged") (event "targetShipInfo.evUpdate"))

		(var isCrewCompatibleShipBySpecialization:bool =	"specializationID == _shipId")
		(var crewHasCompatibleShip:bool =					"isCrewCompatibleShipBySpecialList || isCrewCompatibleShipByNation || isCrewCompatibleShipByGroup")
		(var isCrewCompatibleForTargetShip:bool =			"isRental			? isCrewCompatibleShipBySpecialization :
															 isDisabledAssign	? false
																				: crewHasCompatibleShip")

		(var isSkillInfoButtonVisible:bool =	"!isThisInFormation")
		(var isToSkillsButtonVisible:bool =		"shipId && !isThisInFormation")

		(var canAssignWithoutRetrain:bool =		"isCrewCompatibleShipBySpecialization || isWithoutCrewPenalty || specializationID == 0 || isDisabledAssign || isRental")
		(var crewStatusIcon:str =				"!isCrewCompatibleForTargetShip ? 'url:../crew_commander/icons/negative_big.png' : 'url:../crew_commander/icons/retraining_big.png'")

		(var forceOverlayStatusVisible:bool =	"isThisInFormation || isThisLocked")
		(var isOverlayedStatusVisible:bool =	"crewLockReason != ACTION_DENY_REASON_NONE && (rollOver || forceOverlayStatusVisible)")

		(var isFaded:bool =			"isOverlayedStatusVisible || !isCrewCompatibleForTargetShip || isDisabledAssign")
		(var isClickable:bool =		"!isOverlayedStatusVisible && !operationsAccountLocked && isCrewCompatibleForTargetShip && !isDisabledAssign")
		(var isHighlighted:bool =	"rollOver && !mouseDown && isClickable")

		(var isEmptyCrewHireRequest:bool =	"isEmptyCrew || (isCrewNationSpecialization && !isWithoutCrewPenalty)")
		(var externalCallType:str =			"!isClickable											? '' :
											 !canAssignWithoutRetrain || isEmptyCrewHireRequest		? 'inputMapping.onRequest'
																									: 'inputMapping.onAction'")
		(var externalCallName:str =			"isEmptyCrewHireRequest									? CREW_ACTIONS.OPEN_HIRE_EMPTY :
											 isClickable && !canAssignWithoutRetrain				? CREW_ACTIONS.OPEN_CREW_RETRAIN_WINDOW
																									: CREW_ACTIONS.ASSIGN_TO_SHIP")
		(var isSpineAnimation:bool = "crew.component.isAnimated")
		(var isContextMenuDisabled:bool =	"!shipId && !isCrewFireAvailable")

		(struct crewHireTip =		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE"))
		(struct crewHireRepeatTip =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE_REPEAT"))
		(var guidingTipId:number =	"crewHireTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE :
									 crewHireRepeatTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE_REPEAT
																: SC.Context_guiding_tip.TIP_TYPE.NONE")
		(var isNewTipVisible:bool =	"guidingTipId != SC.Context_guiding_tip.TIP_TYPE.NONE && $index == 0 && isFromBarracks && _isGuidingTipEnabled")

		(var hasBeenRolledOver:bool = false)
		(bind hasBeenRolledOver "true" init=false (bind trigger "rollOver"))
	)

	(style (width = "CREW_ITEM_WIDTH") (height = "CREW_ITEM_HEIGHT"))

	(macro MOUSE_EVENTS_DISPATCHER)

	(hblock
		(class $Fullsize)
		(style
			(padding = "SXS")
			(paddingRight = "S")
			(backgroundColor = "CREW_LIST_CARD_COLORS.BACKGROUND")
		)

		
		(block
			(bind name "'CrewList_' + crewId")
			(bindcall externalCall "externalCallType" "[externalCallName, { crewId: crewId, shipId: _shipId }]" watch=false on='leftClick')

			(class $FullsizeAbsolute)
			(style (padding = "-SXS") (paddingRight = "-S"))

			(block
				(class $Fullsize)
				(style (backgroundColor = "CREW_LIST_CARD_COLORS.OVER") (alpha = 0))

				(controller $Animation
					(bindcall play
						duration = 0.1
						from = "{ alpha: 0 }"
						to = "{ alpha: 1}"
						reverse = "!isHighlighted"
						(bind trigger "isHighlighted")
					)
				)
			)

			(controller $Tooltip
				(bind enabled "!isContextMenuDisabled")
				(renderer = 'CrewListMenu')
				(args
					_crewId =	"crewId"
					_shipId =	"_shipId"
				)
				(macro DEFAULT_MENU_BEHAVIOUR "1")
			)

			(controller $Tooltip
				(renderer='CrewTooltip')
				(args
					_crewId =					"crewId"
					_targetShipId =				"_shipId"
					_noContextMenuInstruction =	"isContextMenuDisabled"
				)
				(macro DEFAULT_TOOLTIP_BEHAVIOUR)
			)
		)
		

		
		(block
			(style
				(hitTest = false)
				(marginRight = "SXS")
			)

			(element CrewPortraitWithBGR
				_baseUrl =			"baseUrl"
				_overlayUrl =		"overlayUrl"
				_classificationId =	"classificationId"
				_portraitWidth =	102px
				_portraitHeight =	94px
				_borderSize =		3px
				_isSpineAnimation = "isSpineAnimation"
			)

			(block
				(style
					(position = "absolute")
					(bottom = "XS")
					(right = "XS")
				)

				(controller $Instance renderer='CrewSkillPoints'
					(bind enabled "allSkillPoints > 0")
					(args
						_crewId =		"crewId"
						_shipClass =	"shipSubtype"
					)
				)
			)
		)
		

		
		(block
			(style
				(position = "absolute")
				(top = "XS")
				(left = "XS")
			)

			(controller $Instance renderer='PeculiarityDisabledIcon' (bind enabled "isPeculiarityDisabled"))
		)
		

		
		(block
			(class $Fullsize)

			(block
				(style
					(hitTest = false)
					(width = 175px)
					(marginTop = "XS")
					(marginBottom = "M")
				)

				(element CrewNameWithIcon
					_crewId =			"crewId"
					_isCrewNameElided =	true
				)
			)

			
			(block
				(style
					(hitTest = false)
					(width = 100%)
					(bind marginTop "isCrewSpecialization || (isCrewNationSpecialization && shipId) ? 0 : -S")
				)

				(controller $Instance renderer='ShipLineItemNM'
					(bind enabled "isCrewSpecialization || (isCrewNationSpecialization && shipId)")
					(args
						_shipId =	"crewShipId"
						_withFlag =	true
						_width =	'100%'
					)
				)

				(hblock
					(bind visible "isCrewNationSpecialization && !shipId")

					(style (align = "middle") (marginBottom = "-S"))

					(block
						(controller $Instance renderer='NationFlagsTiny'
							(bind enabled "isCrewNationSpecialization && !shipId")
							(args
								_shipCountry = "crewNation"
							)
						)
					)

					(tf
						(class $TextDefaultNM)
						(style (marginLeft = "S") (alpha = "TA"))
						(text = 'IDS_NO_SPECIALIZATION_CREW')
					)
				)

				(block
					(bind visible "isEmptyCrew")

					(style (marginTop = "S"))

					(controller $Instance renderer='StatusLine'
						(bind enabled "isEmptyCrew")
						(args
							_unifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.INFO"
							_text =				'IDS_NO_NATION_CREW'
						)
					)
				)
			)
			
		)
		
	)

	
	(block
		(bind visible "isFaded && !isDisabledAssign")

		(class $FullsizeAbsolute)
		(style
			(hitTest = false)
			(align = "middle|center")
			(backgroundColor = "CREW_LIST_CARD_COLORS.FADE")
		)

		(tf
			(class $TextDefaultBoldNM)
			(style
				(width = 100%)
				(textAlign = "center")
				(textColor = "SC.Ui_styles.SERVICE_COLORS.ORANGE")
				(alpha = 0)
				(visualOffsetY = 15px)
			)

			(bind text "crewLockReason")

			(controller $Animation
				(bindcall play
					init = true
					duration = 0.15
					delay = 0.07
					from = "{ alpha: 0, visualOffsetY: 15px }"
					to = "{ alpha: 1, visualOffsetY: 0px }"
					easing = "Easing.quad_out"
					action = "kill"
					(bind enabled "isOverlayedStatusVisible")
				)

				(bindcall play
					init = true
					duration = 0.15
					delay = 0.07
					from = "{ alpha: 1, visualOffsetY: 0px }"
					to = "{ alpha: 0, visualOffsetY: -15px }"
					easing = "Easing.quad_out"
					action = "kill"
					(bind enabled "!isOverlayedStatusVisible")
				)
			)
		)
	)
	

	
	(block
		(bind visible "!isCrewCompatibleForTargetShip || !canAssignWithoutRetrain")
		(style
			(hitTest = false)
			(position = "absolute")
			(top = "S")
			(right = "S")
			(width = 24px)
			(height = 24px)
			(bind backgroundImage "crewStatusIcon")
		)
	)
	

	
	(block
		(visible = false)

		(style
			(position = "absolute")
			(bottom = "SXS")
			(right = "S")
			(alpha = 0)
			(visualOffsetY = 10px)
		)

		(controller $Instance renderer='CrewListItemRendererButtons'
			(bind enabled "hasBeenRolledOver")
			(args
				_crewId =					"crewId"
				_shipId =					"shipId"
				_isSkillInfoButtonVisible =	"isSkillInfoButtonVisible"
				_isToSkillsButtonVisible =	"isToSkillsButtonVisible"
			)
		)

		(controller $Animation
			(bindcall play
				duration = 0.1
				from = "{ alpha: 0, visualOffsetY: 10px, visible: false }"
				to = "{ alpha: 1, visualOffsetY: 0px, visible: true }"
				reverse = "!rollOver"
				(bind trigger "rollOver")
			)
		)
	)
	

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "isNewTipVisible")
		(args
			_tipId =			"guidingTipId"
			_tipPositioning =	"TIP_POSITION_BOTTOM"
			_modalWindowName =	'ModalWindowCrewManagement'
		)
	)
)

(def element CrewListItemRendererButtons (_crewId:number, _shipId:number, _isSkillInfoButtonVisible:bool, _isToSkillsButtonVisible:bool)
	(style
		(flow = "horizontal")
		(width = 199px)
		(height = 24px)
	)

	(block
		(style (marginRight = 7px))

		(controller $Instance renderer='DefaultButton'
			(bind enabled "_isSkillInfoButtonVisible")
			(args
				_size =		"SIZE.SMALL"
				_width =	96px
				_label =	'IDS_PERSONAL_FILE_BUTTON_LABEL'
				_methods =	"[{ type: 'inputMapping.onRequest', name: CREW_ACTIONS.OPEN_CREW_INFO_WINDOW, args: { _crewId: _crewId } }]"
			)
		)
	)

	(block
		(controller $Instance renderer='DefaultButton'
			(bind enabled "_isToSkillsButtonVisible")
			(args
				_type =		"SC.Ui_styles.BUTTON_TYPE.SECONDARY"
				_size =		"SIZE.SMALL"
				_width =	96px
				_label =	'IDS_TO_ABILITIES_BUTTON'
				_methods =	"[{ type: 'inputMapping.onAction', name: 'selectShip', args: { shipId: _shipId } }]"
			)
		)
	)
)