(def constant HELP_BATTLE_COMMANDS {
		'Default':		[{	text: 'IDS_ART_CAMERA',										commands: ["Cmd.CMD_ART_CAMERA"]},
						{	text: 'IDS_FIXING_TARGET_POSITION',							commands: ["Cmd.CMD_FIXING_TARGET_POSITION"]},
						{	text: 'IDS_DISABLING_AA_AND_ATBA',							commands: ["Cmd.CMD_SWITCH_ATBA_AIRDEFENSE"]},
						{	text: 'IDS_SET_PRIORITY_SECTOR',							commands: ["Cmd.CMD_SET_PRIORITY_SECTOR"]}],
		'AirCarrier':	[{	text: 'IDS_AIRPLANE_LAND',									commands: ["Cmd.CMD_LAND"]},
						{	text: 'IDS_ART_CAMERA',										commands: ["Cmd.CMD_ART_CAMERA"]},
						{	text: 'IDS_FIXING_TARGET_POSITION',							commands: ["Cmd.CMD_FIXING_TARGET_POSITION"]},
						{	text: 'IDS_DISABLING_AA_AND_ATBA',							commands: ["Cmd.CMD_SWITCH_ATBA_AIRDEFENSE"]},
						{	text: 'IDS_SET_PRIORITY_SECTOR',							commands: ["Cmd.CMD_SET_PRIORITY_SECTOR"]}],
		'Submarine':	[{	text: 'IDS_CRUISE_DEEP_UP',									commands: ["Cmd.CRUISE_DEEP_UP"]},
						{	text: 'IDS_CRUISE_DEEP_DOWN',								commands: ["Cmd.CRUISE_DEEP_DOWN"]},
						{	text: 'IDS_ART_CAMERA',										commands: ["Cmd.CMD_ART_CAMERA"]},
						{	text: 'IDS_FIXING_TARGET_POSITION',							commands: ["Cmd.CMD_FIXING_TARGET_POSITION"]}]}
)

(def constant HELP_COMMON_COMMANDS	[{	text: 'IDS_FREE_CURSOR',						commands: ["Cmd.CMD_FREE_CURSOR"]},
									{	text: 'IDS_HELP_PRIORITY_PMK_PVO',				commands: ["Cmd.CMD_FREE_CURSOR", "Cmd.CMD_INTERACTIVE_OBJECTS_MOUSE_LEFT_DOWN"]},
									{	text: 'IDS_SHIP_PARAMS_HOTKEY',					commands: ["Cmd.CMD_SHIP_PARAMS"]},
									{	text: 'IDS_HELP_MAP_SCALE',						commands: ["Cmd.MAP_SCALE_PLUS", "Cmd.MAP_SCALE_MINUS"]},
									{	text: 'IDS_TACTICAL_MAP',						commands: ["Cmd.CMD_TACTICAL_MAP"]},
									{	text: 'IDS_CMD_QUICK_COMMANDS_WINDOW',			commands: ["Cmd.CMD_QUICK_COMMANDS_WINDOW"]},
									{	text: 'IDS_EXPANDED_INFO',						commands: ["Cmd.CMD_ICONS"]}]
)

(def constant HELP_PECULIARITIES_DATA "{
		SC.Common.SHIP_TYPE.DESTROYER:	[
			{ descriptionLen: 2 },
			{ descriptionLen: 1 },
			{ descriptionLen: 1 }
		],
		SC.Common.SHIP_TYPE.CRUISER:	[
			{ descriptionLen: 1 },
			{ descriptionLen: 1 },
			{ descriptionLen: 2 }
		],
		SC.Common.SHIP_TYPE.BATTLESHIP:	[
			{ descriptionLen: 2 },
			{ descriptionLen: 2 },
			{ descriptionLen: 1 }
		],
		SC.Common.SHIP_TYPE.AIRCARRIER:	[
			{ descriptionLen: 1 },
			{ descriptionLen: 2 },
			{ descriptionLen: 1 }
		],
		SC.Common.SHIP_TYPE.SUBMARINE:	[
			{ descriptionLen: 2 },
			{ descriptionLen: 2 },
			{ descriptionLen: 2 }
		]
}")

(def constant HELP_INDICATORS_MAP "{	DEFAULT_READY:							{ iconPath: 'swf:../battle_hud/help_screen/guns_conditions_svg/guns_conditions_svg.swf:icon_crosshair_ship_ready',					text: 'IDS_HELP_READY'}, #svg
										DEFAULT_FOCUSING:						{ iconPath: 'swf:../battle_hud/help_screen/guns_conditions_svg/guns_conditions_svg.swf:icon_crosshair_ship_aiming',					text: 'IDS_HELP_FOCUSING'}, #svg
										DEFAULT_RELOAD:							{ iconPath: 'swf:../battle_hud/help_screen/guns_conditions_svg/guns_conditions_svg.swf:icon_crosshair_ship_reload',					text: 'IDS_HELP_RELOAD'}, #svg
										DEFAULT_TEMPORARILY_DISABLED:			{ iconPath: 'swf:../battle_hud/help_screen/guns_conditions_svg/guns_conditions_svg.swf:icon_crosshair_ship_destroyed',				text: 'IDS_HELP_TEMPORARILY_DISABLED'}, #svg
										SUBMARINE_READY:						{ iconPath: 'swf:../battle_hud/help_screen/guns_conditions_svg/guns_conditions_svg.swf:icon_crosshair_submarine_ready',				text: 'IDS_HELP_READY'}, #svg
										SUBMARINE_FOCUSING:						{ iconPath: 'swf:../battle_hud/help_screen/guns_conditions_svg/guns_conditions_svg.swf:icon_crosshair_submarine_aiming',			text: 'IDS_HELP_FOCUSING'}, #svg
										SUBMARINE_RELOAD:						{ iconPath: 'swf:../battle_hud/help_screen/guns_conditions_svg/guns_conditions_svg.swf:icon_crosshair_submarine_reload',			text: 'IDS_HELP_RELOAD'}, #svg
										SUBMARINE_TEMPORARILY_DISABLED:			{ iconPath: 'swf:../battle_hud/help_screen/guns_conditions_svg/guns_conditions_svg.swf:icon_crosshair_submarine_destroyed',			text: 'IDS_HELP_TEMPORARILY_DISABLED'}, #svg
										FIRE:									{ iconPath: 'url:../battle_hud/help_screen/conditions/burn.png',															text: 'IDS_HELP_FIRE'},
										FLOODING:								{ iconPath: 'url:../battle_hud/help_screen/conditions/flood.png',															text: 'IDS_HELP_FLOODING'},
										TORPEDO_FOCUSING:						{ iconPath: 'url:../battle_hud/help_screen/conditions/waved.png',															text: 'IDS_HELP_TORPEDO_FOCUSING'},
										OIL_LEAK_PENDING:						{ iconPath: 'url:../battle_hud/help_screen/conditions/oil_leak_pending.png',												text: 'IDS_HELP_OIL_LEAK_PENDING'},
										OIL_LEAK:								{ iconPath: 'url:../battle_hud/help_screen/conditions/oil_leak.png',														text: 'IDS_HELP_OIL_LEAK'},
										HYDROPHONE:								{ iconPath: 'url:../battle_hud/help_screen/conditions/hydrophone.png',														text: 'IDS_HELP_HYDROPHONE'},
										DETECT:									{ iconPath: 'url:../battle_hud/help_screen/detection/icon_detected.png',													text: 'IDS_HELP_DETECT'},
										DEFINITELY_DETECT:						{ iconPath: 'url:../battle_hud/help_screen/detection/icon_detected_garant.png',												text: 'IDS_HELP_DEFINITELY_DETECT'},
										PLANE_DETECT:							{ iconPath: 'url:../battle_hud/help_screen/detection/icon_detected_plane.png',												text: 'IDS_HELP_PLANE_DETECT'},
										SHIP_WAS_FOUND_BY_RADAR:				{ iconPath: 'url:../battle_hud/help_screen/detection/icon_detected_rls.png',												text: 'IDS_HELP_SHIP_WAS_FOUND_BY_RADAR'},
										SHIP_WAS_FOUND_BY_HYDROACOUSTIC:		{ iconPath: 'url:../battle_hud/help_screen/detection/icon_detected_sonar.png',												text: 'IDS_HELP_SHIP_WAS_FOUND_BY_HYDROACOUSTIC'},
										SHIP_AT_GUNPOINT:						{ iconPath: 'url:../battle_hud/help_screen/detection/icon_pointed_guns.png',												text: 'IDS_HELP_SHIP_AT_GUNPOINT'},
										SALVO_AT_SHIP:							{ iconPath: 'url:../battle_hud/help_screen/detection/icon_volley.png',														text: 'IDS_HELP_SALVO_AT_SHIP'},
										SONAR_SHADOW:							{ iconPath: 'url:../battle_hud/help_screen/detection/sonar_shadow.png',													text: 'IDS_HELP_SONAR_SHADOW'},
										HYDROPHONE_SHADOW:						{ iconPath: 'url:../battle_hud/help_screen/detection/hydrophone_shadow.png',												text: 'IDS_HELP_HYDROPHONE_SHADOW'},
										CAPTURE_CONTROL:						{ iconPath: 'url:../battle_hud/help_screen/other/icon_personal_lock_enemy_ship.png',										text: 'IDS_HELP_CAPTURE_CONTROL'},
										LOCATION_REVEALED:						{ iconPath: 'url:../battle_hud/help_screen/other/icon_direction_tracked.png',												text: 'IDS_HELP_LOCATION_REVEALED'},
										ZONE_IN_SMOKE:							{ iconPath: 'url:../battle_hud/help_screen/other/icon_smoke_screen.png',													text: 'IDS_HELP_ZONE_IN_SMOKE'},
										SHIP_IN_SMOKE:							{ iconPath: 'url:../battle_hud/help_screen/other/icon_smoke.png',															text: 'IDS_HELP_SHIP_IN_SMOKE'},
										FORSAGE_SQUADRONS:						{ iconPath: 'url:../battle_hud/help_screen/other/icon_forsage_indicator.png',												text: 'IDS_HELP_FORSAGE_SQUADRONS'},
										AIRPLANE_THROTTLE_UP:					{ iconPath: 'url:../battle_hud/help_screen/other/icon_take_off_booster.png',												text: 'IDS_HELP_AIRPLANE_THROTTLE_UP'},
										REGENERATION:							{ iconPath: 'url:../battle_hud/help_screen/battle_type_markers/icon_marker_health_active_small.png',						text: 'IDS_HELP_REGENERATION'},
										FAST_RELOAD:							{ iconPath: 'url:../battle_hud/help_screen/battle_type_markers/icon_marker_reload_active_small.png',						text: 'IDS_HELP_FAST_RELOAD'},
										HULL_HEALTH:							{ iconPath: 'url:../battle_hud/help_screen/battle_type_markers/icon_marker_repair_active_small.png',						text: 'IDS_HELP_HULL_HEALTH'},
										WEAPON_DAMAGE:							{ iconPath: 'url:../battle_hud/help_screen/battle_type_markers/icon_marker_damage_active_small.png',						text: 'IDS_HELP_WEAPON_DAMAGE'},
										AIRSHIP:								{ iconPath: 'swf:../battle_hud/help_screen/battle_type_markers_svg/battle_type_markers_svg.swf:icon_ally_payload',					text: 'IDS_HELP_AIRSHIP'},
										ENEMIES_AIRSHIP:						{ iconPath: 'swf:../battle_hud/help_screen/battle_type_markers_svg/battle_type_markers_svg.swf:icon_enemy_payload',					text: 'IDS_HELP_ENEMIES_AIRSHIP'},
										SHIP_DETECT:							{ iconPath: 'url:../battle_hud/help_screen/ship_threats/detected_by_ship.png',												text: 'IDS_HELP_SHIP_DETECT'},
										DETECTED_BY_PLANE:						{ iconPath: 'url:../battle_hud/help_screen/ship_threats/detected_by_plane.png',												text: 'IDS_HELP_BY_PLANE_DETECT'},
										OBSTACLE:								{ iconPath: 'url:../battle_hud/help_screen/ship_threats/collision.png',														text: 'IDS_HELP_OBSTACLE'},
										FIRE_ON_AIRCARRIER:						{ iconPath: 'url:../battle_hud/help_screen/ship_threats/damage.png',														text: 'IDS_HELP_FIRE_ON_AIRCARRIER'},
										TORPEDO:								{ iconPath: 'url:../battle_hud/help_screen/ship_threats/torpedo_alert.png',													text: 'IDS_HELP_TORPEDO'},
										MINES:									{ iconPath: 'url:../battle_hud/help_screen/ship_threats/minefield_alert.png',												text: 'IDS_HELP_MINES'},
										MAIN_GUN:								{ iconPath: 'url:../battle_hud/help_screen/defective_modules/main_caliber_crit.png',										text: 'IDS_HELP_MAIN_GUN'},
										TORPEDOES_APPARAT:						{ iconPath: 'url:../battle_hud/help_screen/defective_modules/torpedo_tube_crit.png',										text: 'IDS_HELP_TORPEDOES_APPARAT'},
										PMK:									{ iconPath: 'url:../battle_hud/help_screen/defective_modules/atba_gun_crit_3.png',											text: 'IDS_HELP_PMK'},
										SONAR:									{ iconPath: 'url:../battle_hud/help_screen/defective_modules/pinger_crit.png',												text: 'IDS_HELP_SONAR'},
										ENGINE:									{ iconPath: 'url:../battle_hud/help_screen/defective_modules/engine_crit.png',												text: 'IDS_HELP_ENGINE'},
										STEERING_MACHINE:						{ iconPath: 'url:../battle_hud/help_screen/defective_modules/path_control_crit.png',										text: 'IDS_HELP_STEERING_MACHINE'},
										AIR_DEFENSE:							{ iconPath: 'url:../battle_hud/help_screen/defective_modules/air_defence_crit.png',											text: 'IDS_HELP_AIR_DEFENSE'},
										MAP_BORDER:								{ iconPath: 'url:../battle_hud/help_screen/active_zones/blue_line.png',														text: 'IDS_HELP_MAP_BORDER'},
										FIGHTER:								{ iconPath: 'url:../battle_hud/help_screen/active_zones/icon_ward_enemy.png',												text: 'IDS_HELP_FIGHTER'},
										MINEFIELD:								{ iconPath: 'url:../battle_hud/help_screen/active_zones/minefield.png',														text: 'IDS_HELP_MINEFIELD'},
										LANDFALL:								{ iconPath: 'url:../battle_hud/help_screen/sight_indicators/icon_depth_terrain_indicator.png',								text: 'IDS_HELP_LANDFALL'}, #svg
										PROJECTILE_FLIGHT_TIME:					{ iconPath: 'url:../battle_hud/help_screen/sight_indicators/icon_bullettime_indicator.png',									text: 'IDS_HELP_PROJECTILE_FLIGHT_TIME'}, #svg
										VOLLEY_RANGE:							{ iconPath: 'url:../battle_hud/help_screen/sight_indicators/icon_distance_indicator.png',									text: 'IDS_HELP_VOLLEY_RANGE'}, #svg
										DETECT_DISTANCE:						{ iconPath: 'url:../battle_hud/help_screen/sight_indicators/icon_visibility_indicator.png',									text: 'IDS_HELP_DETECT_DISTANCE'}, #svg
										AIRCARRIER:								{ iconPath: 'swf:../battle_hud/help_screen/ship_classes_svg/ship_classes_svg.swf:icon_ally_aircarrier',								text: 'IDS_AIRCARRIER' }, 
										BATTLESHIP:								{ iconPath: 'swf:../battle_hud/help_screen/ship_classes_svg/ship_classes_svg.swf:icon_ally_battleship',								text: 'IDS_BATTLESHIP' }, 
										CRUISER:								{ iconPath: 'swf:../battle_hud/help_screen/ship_classes_svg/ship_classes_svg.swf:icon_ally_cruiser',								text: 'IDS_CRUISER' }, 
										DESTROYER:								{ iconPath: 'swf:../battle_hud/help_screen/ship_classes_svg/ship_classes_svg.swf:icon_ally_destroyer',								text: 'IDS_DESTROYER' }, 
										SUBMARINE:								{ iconPath: 'swf:../battle_hud/help_screen/ship_classes_svg/ship_classes_svg.swf:icon_ally_submarine',								text: 'IDS_SUBMARINE' }, 
										ESCORTING_SHIP:							{ iconPath: 'swf:../battle_hud/help_screen/ship_classes_svg/ship_classes_svg.swf:icon_ally_auxiliary',								text: 'IDS_ESCORTING_SHIP' }, 
										HELP_FIGHTER_HE:						{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_fighter_he',						text: 'IDS_HELP_FIGHTER_HE' }, 
										HELP_FIGHTER_AP:						{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_fighter_ap',						text: 'IDS_HELP_FIGHTER_AP' }, 
										HELP_DIVEBOMBER_HE:						{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_bomber_he',						text: 'IDS_HELP_DIVEBOMBER_HE' }, 
										HELP_DIVEBOMBER_AP:						{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_bomber_ap',						text: 'IDS_HELP_DIVEBOMBER_AP' }, 
										HELP_TORPEDOBOMBER:						{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_torpedo_regular',				text: 'IDS_HELP_TORPEDOBOMBER' }, 
										HELP_SKIPBOMBER:						{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_skip_he',						text: 'IDS_HELP_SKIPBOMBER' }, 
										HELP_AIR_SUPPORT_SQUADRONS_HE:			{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_airsupport_bomber_he',			text: 'IDS_HELP_AIR_SUPPORT_SQUADRONS_HE' }, 
										HELP_AIR_SUPPORT_SQUADRONS_DEPTHCHARGE:	{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_airsupport_bomber_depth_charge',	text: 'IDS_HELP_AIR_SUPPORT_SQUADRONS_DEPTHCHARGE' }, 
										HELP_MINEBOMBER:						{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_minebomber_mine_seamine',		text: 'IDS_HELP_MINEBOMBER' }, 
										HELP_SPOTTER:							{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_consumables_scout',				text: 'IDS_HELP_SPOTTER' }, 
										HELP_FIGHTER:							{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_consumables_fighter',			text: 'IDS_HELP_FIGHTER' }, 
										HELP_CALLFIGHTERS_UPGRADE:				{ iconPath: 'swf:../battle_hud/help_screen/aviation_classes_svg/aviation_classes_svg.swf:icon_ally_consumables_fighter_upgrade',	text: 'IDS_HELP_CALLFIGHTERS_UPGRADE' }
								}")

(def constant HELP_INDICATORS_GUN_STATES					"[	HELP_INDICATORS_MAP.DEFAULT_READY,
																HELP_INDICATORS_MAP.DEFAULT_FOCUSING,
																HELP_INDICATORS_MAP.DEFAULT_RELOAD,
																HELP_INDICATORS_MAP.DEFAULT_TEMPORARILY_DISABLED ]")

(def constant HELP_INDICATORS_SUBMARINE_GUN_STATES 			"[	HELP_INDICATORS_MAP.SUBMARINE_READY,
																HELP_INDICATORS_MAP.SUBMARINE_RELOAD,
																HELP_INDICATORS_MAP.SUBMARINE_TEMPORARILY_DISABLED]")

(def constant HELP_INDICATORS_STATES						"[	HELP_INDICATORS_MAP.FIRE,
																HELP_INDICATORS_MAP.FLOODING,
																HELP_INDICATORS_MAP.TORPEDO_FOCUSING ]")

(def constant HELP_INDICATORS_SUBMARINE_STATES				"[	HELP_INDICATORS_MAP.FIRE,
																HELP_INDICATORS_MAP.FLOODING,
																HELP_INDICATORS_MAP.TORPEDO_FOCUSING,
																HELP_INDICATORS_MAP.OIL_LEAK_PENDING,
																HELP_INDICATORS_MAP.OIL_LEAK,
																HELP_INDICATORS_MAP.HYDROPHONE ]")

(def constant HELP_INDICATORS_DETECTION						"[	HELP_INDICATORS_MAP.DETECT,
																HELP_INDICATORS_MAP.DEFINITELY_DETECT,
																HELP_INDICATORS_MAP.PLANE_DETECT,
																HELP_INDICATORS_MAP.SHIP_WAS_FOUND_BY_RADAR,
																HELP_INDICATORS_MAP.SHIP_WAS_FOUND_BY_HYDROACOUSTIC,
																HELP_INDICATORS_MAP.SHIP_AT_GUNPOINT,
																HELP_INDICATORS_MAP.SALVO_AT_SHIP,
																HELP_INDICATORS_MAP.SONAR_SHADOW,
																HELP_INDICATORS_MAP.HYDROPHONE_SHADOW ]")

(def constant HELP_INDICATORS_DIFFERENT						"[	HELP_INDICATORS_MAP.CAPTURE_CONTROL,
																HELP_INDICATORS_MAP.LOCATION_REVEALED,
																HELP_INDICATORS_MAP.ZONE_IN_SMOKE,
																HELP_INDICATORS_MAP.SHIP_IN_SMOKE ]")

(def constant HELP_INDICATORS_AIRCARRIER_DIFFERENT			"[	HELP_INDICATORS_MAP.CAPTURE_CONTROL,
																HELP_INDICATORS_MAP.LOCATION_REVEALED,
																HELP_INDICATORS_MAP.ZONE_IN_SMOKE,
																HELP_INDICATORS_MAP.SHIP_IN_SMOKE,
																HELP_INDICATORS_MAP.FORSAGE_SQUADRONS,
																HELP_INDICATORS_MAP.AIRPLANE_THROTTLE_UP ]")

(def constant HELP_INDICATORS_BATTLE_ARMSRACE_DESIGNATIONS	"[	HELP_INDICATORS_MAP.REGENERATION,
																HELP_INDICATORS_MAP.FAST_RELOAD,
																HELP_INDICATORS_MAP.HULL_HEALTH,
																HELP_INDICATORS_MAP.WEAPON_DAMAGE ]")

(def constant HELP_INDICATORS_BATTLE_AIRSHIPS_DESIGNATIONS	"[	HELP_INDICATORS_MAP.AIRSHIP,
																HELP_INDICATORS_MAP.ENEMIES_AIRSHIP ]")

(def constant HELP_INDICATORS_SHIP_THREATS					"[	HELP_INDICATORS_MAP.SHIP_DETECT,
																HELP_INDICATORS_MAP.DETECTED_BY_PLANE,
																HELP_INDICATORS_MAP.OBSTACLE,
																HELP_INDICATORS_MAP.FIRE_ON_AIRCARRIER,
																HELP_INDICATORS_MAP.TORPEDO,
																HELP_INDICATORS_MAP.MINES ]")

(def constant HELP_INDICATORS_DEGECTIVE_MODULES				"[	HELP_INDICATORS_MAP.MAIN_GUN,
																HELP_INDICATORS_MAP.TORPEDOES_APPARAT,
																HELP_INDICATORS_MAP.PMK,
																HELP_INDICATORS_MAP.SONAR,
																HELP_INDICATORS_MAP.ENGINE,
																HELP_INDICATORS_MAP.STEERING_MACHINE,
																HELP_INDICATORS_MAP.AIR_DEFENSE ]")

(def constant HELP_INDICATORS_ACTIVE_ZONES					"[	HELP_INDICATORS_MAP.MAP_BORDER,
																HELP_INDICATORS_MAP.FIGHTER,
																HELP_INDICATORS_MAP.MINEFIELD ]")

(def constant HELP_INDICATORS_CROSSHAIR						"[	HELP_INDICATORS_MAP.LANDFALL,
																HELP_INDICATORS_MAP.PROJECTILE_FLIGHT_TIME,
																HELP_INDICATORS_MAP.VOLLEY_RANGE,
																HELP_INDICATORS_MAP.DETECT_DISTANCE ]")

(def constant HELP_SHIP_TYPES								"[	HELP_INDICATORS_MAP.AIRCARRIER,
																HELP_INDICATORS_MAP.BATTLESHIP,
																HELP_INDICATORS_MAP.CRUISER,
																HELP_INDICATORS_MAP.DESTROYER,
																HELP_INDICATORS_MAP.SUBMARINE,
																HELP_INDICATORS_MAP.ESCORTING_SHIP ]")

(def constant HELP_AVIATION									"[	HELP_INDICATORS_MAP.HELP_FIGHTER_HE,
																HELP_INDICATORS_MAP.HELP_FIGHTER_AP,
																HELP_INDICATORS_MAP.HELP_DIVEBOMBER_HE,
																HELP_INDICATORS_MAP.HELP_DIVEBOMBER_AP,
																HELP_INDICATORS_MAP.HELP_TORPEDOBOMBER,
																HELP_INDICATORS_MAP.HELP_SKIPBOMBER,
																HELP_INDICATORS_MAP.HELP_AIR_SUPPORT_SQUADRONS_HE,
																HELP_INDICATORS_MAP.HELP_AIR_SUPPORT_SQUADRONS_DEPTHCHARGE,
																HELP_INDICATORS_MAP.HELP_MINEBOMBER,
																HELP_INDICATORS_MAP.HELP_SPOTTER,
																HELP_INDICATORS_MAP.HELP_FIGHTER,
																HELP_INDICATORS_MAP.HELP_CALLFIGHTERS_UPGRADE ]")

(def constant HELP_PANEL_TAB_CONTENT "{
				SC.Common.HELP_PANEL_CATEGORIES.CONTROLS:		'ControlsContent',
				SC.Common.HELP_PANEL_CATEGORIES.MODULES:		'ModulesContent',
				SC.Common.HELP_PANEL_CATEGORIES.INDICATORS:		'IndicatorsContent',
				SC.Common.HELP_PANEL_CATEGORIES.EVENT_INFO:		'EventInfoContent'
}")


(def element HelpPanelWindow ()
	(macro MODAL_WINDOW_INIT)
	(scope
		(event evTabClicked)

		(macro SELF_AVATAR_ID)
		(var selectedAvatarEntity:dhEntity = "getPrimaryEntity(CC.avatar, selfAvatarId)")
		(var avatarComponent:dhComponent = "selectedAvatarEntity.avatar")
		(var subType:str = "avatarComponent.shipType" (event "avatarComponent.evShipTypeChanged"))

		
		(struct isTutorialShownPref = GET_PREF_BOOL(_option="'battle.tutorial.' + toLower(subType) + '.shown'"))
		(var isTutorialShown:bool = "isTutorialShownPref.value")

		(var battleInfoComponent:dhComponent = "getSingleEntity(CC.battleData).battleInfo")
		(var battleTypeGameParamsName:str = "battleInfoComponent.battleTypeGameParamsName")

		(macro CUSTOM_ELEMENT_VISIBILITY_SCOPE)
		(var isExtendedBattleRules:bool = "true") 
		(var hasSpecialBattleRulesTabName:bool = "battleTypeGameParamsName in BATTLE_RULES_SPECIALS || battleTypeGameParamsName in BATTLE_RULES_DEFAULT")
		(var eventTabName:str = "	!hasSpecialBattleRulesTabName	? 'IDS_MODAL_WINDOW_BATTLE_RULES_HEADER' :
									isExtendedBattleRules			? 'IDS_MODAL_WINDOW_' + battleTypeGameParamsName + '_BATTLE_RULES_HEADER'
																	: 'IDS_HELP_TAB_EVENT_INFO'")
		(var currentTabs:array = "isExtendedBattleRules ? SC.Common.HELP_PANEL_CATEGORIES.EXTENDED : SC.Common.HELP_PANEL_CATEGORIES.DEFAULT")

		(struct helpPanelSelectedGroupPref = GET_PREF_NUMBER(_option="'battle.help.helpPanelSelectedGroup'"))
		(var helpPanelSelectedGroup:number = "helpPanelSelectedGroupPref.value")
		(var validHelpPanelSelectedGroup:number = "helpPanelSelectedGroup >= currentTabs.length ? 0 : helpPanelSelectedGroup")

		(var isInstructionVisible:bool = "!isTutorialShown && !isExtendedBattleRules" watch=false)
	)

	(bindcall externalCall 'direct.action' 	"['option.set', ['battle.help.helpPanelSelectedGroup', 0]]"
											on='addedToStage'
											(bind enabled "validHelpPanelSelectedGroup != helpPanelSelectedGroup")
	)
	(bindcall externalCall 'direct.action' "['option.set', ['battle.help.helpPanelSelectedGroup', $event.index]]" init=false watch=false (event "evTabClicked"))
	(bindcall externalCall "!isTutorialShown && subType ? 'direct.action' : ''" "['option.set', ['battle.tutorial.' + toLower(subType) + '.shown', true]]"
																				init=false watch=false
																				(event "startShow")
	)

	(style (align = "center"))
	
	(macro DEFAULT_MODAL_WINDOW_ANIMATION 1.5)

	(macro MODAL_WINDOW_BACKGROUND_BATTLE)

	(element ModalWindowHeaderFullSize
		_windowName = 'IDS_SHOWHELP'
		_hideBackButton = true
		_paddingRight = "M"
		_paddingLeft = "M"
	)

	(block
		(class $Fullsize)
		(style (paddingLeft = "M") (paddingRight = "M") (paddingBottom = "L"))

		(block
			
			(bind visible "isInstructionVisible")
			(style (align = "center") (width = 100%) )

			(tf
				(class $TextDefaultNM)
				(style
					(maxWidth = 380px)
					(marginTop = "S")
					(marginBottom = "S")
					(alpha = "TA")
				)

				(bindcall substitute imageOffset=5 sourceText="tr('IDS_SHOW_HELP_INSTRUCTION')" postfix='' init=true)
			)

			(element HorizontalDividerTwoPx)
		)

		(block
			(style (width = 100%) (align = "center") (marginTop = "{720: SXS, 1080: MS}") (marginBottom = "{ 720:M, 1000:LM }"))

			(element MAIN_TAB_BUTTONS_BLOCK
				(controller $Repeat renderer='MainTabButton'
					(count = "currentTabs.length")
					(args
						_label = "currentTabs[$index] == SC.Common.HELP_PANEL_CATEGORIES.EVENT_INFO ? eventTabName : 'IDS_HELP_TAB_' + currentTabs[$index]"
						_width = "MAIN_TAB_BUTTON_WIDTH.MEDIUM"
						_isSelected = "validHelpPanelSelectedGroup == $index"
						_dispatchedEv = 'evTabClicked'
						_dispatchParams = "{ index: $index }"
						_isLast = "$index == SC.Common.HELP_PANEL_CATEGORIES.ALL.length - 1"
					)
				)
			)
		)

		(scrollArea
			(class $Fullsize)
			(style (backgroundColor = "NO_COLOR"))

			(macro DEFAULT_VERTICAL_SCROLL_PARAMS
				_singleStep = "150"
				_wheelScrollAcceleration = "0.8"
			)

			(content
				(style (width = 100%) (align = "center")) 

				(controller $Animation
					(bindcall play
						keyframes = "[
							{ time:0,		to:{ alpha:0 }},
							{ time:0.05,	to:{ alpha:0 }},
							{ time:0.35,	to:{ alpha:1 }, easing:Easing.sine_in_out}
						]"
						action = "kill"
						(event "evTabClicked")
					)
				)

				(controller $Instance
					(bind renderer "HELP_PANEL_TAB_CONTENT[currentTabs[validHelpPanelSelectedGroup]]")
					(args
						_subType = "subType"
					)
				)
			)
		)

		(block
			(bind visible "isInstructionVisible")
			(style
				(width = 100%)
				(align = "center")
				(marginTop = 20px)
				(marginBottom = "{ 720:M, 1080:130px }")
			)

			(controller $Animation
				(bindcall play	duration=0.2
								from="{alpha: 0}"
								to="{alpha: 1}"
								reverse="isTutorialShown"
								(bind trigger "!isTutorialShown")
				)
			)

			(controller $Instance renderer = 'DefaultButton'
				(bind enabled "isInstructionVisible")
				(args
					_name = 'btn_cancel'
					_label = 'IDS_CLOSE_BTN'
				)
			)
		)
	)
)

(def element ControlsContent (_subType:str)
	(scope
		(var battleCommands:array = "_subType == ShipTypes.SUBMARINE || _subType == ShipTypes.AIRCARRIER	? HELP_BATTLE_COMMANDS[_subType]
																											: HELP_BATTLE_COMMANDS['Default']")
	)
	(style (flow = "horizontal"))

	(block
		(style (marginRight = "{ 1280:LM, 1920:XXXL }") (hgap = "M"))

		(tf
			(class $TextDefaultBold19NM)
			(style (alpha = "TA"))
			(text = "'IDS_' + _subType + 'S'")
		)

		(block
			(controller $Repeat renderer = 'PeculiaritiesItem'
				(bind count "HELP_PECULIARITIES_DATA[_subType].length")
				(args
					_titleIndex = "$index + 1"
					_subType = "_subType"
					_data = "HELP_PECULIARITIES_DATA[_subType][$index]"
				)
			)
		)
	)

	(block
		(tf
			(class $TextDefaultBold19NM)
			(style (alpha = "TA") (marginRight = "M"))
			(text = 'IDS_CONTROL_OPTIONS')
		)

		(tf
			(class $TextDefaultBold17NM)
			(style
				(marginTop = "MS")
				(alpha = "TA")
			)
			(text = 'IDS_HELP_BATTLE_COMMANDS')
		)

		(block
			(style (marginTop = "M") (vgap = "SXS"))
	
			(controller $Repeat renderer='HelpCommandItem'
				(bind count "battleCommands.length")
				(args
					_name = "battleCommands[$index].text"
					_commands = "battleCommands[$index].commands"
				)
			)
		)

		(tf
			(class $TextDefaultBold17NM)
			(style
				(marginTop = "MS")
				(alpha = "TA")
			)
			(text = 'IDS_HELP_COMMON_COMMANDS')
		)

		(block
			(style (marginTop = "M") (vgap = "SXS"))

			(controller $Repeat renderer='HelpCommandItem'
				(bind count "HELP_COMMON_COMMANDS.length")
				(args
					_name = "HELP_COMMON_COMMANDS[$index].text"
					_commands = "HELP_COMMON_COMMANDS[$index].commands"
				)
			)
		)
	)
)

(def element PeculiaritiesItem (_titleIndex:number, _subType:str, _data:dict)
	(style (flow = "horizontal") (marginTop = "M"))

	(block
		(style
			(width = 272px)
			(height = 140px)
			(marginRight = "M")
			(backgroundImage = "'url:../battle_hud/help_screen/peculiarities/' + _subType + '_' + _titleIndex + '.png'")
		)
	)

	(block
		(tf
			(class $TextDefaultBold19NM)
			(style
				(marginTop = "S")
				(leading = -2)
				(alpha = "TA")
			)
			(bind text "'IDS_HELP_PECULIARITIES_' + _subType + '_' + _titleIndex")
		)

		(block
			(style (width = "{1280:320px, 1920:368px}") (marginTop = "M") (vgap = "M"))
		
			(controller $Repeat renderer='PeculiaritiesItemDescription'
				(bind count "_data.descriptionLen")
				(args
					_templateText = "'IDS_HELP_PECULIARITIES_' + _subType + '_' + _titleIndex + '_DESC' + '_' + $index"
				)
			)
		)
	)
)

(def element PeculiaritiesItemDescription (_templateText:str)
	(style (width = 100%))

	(tf
		(class $TextDefault17NM)
		(style (width = 100%) (leading = -2) (alpha = "TC"))
		(text = "_templateText")
	)
)

(def element HelpCommandItem (_name:str, _commands:array)
	(scope
		(var firstCommandName:str = "getPrimaryEntity(CC.commandMappingCommand, _commands[0]).commandMappingCommandName.commandName")
		(struct mainCommand = GET_COMMAND(_commandName="firstCommandName" _binding="0"))
		(struct alternativeCommand = GET_COMMAND(_commandName="firstCommandName" _binding="1"))
		(var mainKeysExists:bool = "_commands.length > 0 && mainCommand.keyCode != 0")
		(var alternativeKeysExists:bool = "_commands.length > 0 && alternativeCommand.keyCode != 0")
	)

	(style (flow = "horizontal") (align = "middle") (hgap = "M"))

	(tf
		(class $TextDefault17NM)
		(style
			(width = 278px)
			(leading = -2)
			(alpha = "TC")
		)

		(text = "_name")
	)

	(hblock
		(hblock
			(style (hgap = "XXS"))
			(controller $Repeat renderer='HotkeyHelpPanel'
				(bind count "_commands.length")
				(bind enabled "mainKeysExists")
				(args
					_commandId = "_commands[$index]"
					_index = 0
				)
			)
		)

		(tf
			(bind visible "mainKeysExists && alternativeKeysExists")
			(class $TextDefault17NM)
			(style
				(marginRight = "S")
				(marginLeft = "S")
				(marginTop = "6px")
				(alpha = "TA")
			)
			(text = 'IDS_OR')
		)

		(hblock
			(style (hgap = "XXS"))
			(controller $Repeat renderer='HotkeyHelpPanel'
				(bind count "_commands.length")
				(bind enabled "alternativeKeysExists || !mainKeysExists")
				(args
					_commandId = "_commands[$index]"
					_index = 1
				)
			)
		)
	)
)

(def element HotkeyHelpPanel (_commandId:number, _index:number)
	(scope
		(var command:dhEntity = "getPrimaryEntity(CC.commandMappingCommand, _commandId)")
		(struct preferenceCommand = GET_COMMAND(_commandName="command.commandMappingCommandName.commandName" _binding="_index"))
	)
	(style (flow = "horizontal"))

	(controller $Instance renderer='HotkeyIndicatorStaticLarge'
		(args
			_commandId = "_commandId"
			_isForceIndex = true
			_forceShownIndex = "_index"
		)
	)
)

(def element ModulesContent (_subType:str)
	(scope
		(var isAirCarrier:bool = "_subType == ShipTypes.AIRCARRIER")
	)
	(style (width = 100%) (marginBottom = "XL") (align = "center"))

	(element ShipEquipmentOnHelpPanel
		_isAirCarrier = "isAirCarrier"
	)
)

(def element ShipEquipmentOnHelpPanel (_isAirCarrier:bool = false)
	(scope
		(var visualSlotDataCollection:dhCollection = "getCollection(CC.visualSlotData)")
		(var ammoBySelfAvatar:dhCollection = "getCollection(CC.visualSlotData).getChildByPath('byAvatarId.' + DEFAULT_AVATAR_ID)")

		(macro SELF_AVATAR_ID)
		(var consumableCollection:dhCollection = "getCollection(CC.battleConsumable)")
		(var consumableBySelfAvatar:dhCollection = "consumableCollection.getChildByPath('byAvatarIdAndSquadronOwner.' + selfAvatarId + '_' + DEFAULT_SQUADRON_OWNER_ID)")

		(var ownCarrier:dhEntity = "getSingleEntity(CC.aircarrier)")
		(var aircarrier:dhComponent = "ownCarrier.aircarrier")
		(var activeSquadron:number = "aircarrier.activeSquadron != -1 ? aircarrier.activeSquadron : 0" (event "aircarrier.evStateChanged"))

		(var consumableSquadronBySelfAvatar:dhCollection = "consumableCollection.getChildByPath('byAvatarIdAndSquadronOwner.' + selfAvatarId + '_' + activeSquadron)")
	)
	(style (flow = "horizontal"))

	(block
		(style (marginRight = "{1280:XXL, 1920:XXXL}"))

		(tf
			(class $TextDefaultBold19NM)
			(style (alpha = "TA") (marginRight = "M"))
			(text = 'IDS_HELP_WEAPONS')
		)

		(block
			(style (vgap = "MS") (marginTop = "MS"))
			(controller $Repeat renderer='ShipEquipmentGroupOnHelpPanelItem'
				(bind count "ammoBySelfAvatar.length")
				(args
					_equipmentItemVisualSlot = "ammoBySelfAvatar.getEntityAtIndex($index)"
				)
			)
		)
	)

	(block
		(bind visible "consumableBySelfAvatar.length > 0")
		(tf
			(class $TextDefaultBold19NM)
			(style (alpha = "TA") (marginRight = "M"))
			(bind text "_isAirCarrier ? 'IDS_HELP_AIRCARRIER_CONSUMABLES' : 'IDS_HELP_CONSUMABLES'")
		)

		(block
			(style (vgap = "MS") (marginTop = "MS"))
			(controller $Repeat renderer='ShipEquipmentGroupOnHelpPanelItem'
				(bind count "consumableBySelfAvatar.length")
				(args
					_equipmentItemVisualSlot = "consumableBySelfAvatar.getEntityAtIndex($index)"
				)
			)
		)

		(block
			(bind visible "consumableSquadronBySelfAvatar.length > 0")
			(tf
				(class $TextDefaultBold19NM)
				(style (alpha = "TA") (marginTop = "52px") (marginRight = "M"))
				(text = 'IDS_HELP_ESCADRILLE_CONSUMABLES')
			)

			(block
				(style (vgap = "MS") (marginTop = "MS"))
				(controller $Repeat renderer='ShipEquipmentGroupOnHelpPanelItem'
					(bind count "consumableSquadronBySelfAvatar.length")
					(args
						_equipmentItemVisualSlot = "consumableSquadronBySelfAvatar.getEntityAtIndex($index)"
					)
				)
			)
		)
	)
)

(def element ShipEquipmentGroupOnHelpPanelItem (_equipmentItemVisualSlot:dhEntity)
	(scope
		(var equipmentSlotComponent:dhComponent = "_equipmentItemVisualSlot.visualSlotData ?: _equipmentItemVisualSlot.battleConsumable")
		(var cmd:str = "_equipmentItemVisualSlot.battleConsumable ? equipmentSlotComponent.cmd : ''")
		(var cmdEntity:dhEntity = "getPrimaryEntity(CC.commandMappingCommandName, cmd)")
		(var commandId:number = "equipmentSlotComponent.commandId ?: cmdEntity.commandMappingCommand.id")

		(var title:str = "equipmentSlotComponent.title ?: ''")
		(var description:str = "equipmentSlotComponent.description ?: ''")

		(var isAutoConsumable:bool = "_equipmentItemVisualSlot.battleConsumable.isAutoConsumable ?: false")
		(var isAutoUsage:bool = "isAutoConsumable || commandId == CMD_AUTO")

		(struct drumFireModeSlotVisible = VISIBLE_DRUM_FIRE_MODE_SLOT("equipmentSlotComponent.id"))
		(var drumFireModeEntity:dhEntity = "getSingleEntity(CC.drumFireMode)")
		(var drumFireModeComponent:dhComponent = "drumFireModeEntity.drumFireMode")
		(var isDrumFireModeActive:bool = "drumFireModeComponent.isActive" (event "drumFireModeComponent.evIsActiveChanged"))
		(var isDrumFireIsSwitchable:bool = "drumFireModeComponent.isSwitchable")

		(var isCanDrum:bool = "drumFireModeComponent && equipmentSlotComponent.weaponType == SC.Ships.SHIP_WEAPON_TYPES.ARTILLERY")
		(var isActiveDrum:bool = "isCanDrum && isDrumFireModeActive")
	)

	(bind visible "drumFireModeSlotVisible.showSlot")
	(style (flow = "horizontal"))

	(block
		(style (align = "center") (marginRight = "MS"))

		(block
			(style (width = 60px) (height = 60px)
			(backgroundImage = "equipmentSlotComponent.iconPath"))
		)

		(block
			(bind visible "isActiveDrum")
			(style
				(hitTest = false)
				(position = "absolute")
				(width = 60px) (height = 60px)
				(backgroundImage = 'url:../consumables/drumMode_indicator.png')
				(backgroundSize = "fill")
			)
		)

		(block
			(controller $Instance renderer='HotkeyIndicatorStatic'
				(bind enabled "!isAutoUsage")
				(args
					_commandId = "commandId"
					_size = "SIZE.SMALL"
				)
			)

			(controller $Instance renderer='LabelAuto'
				(bind enabled "isAutoUsage")
			)
		)
	)

	(block
		(tf
			(class $TextDefaultBold17NM)
			(style (leading = -2) (alpha = "TA"))
			(bind text "title")
		)

		(tf
			(class $TextDefaultNM)
			(style
				(maxWidth = 380px)
				(marginTop = "S")
				(leading = -2)
				(alpha = "TC")
				(multiline = true)
				(leading = -1)
				(styleSheet = '.p_spacing { font-size: 7px; }')
			)
			(bindcall substitute imageOffset=5 sourceText="tr(description)" postfix='' init=true (bind enabled "!description.empty"))
		)

		(tf
			(bind visible "isActiveDrum && !isDrumFireIsSwitchable")
			(class $TextDefaultNM)
			(style
				(maxWidth = 380px)
				(marginTop = "M")
				(leading = -1)
				(alpha = "TC")
			)
			(text = 'IDS_DOCK_AMMO_DESCRIPTION_DRUM_MODE')
		)
	)
)

(def element IndicatorsContent (_subType:str )
	(scope
		(var isAirCarrier:bool = "_subType == ShipTypes.AIRCARRIER")
		(var isSubmarine:bool = "_subType == ShipTypes.SUBMARINE")

		(var weaponSlotsArtillery:dhCollection = "getCollectionByPath(CC.weaponSlot, 'byWeaponType.' + SC.Ships.SHIP_WEAPON_TYPES.ARTILLERY)")
		(var hasArtillery:bool = "weaponSlotsArtillery != null")

		(var battleDataEntity:dhEntity = "getSingleEntity(CC.battleData)")
		(var gameModeId:number = "battleDataEntity.battleInfo.gameModeId")
		(var isBattleArmsRace:bool = "gameModeId == SC.Battle.GAME_MODE.ARMS_RACE")
		(var isBattleDesignationsVisible:bool = "isBattleArmsRace || gameModeId == SC.Battle.GAME_MODE.CONVOY_AIRSHIP")

		(var visualSlotDataCollection:dhCollection = "getCollection(CC.visualSlotData)")
		(var ammoBySelfAvatar:dhCollection = "getCollection(CC.visualSlotData).getChildByPath('byAvatarId.' + DEFAULT_AVATAR_ID)")
		(var consumableCollection:dhCollection = "getCollection(CC.battleConsumable)")

		(var selectedSquadronIndex:number = "ammoBySelfAvatar[0].visualSlotData.squadId")
		(var squadronBySelfAvatar:dhCollection = "consumableCollection.getChildByPath('byAvatarIdAndSquadronOwner.' + DEFAULT_AVATAR_ID + '_' + selectedSquadronIndex)")

		(var isSquadronAbility:bool = "squadronBySelfAvatar.length > 0 || isAirCarrier")
	)
	(style (width = 100%) (align = "center"))

	(hblock
		(block
			(style (width = "{1280:344px, 1920:436px}") (marginRight = "{1280:L, 1920:LM}") (vgap = "LM"))

			(block
				(bind visible "hasArtillery")
				(style (width = 100%))

				(controller $Instance renderer = 'IndicatorsBlock'
					(bind enabled "hasArtillery")
					(args
						_title = 'IDS_HELP_GUN_STATES'
						_icons = "isSubmarine ? HELP_INDICATORS_SUBMARINE_GUN_STATES : HELP_INDICATORS_GUN_STATES"
					)
				)
			)

			(element IndicatorsBlock
				_title = 'IDS_HELP_DETECTION_INDICATORS'
				_icons = "HELP_INDICATORS_DETECTION"
			)

			(element IndicatorsBlock
				_title = 'IDS_HELP_INDICATORS_DIFFERENT'
				_icons = "isSquadronAbility ? HELP_INDICATORS_AIRCARRIER_DIFFERENT : HELP_INDICATORS_DIFFERENT"
			)

			(block
				(bind visible "isBattleDesignationsVisible")
				(style (width = 100%))

				(controller $Instance renderer = 'IndicatorsSmallBlock'
					(bind enabled "isBattleDesignationsVisible")
					(args
						_title = 'IDS_HELP_BATTLE_DESIGNATIONS'
						_icons = "isBattleArmsRace ? HELP_INDICATORS_BATTLE_ARMSRACE_DESIGNATIONS : HELP_INDICATORS_BATTLE_AIRSHIPS_DESIGNATIONS"
					)
				)
			)
		)

		(block
			(style (width = "{1280:344px, 1920:436px}") (marginRight = "{1280:L, 1920:LM}") (vgap = "LM"))

			(element IndicatorsBlock
				_title = 'IDS_HELP_STATES'
				_icons = "isSubmarine ? HELP_INDICATORS_SUBMARINE_STATES : HELP_INDICATORS_STATES"
			)

			(block
				(bind visible "isSquadronAbility")
				(style (width = 100%))

				(controller $Instance renderer = 'IndicatorsBlock'
					(bind enabled "isSquadronAbility")
					(args
						_title = 'IDS_HELP_SHIP_THREATS'
						_icons = "HELP_INDICATORS_SHIP_THREATS"
					)
				)
			)

			(element IndicatorsBlock
				_title = 'IDS_HELP_DEGECTIVE_MODULES'
				_icons = "HELP_INDICATORS_DEGECTIVE_MODULES"
			)

			(element IndicatorsBlock
				_title = 'IDS_HELP_ACTIVE_ZONES'
				_icons = "HELP_INDICATORS_ACTIVE_ZONES"
			)
		)

		(block
			(style (width = "{1280:376px, 1920:436px}") (vgap = "LM"))

			(element IndicatorsSmallBlock
				_title = 'IDS_HELP_CROSSHAIR'
				_icons = "HELP_INDICATORS_CROSSHAIR"
				_isCrosshair = true
			)

			(element IndicatorsSmallBlock
				_title = 'IDS_HELP_SHIP_TYPES'
				_icons = "HELP_SHIP_TYPES"
			)

			(element IndicatorsSmallBlock
				_title = 'IDS_HELP_AVIATION'
				_icons = "HELP_AVIATION"
			)
		)
	)
)

(def element IndicatorsBlock ( _title:str, _icons:array = [])
	(style (width = 100%) (vgap = "MS"))

	(tf
		(class $TextDefaultBold19NM)
		(style (alpha = "TA"))
		(text = "_title")
	)

	(htile
		(style (width = 100%))
		(controller $Repeat renderer = 'IndicatorsBlockItem'
			(bind count "_icons.length")
			(args
				_icon = "_icons[$index]"
			)
		)
	)
)

(def element IndicatorsBlockItem (_icon:dict)
	(style
		(align = "center")
		(marginBottom = "M")
		(marginRight = "{1280:S, 1920:SXS}")
		(vgap = "SXS")
	)

	(block
		(style
			(bind backgroundImage "_icon.iconPath")
			(backgroundSize = "autosize")
		)
	)

	(tf
		(class $TextDefaultNM)
		(style
			(width = 100px)
			(alpha = "TC")
			(leading = -3)
			(textAlign = "center")
		)

		(bind text "_icon.text")
	)
)

(def element IndicatorsSmallBlock ( _title:str, _icons:array = [], _isCrosshair:bool = false)
	(style (width = 100%))

	(tf
		(class $TextDefaultBold19NM)
		(style (alpha = "TA") (marginBottom = "MS"))
		(text = "_title")
	)

	(block
		(bind visible "_isCrosshair")

		(style
			(width = 396px) (height = 72px)
			(marginBottom = "M")
			(backgroundImage = 'swf:../battle_hud/help_screen/sight_indicators_svg/sight_indicators_svg.swf:F1_Crosshair')
		)
	)

	(htile
		(style (width = 100%) (gap = "S"))
		(controller $Repeat renderer = 'IndicatorsSmallIconBlockItem'
			(bind count "_icons.length")
			(args
				_icon = "_icons[$index]"
			)
		)
	)
)

(def element IndicatorsSmallIconBlockItem ( _icon:dict )
	(style (width = "{1280:184px, 1920:194px}") (flow = "horizontal") (align = "middle") (hgap = "S"))

	(block
		(style
			(bind backgroundImage "_icon.iconPath")
			(backgroundSize = "autosize")
		)
	)

	(tf
		(class $TextDefaultNM)
		(style (width = 100%) (alpha = "TC"))

		(bind text "_icon.text")
	)
)

(def element HotkeyIndicatorStatic (_commandId:number, _size:number="SIZE.MEDIUM", _isForceIndex:bool=false, _forceShownIndex:number=0)
	(scope
		(var command:dhEntity = "getPrimaryEntity(CC.commandMappingCommand, _commandId)")

		(struct mainCommand = GET_COMMAND(_commandName="command.commandMappingCommandName.commandName" _binding="0"))
		(var cmdMappingKeyIndex:number = "	_isForceIndex				? _forceShownIndex :
											mainCommand.keyCode != 0	? 0
																		: 1")
		(struct preferenceCommand = GET_COMMAND(_commandName="command.commandMappingCommandName.commandName" _binding="cmdMappingKeyIndex"))
	)

	(style
		(flow = "horizontal")
		(bind minHeight "HOTKEY_SIZE[_size]")
		(align = "center|middle")
	)

	
	(controller $Instance renderer='ModHotKeyPanelStatic'
		(bind enabled "preferenceCommand.mods != 0")
		(args
			_size = "_size"
			_mods = "preferenceCommand.mods"
		)
	)

	
	(controller $Instance
		(bind renderer "isIn(preferenceCommand.keyCode, [MOUSE_LEFT_CLICK, MOUSE_RIGHT_CLICK, MOUSE_MIDDLE_CLICK]) ? 'MouseKeyIndicator' : 'HotKeyStatic'")
		(args
			_size = "_size"
			_keyCode = "preferenceCommand.keyCode"
		)
	)
)

(def element ModHotKeyPanelStatic (_size:number, _mods:number)
	(scope
		(var cmModKeyEntity:dhEntity = "getPrimaryEntity(CC.commandMappingModKey, _mods)")
		(var modKeyCode:number = "cmModKeyEntity.commandMappingModKey.keyCode")
	)

	(style
		(flow = "horizontal")
		(align = "middle")
	)

	(element HotKeyStatic
		_size = "_size"
		_keyCode = "modKeyCode"
	)

	(tf
		(class $HotkeyTextWhite)
		(style (marginTop = "-XXS"))
		(text = ' + ')
	)
)


(def element HotKeyStatic (_size:number, _keyCode:number)
	(scope
		(var inputKeyEntity:dhEntity = "getPrimaryEntity(CC.inputKey, _keyCode)")
		(var isPureKey:bool = "inputKeyEntity.inputKey.pureName.length == 1 || NOT_LOCALIZE_KEYS[inputKeyEntity.inputKey.pureName]")
		(var isNullKey:bool = "inputKeyEntity.inputKey.pureName == null")
		(var inputKeyText:str = "isNullKey	? '' :
								isPureKey	? toUpper(inputKeyEntity.inputKey.pureName)
											: toUpper(tr('IDS_' + inputKeyEntity.inputKey.name))")
	)

	(style
		(bind minWidth "HOTKEY_SIZE[_size]")
		(bind minHeight "HOTKEY_SIZE[_size]")
		(align = "center|middle")
		(bind maxWidth "inputKeyEntity.inputKey.pureName.length == 1 ? HOTKEY_SIZE[_size] : 999")
		(backgroundImage = 'url:../service_kit/hotkeys/background_white.png')
		(scale9grid = 5)
	)

	(tf
		(bind class "HOTKEY_FONTS[_size]")
		(style
			(bind marginLeft "_size == SIZE.SMALL ? 4px : 6px")
			(bind marginRight "_size == SIZE.SMALL ? 4px : 6px")
		)
		
		(bind text "inputKeyText")
	)
)




(def element HotkeyIndicatorStaticLarge (_commandId:number, _isForceIndex:bool=false, _forceShownIndex:number=0)
	(scope
		(var command:dhEntity = "getPrimaryEntity(CC.commandMappingCommand, _commandId)")

		(macro GET_PREF 'commandKeyMain' "'commands.' + command.commandMappingCommandName.commandName + '.value1'")
		(var cmdMappingKeyIndex:number = "	_isForceIndex	? _forceShownIndex :
											commandKeyMain	? 0
															: 1")
		(struct preferenceCommand = GET_COMMAND(_commandName="command.commandMappingCommandName.commandName" _binding="cmdMappingKeyIndex"))
	)

	(style
		(flow = "horizontal")
		(minHeight = "24")
		(align = "center|middle")
	)

	
	(controller $Instance renderer='ModHotKeyPanelStaticLarge'
		(bind enabled "preferenceCommand.mods != 0")
		(args
			_mods = "preferenceCommand.mods"
		)
	)

	
	(controller $Instance
		(bind renderer "isIn(preferenceCommand.keyCode, [MOUSE_LEFT_CLICK, MOUSE_RIGHT_CLICK, MOUSE_MIDDLE_CLICK]) ? 'MouseKeyIndicatorLarge' : 'HotKeyStaticLarge'")
		(args
			_keyCode = "preferenceCommand.keyCode"
		)
	)
)

(def element MouseKeyIndicatorLarge (_keyCode:number)
	(style
		(width = 24)
		(height = 24)
		(bind backgroundImage "	_keyCode == MOUSE_LEFT_CLICK	?	'url:../service_kit/mouse_buttons/icon_mouse_left_click.png'	:
								_keyCode == MOUSE_RIGHT_CLICK	?	'url:../service_kit/mouse_buttons/icon_mouse_right_click.png'	:
								_keyCode == MOUSE_MIDDLE_CLICK	?	'url:../service_kit/mouse_buttons/icon_mouse_scroll.png'		:
																	''")
		(backgroundSize = "cover")
	)
)

(def element ModHotKeyPanelStaticLarge (_mods:number)
	(scope
		(var cmModKeyEntity:dhEntity = "getPrimaryEntity(CC.commandMappingModKey, _mods)")
		(var modKeyCode:number = "cmModKeyEntity.commandMappingModKey.keyCode")
	)

	(style
		(flow = "horizontal")
		(align = "middle")
	)

	(element HotKeyStaticLarge
		_keyCode = "modKeyCode"
	)

	(tf
		(class $HotkeyTextWhite)
		(style (marginTop = "-XXS"))
		(text = ' + ')
	)
)

(def element HotKeyStaticLarge (_keyCode:number)
	(scope
		(var inputKeyEntity:dhEntity = "getPrimaryEntity(CC.inputKey, _keyCode)")
		(var isPureKey:bool = "inputKeyEntity.inputKey.pureName.length == 1 || NOT_LOCALIZE_KEYS[inputKeyEntity.inputKey.pureName]")
		(var isNullKey:bool = "inputKeyEntity.inputKey.pureName == null")
		(var inputKeyText:str = "isNullKey	? '' :
								isPureKey	? toUpper(inputKeyEntity.inputKey.pureName)
											: toUpper(tr('IDS_' + inputKeyEntity.inputKey.name))")
	)

	(style
		(minWidth = 24)
		(minHeight = 24)
		(align = "center|middle")
		(bind maxWidth "inputKeyEntity.inputKey.pureName.length == 1 ? 24 : 999")
		(backgroundImage = 'url:../service_kit/hotkeys/background_white.png')
		(scale9grid = 5)
	)

	(tf
		(class $HotkeyText)
		(style
			(marginLeft = 6px)
			(marginRight = 6px)
		)

		(bind text "inputKeyText")
	)
)

(def constant BATTLE_RULES_DEFAULT {
	'PCVE027':
	[
		{
			_imagePath: 'url:../modal_battle_rules/events/DREADNOUGHT_BATTLE_1_card.png',
			_header: 'IDS_MODAL_WINDOW_DREADNOUGHT_BATTLE_RULES_PARAGRAPH_1_HEADER',
			_description: 'IDS_MODAL_WINDOW_DREADNOUGHT_BATTLE_RULES_PARAGRAPH_1_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/events/DREADNOUGHT_BATTLE_2_card.png',
			_header: 'IDS_MODAL_WINDOW_DREADNOUGHT_BATTLE_RULES_PARAGRAPH_2_HEADER',
			_description: 'IDS_MODAL_WINDOW_DREADNOUGHT_BATTLE_RULES_PARAGRAPH_2_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/events/DREADNOUGHT_BATTLE_3_card.png',
			_header: 'IDS_MODAL_WINDOW_DREADNOUGHT_BATTLE_RULES_PARAGRAPH_3_HEADER',
			_description: 'IDS_MODAL_WINDOW_DREADNOUGHT_BATTLE_RULES_PARAGRAPH_3_TEXT_1',
		},
	],
	'PCVE029':
	[
		{
			_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_1.jpg',
			_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_1_PARAGRAPH_1_HEADER',
			_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_1_PARAGRAPH_1_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_2.jpg',
			_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_2_PARAGRAPH_2_HEADER',
			_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_2_PARAGRAPH_2_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_3.jpg',
			_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_3_PARAGRAPH_3_HEADER',
			_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_3_PARAGRAPH_3_TEXT_1',
		},
	],
	'PCVE028':
	[
		{
			_imagePath: 'url:../modal_battle_rules/events/PCVE028_BATTLE_1_card.png',
			_header: 'IDS_MODAL_WINDOW_PCVE028_BATTLE_RULES_PARAGRAPH_1_HEADER',
			_description: 'IDS_MODAL_WINDOW_PCVE028_BATTLE_RULES_PARAGRAPH_1_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/events/PCVE028_BATTLE_2_card.png',
			_header: 'IDS_MODAL_WINDOW_PCVE028_BATTLE_RULES_PARAGRAPH_2_HEADER',
			_description: 'IDS_MODAL_WINDOW_PCVE028_BATTLE_RULES_PARAGRAPH_2_TEXT_1',
		},
	],
	'PCVT001_DAMAGE_PRIME':
	[
		{
			_imagePath: 'url:../modal_battle_rules/trials/TRIALS_BATTLE_1_card.png',
			_header: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_1_HEADER',
			_description: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_1_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/trials/TRIALS_BATTLE_4_card.png',
			_header: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_2_HEADER',
			_description: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_2_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/trials/TRIALS_BATTLE_3_card.png',
			_header: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_3_HEADER',
			_description: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_3_TEXT_1',
		},
	],
	'PCVT002_CITADEL_PRIME':
	[
		{
			_imagePath: 'url:../modal_battle_rules/trials/TRIALS_BATTLE_1_card.png',
			_header: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_1_HEADER',
			_description: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_1_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/trials/TRIALS_BATTLE_4_card.png',
			_header: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_2_HEADER',
			_description: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_2_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/trials/TRIALS_BATTLE_3_card.png',
			_header: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_3_HEADER',
			_description: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_3_TEXT_1',
		},
	],
	'PCVT003_FRAGS_PRIME':
	[
		{
			_imagePath: 'url:../modal_battle_rules/trials/TRIALS_BATTLE_1_card.png',
			_header: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_1_HEADER',
			_description: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_1_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/trials/TRIALS_BATTLE_4_card.png',
			_header: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_2_HEADER',
			_description: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_2_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/trials/TRIALS_BATTLE_3_card.png',
			_header: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_3_HEADER',
			_description: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_3_TEXT_1',
		},
	],
	'PCVT004_MANEUVER_PRIME':
	[
		{
			_imagePath: 'url:../modal_battle_rules/trials/TRIALS_BATTLE_1_card.png',
			_header: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_1_HEADER',
			_description: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_1_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/trials/TRIALS_BATTLE_5_card.png',
			_header: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_5_HEADER',
			_description: 'IDS_MODAL_WINDOW_TRIALS_BATTLE_RULES_PARAGRAPH_5_TEXT_1',
		},
	],
	'PCVO032':
	[
		{
			_imagePath: 'url:../modal_battle_rules/events/DREADNOUGHT_2_BATTLE_1_card.jpg',
			_header: 'IDS_MODAL_WINDOW_PCVO032_BATTLE_RULES_PARAGRAPH_1_HEADER',
			_description: 'IDS_MODAL_WINDOW_PCVO032_BATTLE_RULES_PARAGRAPH_1_TEXT_1',
		},
		{
			_imagePath: 'url:../modal_battle_rules/events/DREADNOUGHT_2_BATTLE_2_card.jpg',
			_header: 'IDS_MODAL_WINDOW_PCVO032_BATTLE_RULES_PARAGRAPH_2_HEADER',
			_description: 'IDS_MODAL_WINDOW_PCVO032_BATTLE_RULES_PARAGRAPH_2_TEXT_1',
		},
	],
})


(def constant BATTLE_RULES_SPECIALS {
	'PCVE029': {
		'Submarine':
			[
				{
					_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_sub_1.jpg',
					_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_1_PARAGRAPH_1_HEADER',
					_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_1_PARAGRAPH_1_TEXT_1',
				},
				{
					_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_sub_2.jpg',
					_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_2_PARAGRAPH_2_HEADER',
					_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_2_PARAGRAPH_2_TEXT_1',
				},
				{
					_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_sub_3.jpg',
					_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_3_PARAGRAPH_3_HEADER',
					_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_3_PARAGRAPH_3_TEXT_1',
				},
			],
		}
	})


(def constant TEMPORARY_BATTLE_RULES {
	'default':
		[
			{
				_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_1.jpg',
				_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_1_PARAGRAPH_1_HEADER',
				_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_1_PARAGRAPH_1_TEXT_1',
			},
			{
				_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_2.jpg',
				_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_2_PARAGRAPH_2_HEADER',
				_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_2_PARAGRAPH_2_TEXT_1',
			},
			{
				_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_3.jpg',
				_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_3_PARAGRAPH_3_HEADER',
				_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_3_PARAGRAPH_3_TEXT_1',
			},
		],
	'Submarine':
		[
			{
				_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_sub_1.jpg',
				_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_1_PARAGRAPH_1_HEADER',
				_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_1_PARAGRAPH_1_TEXT_1',
			},
			{
				_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_sub_2.jpg',
				_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_2_PARAGRAPH_2_HEADER',
				_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_2_PARAGRAPH_2_TEXT_1',
			},
			{
				_imagePath: 'url:../modal_battle_rules/events/subs_improve_event_sub_3.jpg',
				_header: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_3_PARAGRAPH_3_HEADER',
				_description: 'IDS_MODAL_WINDOW_SUBS_IMPROVE_EVENT_FOR_SUB_3_PARAGRAPH_3_TEXT_1',
			},
		],
})


(def element EventInfoContent (_subType:str)
	(scope
		(var battleInfoComponent:dhComponent = "getSingleEntity(CC.battleData).battleInfo")
		(var eventBattleName:str = "battleInfoComponent.battleTypeGameParamsName")
		(var isSpecialEventBattle:bool = "eventBattleName in BATTLE_RULES_SPECIALS && _subType in BATTLE_RULES_SPECIALS[eventBattleName]")
		(var isDefaultEventBattle:bool = "eventBattleName in BATTLE_RULES_DEFAULT") 
		(var isSpecialTemporaryRules:bool = "_subType in TEMPORARY_BATTLE_RULES")
		(var rulesName:str = "eventBattleName in BATTLE_RULES_DEFAULT ? eventBattleName : ' '")
		(var rulesCount:number = "	isSpecialEventBattle	?	BATTLE_RULES_SPECIALS[eventBattleName][_subType].length :
									isDefaultEventBattle	?	BATTLE_RULES_DEFAULT[rulesName].length :
									isSpecialTemporaryRules	?	TEMPORARY_BATTLE_RULES[_subType].length
															:	TEMPORARY_BATTLE_RULES['default'].length")
	)

	(style
		(marginTop = "{ 720: L, 1080: XLL }")
		(flow = "horizontal")
		(align = "center")
		(width = 100%)
	)

	(controller $Repeat renderer = 'EventInfoItem'
		(bind count "rulesCount")
		(args
			_rulesName = "rulesName"
			_isSpecialEventBattle = "isSpecialEventBattle"
			_isDefaultEventBattle = "isDefaultEventBattle"
			_isSpecialTemporaryRules = "isSpecialTemporaryRules"
			_subType = "_subType"
		)
	)
)


(def element EventInfoItem (_rulesName:str, _isSpecialEventBattle:bool, _isDefaultEventBattle:bool, _isSpecialTemporaryRules:bool, _subType:str)
	(scope
		(var rulesList:array = "_isSpecialEventBattle		?	BATTLE_RULES_SPECIALS[_rulesName][_subType] :
								_isDefaultEventBattle		?	BATTLE_RULES_DEFAULT[_rulesName] :
								_isSpecialTemporaryRules	?	TEMPORARY_BATTLE_RULES[_subType]
															:	TEMPORARY_BATTLE_RULES['default']") 
		(var header:str = "rulesList[$index]._header")
		(var description:str = "rulesList[$index]._description")
	)
	(style
		(width = "RULES_CARD_WIDTH")
		(height = "RULES_CARD_HEIGHT")
		(bind marginLeft "$index == 0 ? 0px : {1280:MS, 1920:L}")
		(bind backgroundImage "rulesList[$index]._imagePath")
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(backgroundSize = "cover")
			(backgroundImage = 'url:../battle_hud/help_screen/other/card_dark_zone.png')
		)
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(alpha = 0.1)
			(scale9grid = 2)
			(backgroundImage = 'url:../service_kit/frames/one_pixel_frame.png')
		)
	)

	(block
		(style
			(width = 100%)
			(marginTop = 306px)
			(padding = "MS")
		)

		(tf
			(class $TextDefaultBold21NM)
			(style (alpha = "TA"))
			(bind text "header")
		)

		(block
			(style (width = 100%) (marginTop = 20px))

			(tf
				(class $TextDefaultNM)
				(style (alpha = "TC") (width = 100%))
				(bind text "description")
			)
		)
	)
)
