(def element MainHud () layout=true
	(scope
		(var battleDataEntity:gfx = "$datahub.getSingleEntity(CC.battleData)")
		(var gameModeId:number = "battleDataEntity.battleInfo.gameModeId")

		(var battleState:number = "battleDataEntity.battleState.battleState" (event "battleDataEntity.battleState.evBattleStateChanged"))
		(var isEndBattleResultsVisible:bool = "battleState == SC.Common.CLIENT_BATTLE_STATE.END_BATTLE_IDLING")

		(macro CUSTOM_ELEMENT_VISIBILITY_SCOPE)
		(var isBattleIndicatorsVisible:bool = "!((disabledElements & SC.Battle.CUSTOM_BATTLE_ELEMENTS.BATTLE_INDICATORS) > 0)")
		(var isRibbonsVisible:bool = "!((disabledElements & SC.Battle.CUSTOM_BATTLE_ELEMENTS.RIBBONS) > 0)")
		(var isDeathLogContainerVisible:bool = "!((disabledElements & SC.Battle.CUSTOM_BATTLE_ELEMENTS.DEATH_LOG) > 0)")
		(var isDamageWidgetVisible:bool = "!((disabledElements & SC.Battle.CUSTOM_BATTLE_ELEMENTS.DAMAGE_WIDGET) > 0)")
		(var isBattleTimerVisible:bool = "!(isIn(gameModeId, SC.Battle.GAME_MODE.BATTLE_TIMER_HIDDEN)) && battleState == SC.Common.CLIENT_BATTLE_STATE.STARTED")
		(var isKillerInfoContainerVisible:bool = "!((disabledElements & SC.Battle.CUSTOM_BATTLE_ELEMENTS.KILLER_INFO_CONTAINER) > 0)")
		(var isDreadnoughtCustomization:bool = "(customisedElements & SC.Battle.CUSTOM_BATTLE_ELEMENTS.DREADNOUGHT) > 0")

		
		(macro GET_PREF 'earsEnabled' "'battle.ears.enabled'")
		(var isEarsVisible:bool = "earsEnabled && !((disabledElements & SC.Battle.CUSTOM_BATTLE_ELEMENTS.EARS) > 0)")

		
		(var challengeComponent:dhComponent = "getSingleEntity(CC.challenge).challenge")
		(var isChallengesEnabled:bool = "challengeComponent != null")

		(var trialComponent:dhComponent = "getSingleComponent(CC.trial)")
		(var isTrialsEnabled:bool = "trialComponent != null")

		(macro IS_ALIVE)
		(var isSubmarineHudVisible:bool = "selfAvatarEntity.avatar.ship.ref.ship.subtype == ShipTypes.SUBMARINE" (event "selfAvatarEntity.avatar.evShipRefChanged"))
		(var selfAvatarId:number = "selfAvatarEntity ? selfAvatarEntity.avatar.id : INVALID_PLAYER_AVATAR_ID")
		(var killerId:number = "healthComponent.killerId" (event "healthComponent.evKillerIdChanged"))

		(var aircarrierSqudronsCollection:gfx = "$datahub.getCollection(CC.ownSquadron)")
		(var isAircraftHudVisible:bool = "aircarrierSqudronsCollection.items.length > 0")

		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var stageHeight:number = "stageComponent.height" (event "stageComponent.evStageSizeChanged"))

		(var invCollection:gfx = "$datahub.getCollection(CC.invitationToDivision)")
		(var hasInvitation:bool = "invCollection.items.length > 0" (event "invCollection.evAdded")(event "invCollection.evRemoved"))
		(var invitationEntity:gfx = "invCollection.items[0]" (event "invCollection.evAdded")(event "invCollection.evRemoved"))
		
		
		(var cameraComponent:gfx = "$datahub.getSingleComponent(CC.camera)") 
		(var observedShipId:number = "cameraComponent ? cameraComponent.observedShipId : INVALID_OBSERVED_AVATAR_ID" (event "cameraComponent.evObservedShipChanged"))
		(var observedAvatarId:number = "cameraComponent ? cameraComponent.observedPlayerId : INVALID_OBSERVED_AVATAR_ID" (event "cameraComponent.evObservedPlayerIdChanged"))
		(var isSelfObserved:bool = "selfAvatarId == observedAvatarId")
		(var isTacticalMap:bool = "cameraComponent ? cameraComponent.isTactical : false" (event "cameraComponent.evTacticalStateChanged"))
		(var isSubmarineHudEnabled:bool = "cameraComponent.mode != SC.Battle.CAMERA_MODE.PLANETRACKER" (event "cameraComponent.evModeChanged"))

		(macro IS_SPECTATOR_MODE)
		(var hotKeysParamsCmdEntity:gfx = "$datahub.getPrimaryEntity(CC.commandMappingCommandName, 'CMD_SPECTATOR_HOTKEYS')")
		(var isHotKeysModalWindowVisible:bool = "hotKeysParamsCmdEntity.commandMappingCommand.isDown" (event "hotKeysParamsCmdEntity.commandMappingCommand.evIsDownChanged"))

		(var isDogTagSpectatorVisible:bool = "isSpectatorTrainingMode ? !isIn(observedShipId, [0, INVALID_OBSERVED_AVATAR_ID]) : isSpectator && (observedShipId != 0) && !isSelfObserved")
		(var isVisibleHSpectatorPanel:bool = "isSpectator && !isHotKeysModalWindowVisible && !isTacticalMap")

		(macro GET_PREF 'hearFoghorn' "'sound.foghorn.enabled'")

		(var compassEntity:gfx = "$datahub.getSingleEntity(CC.compass)")
		(var shipDollRotation:number = "compassEntity.compass.shipDollRotation" (event "compassEntity.compass.evShipDollRotationChanged"))

		(var armorSegmentsCollection:dhCollection = "getCollectionByPath(CC.segmentArmor, 'selfArmor')")
		(var armorSegmentsLen:number = "armorSegmentsCollection.length")
	)

	(style
		(bind width "stageWidth")
		(bind height "stageHeight")
	)

	(controller $Instance renderer='EndBattleIdlingResults'
		(bind enabled "isEndBattleResultsVisible")
	)

	(controller $Instance renderer='AircraftHud'
		(bind enabled "isAircraftHudVisible")
	)

	(controller $Instance renderer='SubmarineHud'
		(bind enabled "isAlive && isSubmarineHudVisible && isSubmarineHudEnabled")
	)

	(controller $Instance renderer='CentralDangersContainer'
		(bind enabled "isAlive")
	)

	(controller $Instance renderer='BattleIndicatorsContainer'
		(bind enabled "isBattleIndicatorsVisible")
	)

	(controller $Instance renderer='SmokeIndicatorContainer' $autoPerfTestGroup='danger_indicators'
		(bind enabled "spectatorEntity == null")
	)

	(block 
		(bind visible "isEarsVisible")
		(style
			(position = "absolute")
			(top = "{720:113, 1080:159}")
			(width = 100%)
			(height = 340px)
		)
		(controller $Animation
			(bindcall play
				from={alpha:1}
				to={alpha:0}
				action="killAll"
				duration=0.2
				reverse="!isTacticalMap"
				(bind trigger "isTacticalMap")
			)
		)

		(controller $Instance renderer='EarsContent'
			(bind enabled "isEarsVisible")
		)
	)

	

	(element RespawnContainer)

	(controller $Instance renderer='NewDollCompass'
		(bind enabled "isDreadnoughtCustomization")
	)

	(block
		(bind visible "isChallengesEnabled")
		(style (position = "absolute") (top = "L") (left = "SXS"))
		(controller $Instance renderer='BattleChallengesLeaderboardAndTaskContainer'
			(bind enabled "isChallengesEnabled")
		)
	)

	(block
		(style
			(position = "absolute")
			(top = "L")
			(left = 10px)
		)
		(controller $Instance renderer='TrialOwnProgressTaskItem'
			(bind enabled "isTrialsEnabled")
			(args
				_trialComponent="trialComponent"
			)
		)
	)

	(element UpperLog
		_isChallengesEnabled = "isChallengesEnabled"
		_isTrialsEnabled = "isTrialsEnabled"

		(class $MiddleAlignedAbsolutely)
		(style (top = 155px))
	)

	(controller $Instance renderer='BattleTimer'
		(bind enabled "isBattleTimerVisible")
		(args _battleState="battleState")
		(exprs
			(style
				(position = "absolute")
				(top = "SXS")
				(right = "176")
			)
		)
	)

	(hblock
		(bind visible "!isSpectator")
		(style
			(position = "absolute")
			(top = "S")
			(right = 20px)
			(align = "middle")
		)

		(element HotkeyIndicator
			_commandId="Cmd.CMD_HELP"
			_fxOnDown=true
			_active = true
		)

		(tf
			(class $TextDefaultBold17NM)
			(style
				(alpha = "TA")
				(marginLeft = "S")
			)
			(text = 'IDS_HELP')
		)
	)

	(controller $Instance renderer='InvitationToDivision'
		(bind enabled "hasInvitation")
		(args
			_invitationEntity="invitationEntity"
		)
		(exprs
			(style
				(position = "absolute")
				(top = "XS")
				(left = "XS")
			)
		)
		(bindcall recreate (bind trigger "invitationEntity"))
	)


	(element TasksList _isCompactView = true
		(style
			(position = "absolute")
			(marginLeft = "SXS")
			(marginTop = "L")
			(hitTest = "false")
		)
	)

	
	(block
		(style
			(position = "absolute")
			(right = "XS") (top = "XS")
			(align = "top|right")
		)

		(element PortalCountdownHolder $autoPerfTestGroup='pve_progress'
			(style
				(marginTop = "M")
				(marginRight = "M")
			)
		)



		(hblock 
			(style (marginTop = "SXS"))
			(block
				(controller $Instance renderer='RibbonsClaimedContainer' $autoPerfTestGroup='ribbons'
					(bind enabled "isRibbonsVisible")
				)
			)
			(block
				(controller $Instance renderer='DamageWidget'
					(bind enabled "isDamageWidgetVisible")
				)
			)
		)
	)

	
	(element BattleStatsContainer
		(style
			(width = "100%")
			(align = "center")
			(bind hitTest "!isTacticalMap")
		)
	)

	
	(block
		(style
			(position = "absolute")
			(left = "XS") (bottom = "XS")
			(align = "bottom|left")
		)

		(block
			(style
				(position = "absolute")
				(bind visualOffsetX "isDreadnoughtCustomization ? 100px : 0px")
			)
			(controller $Instance renderer='AutopilotIndicator' $autoPerfTestGroup='header'
				(bind enabled "isAlive")
			)
		)

		(controller $Instance renderer='DogTagInHUDSpectator' $autoPerfTestGroup='indicator_compass'
			(bind enabled "isDogTagSpectatorVisible && armorSegmentsLen == 0")
			(args
				_observedShipId = "observedShipId"
			)
			(exprs
				(style
					(position = "absolute")
					(left = 30) (bottom = 203)
				)
			)
		)
	)

	
	(element CombatLogPanel
		(style
			(position = "absolute")
			(left = 10) (bottom = 326)
			(bind visualOffsetY "isDreadnoughtCustomization ? -120px : 0px")
		)
		(block
			(style
				(hitTest = false)
				(position = "absolute")
				(bottom = 0)
			)
			(controller $Instance renderer='FogHornIndicator'
				(bind enabled "isAlive && hearFoghorn")
			)
		)
		
	)


	
	(block
		(class $MiddleAlignedAbsolutely)
		(style
			(bottom = "0")
		)

		(block 
			(bind visible "isVisibleHSpectatorPanel")

			(class $MiddleAlignedAbsolutely)
			(style (bottom = "MS"))
			(block
				(style (alpha = "isVisibleHSpectatorPanel"))

				(controller $Animation
					(bindcall play from={y:15, alpha:0} to={y:0, alpha:1} action="killAll" duration=0.2 (bind enabled "isVisibleHSpectatorPanel"))
				)
				(controller $Instance renderer='HotKeySpectatorPanel')
			)
		)

		(block 
			(bind visible "isPreSpectator")

			(class $MiddleAlignedAbsolutely)
			(style (bottom = "XXS"))
			(block
				(style (alpha = 0))

				(controller $Animation
					(bindcall play from={alpha:0} to={alpha:1} duration=1 delay=2 easing="Easing.sine_in" watch=false (bind enabled "isPreSpectator"))
					(bindcall play from={alpha:1} to={alpha:0} duration=1 easing="Easing.quad_out" watch=false (bind enabled "!isPreSpectator"))
				)

				(controller $Instance renderer='KillerInfoContainer' $autoPerfTestGroup='indicator_compass'
					(bind enabled "!isAlive && isKillerInfoContainerVisible")
					(args
						_killerId = "killerId"
					)
				)
			)
		)

		(element HUDbottomElementsContainer
			(style
				(marginBottom = "S")
			)
		)
	)


	
	(block
		(style
			(position = "absolute")
			(right = "XS") (bottom = "XS")
			(align = "bottom|right")
		)

		(block
			(style 
				(align = "right")
				(marginRight = "MS")
				(marginBottom = "MS")
			)

			(block
				(style (marginBottom = "S"))
				(controller $Instance renderer='RibbonsAppearContainer' $autoPerfTestGroup='ribbons'
					(bind enabled "isRibbonsVisible")
				)
			)

			(block
				(controller $Instance renderer='DeathLogContainer' $autoPerfTestGroup='logs'
					(bind enabled "isDeathLogContainerVisible")
				)
			)
		)
		
		(element BattleMinimapUb2 $autoPerfTestGroup='minimap')
	)
)

(def macro DRAW_GUIDE (_x1:expression, _y1:expression, _x2:expression, _y2:expression)
	(block
		(.graphics
			(lineStyle "1" "0x00FFFF" "1")
			(moveTo "_x1" "_y1")
			(lineTo "_x2" "_y2")
			(endFill)
		)
	)
)

(def element Guides () layout=true
	(scope
		(var stageComponent:gfx = "$datahub.getSingleEntity(CC.stage).stage")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var stageHeight:number = "stageComponent.height" (event "stageComponent.evStageSizeChanged"))
	)
	(style
		(position = "absolute")
		(bind width "stageWidth")
		(bind height "stageHeight")
	)

	(macro DRAW_GUIDE "stageWidth/2" "0" "stageWidth/2" "stageHeight")
	(macro DRAW_GUIDE "0" "stageHeight/2" "stageWidth" "stageHeight/2")
)

(def element HUDbottomElementsContainer ()
	(scope
		(macro IS_ALIVE)
	)

	(controller $Instance renderer='HUDbottomElementsContent'
		(bind enabled "isAlive == true")
	)
)

(def element HUDbottomElementsContent () layout=true
	(style
		(align = "center|bottom")
	)

	(element ZonesCapturingIndicatorContainer
		(style
			(marginBottom = "XS")
			(hitTest = "false")
		)
	)

	(element LowerLog $autoPerfTestGroup="'logs'"
		(style
			(marginBottom = "XS")
			(hitTest = "false")
		)
	)
	
	(element AngleControl $autoPerfTestGroup="'indicator_angle'"
		(style
			(marginBottom = 17)
			(hitTest = "false")
		)
	)

	(element StatePanel $autoPerfTestGroup="'weapons_panel'"
		(style
			(marginBottom = "XXS")
		)
	)

	(element GunsReloadBarContainer $autoPerfTestGroup="'weapons_panel'"
		(style
			(marginBottom = "XS")
			(hitTest = "false")
		)
	)
	
	(element ShipWeaponsPanel $autoPerfTestGroup="'weapons_panel'"
		(style
			(marginBottom = "20") 
		)
	)
)
