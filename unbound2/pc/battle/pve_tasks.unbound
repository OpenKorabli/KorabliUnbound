(def constant SUBS_DATA_NAMES
	{
		ALLY_CARRIER:			"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ALLY	+	'0]'",
		ALLY_BATTLESHIP:		"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ALLY	+	'1]'",
		ALLY_CRUISER:			"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ALLY	+	'2]'",
		ALLY_DESTROYER:			"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ALLY	+	'3]'",
		ALLY_AUXILIARY_SMALL:	"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ALLY	+	'4]'",
		ALLY_SUBMARINE:			"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ALLY	+	'5]'",
		ENEMY_CARRIER_SMALL:	"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ENEMY	+	'0]'",
		ENEMY_BATTLESHIP_SMALL:	"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ENEMY	+	'1]'",
		ENEMY_CRUISER_SMALL:	"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ENEMY	+	'2]'",
		ENEMY_DESTROYER_SMALL:	"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ENEMY	+	'3]'",
		ENEMY_AUXILIARY_SMALL:	"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ENEMY	+	'4]'",
		ENEMY_SUBMARINE_SMALL:	"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.ENEMY	+	'5]'",
		CARRIER_SMALL_OWN:		"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.SELF	+	'0]'",
		BATTLESHIP_SMALL_OWN:	"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.SELF	+	'1]'",
		CRUISER_SMALL_OWN:		"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.SELF	+	'2]'",
		DESTROYER_SMALL_OWN:	"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.SELF	+	'3]'",
		SUBMARINE_SMALL_OWN:	"'[' + SC.Common.SHIP_CHAT_ICON_RELATION_PREFIX.SELF	+	'5]'"
	}
)

(def constant SUBS_DATA "{
		SUBS_DATA_NAMES.ALLY_CARRIER				:	'ally_carrier',
		SUBS_DATA_NAMES.ALLY_BATTLESHIP				:	'ally_battleship',
		SUBS_DATA_NAMES.ALLY_CRUISER				:	'ally_cruiser',
		SUBS_DATA_NAMES.ALLY_DESTROYER				:	'ally_destroyer',
		SUBS_DATA_NAMES.ALLY_AUXILIARY_SMALL		:	'ally_auxiliary_small',
		SUBS_DATA_NAMES.ALLY_SUBMARINE				:	'ally_submarine',
		SUBS_DATA_NAMES.ENEMY_CARRIER_SMALL			:	'enemy_carrier_small',
		SUBS_DATA_NAMES.ENEMY_BATTLESHIP_SMALL		:	'enemy_battleship_small',
		SUBS_DATA_NAMES.ENEMY_CRUISER_SMALL			:	'enemy_cruiser_small',
		SUBS_DATA_NAMES.ENEMY_DESTROYER_SMALL		:	'enemy_destroyer_small',
		SUBS_DATA_NAMES.ENEMY_AUXILIARY_SMALL		:	'enemy_auxiliary_small',
		SUBS_DATA_NAMES.ENEMY_SUBMARINE_SMALL		:	'enemy_submarine_small',
		SUBS_DATA_NAMES.CARRIER_SMALL_OWN			:	'carrier_small_own',
		SUBS_DATA_NAMES.BATTLESHIP_SMALL_OWN		:	'battleship_small_own',
		SUBS_DATA_NAMES.CRUISER_SMALL_OWN			:	'cruiser_small_own',
		SUBS_DATA_NAMES.DESTROYER_SMALL_OWN			:	'destroyer_small_own',
		SUBS_DATA_NAMES.SUBMARINE_SMALL_OWN			:	'submarine_small_own',
		'[sm_finish]'								:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_finish.png',
		'[sm_finish_enemy]'							:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_finish_enemy.png',
		'[sm_finish_ally]'							:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_finish_ally.png',
		'[sm_follow]'								:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_follow.png',
		'[sm_moveto]'								:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_move_to.png',
		'[sm_defend]'								:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_defend.png',
		'[sm_defend_ally]'							:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_defend_ally.png',
		'[sm_repair]'								:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_repair.png',
		'[sm_repair_enemy]'							:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_repair_enemy.png',
		'[sm_repair_ally]'							:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_repair_ally.png',
		'[sm_check_pointAir]'						:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_check_point_air.png',
		'[sm_attack]' 								:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_attack.png',
		'[sm_attack_enemy]'							:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_attack_enemy.png',
		'[sm_portal]'								:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_portal.png',
		'[sm_portal2020_off]'						:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_portal_off.png',
		'[sm_portal2020_on]'						:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_portal_on.png',
		'[sm_monsters]'								:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_monster.png',
		'[sm_main_monster]'							:	'url:../battle_hud/markers/scenario_markers/map/scenario_minimap_marker_main_monster.png',
		'[st_attack]'								:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_attack.png',
		'[st_defend]'								:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_defend.png',
		'[st_escort]'								:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_escort.png',
		'[st_repair]'								:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_repair.png',
		'[st_x2]'									:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_x2.png',
		'[st_x3]'									:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_x3.png',
		'[st_x4]'									:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_x4.png',
		'[st_x5]'									:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_x5.png',
		'[st_torpedoes]'							:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_torpedoes.png',
		'[st_AP]'									:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_AP.png',
		'[st_HE]'									:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_HE.png',
		'[st_CS]'									:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_CS.png',
		'[st_fire]'									:	'url:../battle_hud/markers/scenario_tags/icon_scenario_tag_fire.png'}"
)

(def element TasksList (_isCompactView:bool = false)
	(scope
		
		

		(var battleDataEntity:dhEntity = "getSingleEntity(CC.battleData)")
		(var gameModeId:number = "battleDataEntity.battleInfo.gameModeId")

		(var primaryTasksCollection:dhCollection = "getCollection(CC.task).getChildByPath('category.primary')")
		(var secondaryTasksCollection:dhCollection = "getCollection(CC.task).getChildByPath('category.secondary')")
	)
	(style (bind width "_isCompactView ? 354px : 500px"))

	

	(block
		(bind visible "primaryTasksCollection.length > 0")

		(style
			(width = 100%)
			(marginBottom = "_isCompactView ? XS : S")
		)

		(block
			(style
				(width = 100%)
				(marginBottom = "_isCompactView ? XS : S")
			)

			(controller $Instance renderer='TasksHeader'
				(args
					_isCompactView = "_isCompactView"
					_headerText = 'IDS_PRIMARYHEADER'
				)
			)
		)
		
		(block
			(style (width = 100%))

			(controller $Repeat renderer='TaskItemScenario'
				(bind count "primaryTasksCollection.length")
				(args
					_isCompactView = "_isCompactView"
					_taskEntityId = "primaryTasksCollection.items[$index].id"
					_isMainTask = true
				)
			)
		)
	)

	(block
		(bind visible "secondaryTasksCollection.length > 0")

		(style (width = 100%))

		(block
			(style
				(width = 100%)
				(marginBottom = "_isCompactView ? XS : S")
			)

			(controller $Instance renderer='TasksHeader'
				(args
					_isCompactView = "_isCompactView"
					_headerText = 'IDS_SECONDARYHEADER'
				)
			)
		)
		(block
			(style (width = 100%))

			(controller $Repeat renderer='TaskItemScenario'
				(bind count "secondaryTasksCollection.length")
				
				(args
					_isCompactView = "_isCompactView"
					_taskEntityId = "secondaryTasksCollection.items[$index].id"
				)
			)
		)
	)
)

(def element TasksHeader (_headerText:str, _isCompactView:bool)
	(style (width = 100%))

	(tf
		(bind class "_isCompactView ? '$TextDefaultBoldNM' : '$TextDefaultBold23NM'")
		(style
			(width = 100%)
			(bind marginBottom "_isCompactView ? S : SXS")
		)
		(bind text "_headerText")
	)
)

(def element TaskItemScenario (_isCompactView:bool, _taskEntityId:number = 0, _isMainTask:bool=false)
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	

	(scope
		
		
		

		
		

		(var taskEntity:dhEntity = "getEntity(_taskEntityId)")
		(var taskIDS:str = "taskEntity.task.text ?: ''")
		(var taskType:number = "taskEntity.task.progressType ?: 0")
		(var taskStatus:number = "taskEntity.task.status ?: SC.Battle.PVE_TASK_STATUS.NOT_STARTED" (event "taskEntity.task.evStatusChanged"))

		(var hasTimer:bool = "taskType == SC.Battle.PVE_TASK_TYPE.TIMER || taskType == SC.Battle.PVE_TASK_TYPE.REVERSED_TIMER && taskEntity.timeout")
		(var taskTime:number = "hasTimer ? taskEntity.timeout.time : null" (event "taskEntity.timeout.evTimeChanged"))

		(var battleDataEntity:dhEntity = "getSingleEntity(CC.battleTimer)")
		(var battleTime:number = "battleDataEntity.battleTimer.battleTime" (event "battleDataEntity.battleTimer.evBattleTimeChanged"))
		(var timerValue:number = "taskTime ? taskTime - battleTime : 0")
		(var countdownText:str = "hasTimer ? '(' + formatTime(timerValue, 'mm:ss', '', false) + ')' : ''")

		(var progressComponent:dhComponent = "taskEntity.progress")
		(var progressValue:number = "progressComponent.value ?: 0" (event "progressComponent.evChanged"))
		(var progressMax:number = "progressComponent.max ?: 0" (event "progressComponent.evChanged"))
		(var progressText:str = "	taskType == SC.Battle.PVE_TASK_TYPE.DIGIT			? '(' + progressValue + '/' + progressMax + ')' :
									taskType == SC.Battle.PVE_TASK_TYPE.DIGIT_SINGLE	? '(' + progressValue + ')'
																						: ''")
		(var taskText:str = "tr(taskIDS) + ' ' + ' <h3>' + countdownText + progressText + '</h3>'")

		(var taskStatusIcon:str = "	taskStatus == SC.Battle.PVE_TASK_STATUS.SUCCESS		? 'done.png' :
									taskStatus == SC.Battle.PVE_TASK_STATUS.NOT_STARTED	? 'not_started.png' :
									taskStatus == SC.Battle.PVE_TASK_STATUS.IN_PROGRESS	? 'not_started.png' 
																						: 'failed.png'")

		(var itemMargin:number = "_isCompactView ? M : MS")
	)

	(style
		(width = 100%)
		
		(flow = "horizontal")
		(bind marginBottom "itemMargin")
		(align = "middle")
	)

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	

	(block
		(style
			(width = 15px)
			(height = 11px)
			(bind backgroundImage "'url:../service_kit/icons/icon_task_' + taskStatusIcon")
		)
	)

	(block
		(style (width = 100%))

		(tf
			(bind class "_isCompactView ? '$TextDefaultNM' : '$TextDefault19NM'")
			(style
				(width = 100%)
				(bind marginLeft "_isCompactView ? '6px' : S")
				(leading = -4)
				(bind alpha "isIn(taskStatus, SC.Battle.PVE_TASK_STATUS.HIDDEN_IN_HUD_AFTER_COMPLETE) ? TS : 1")
				(styleSheet = "'h3{color: #9CBABA; font-weight:bold}'")
			)
			(bindcall substitute imageOffset=5  substitutionMap="SUBS_DATA" sourceText="'<body>' + taskText + '</body>'" postfix='' init=true)
		)
	)

	(block
		(style
			(position = "absolute")
			(left = 100%)
			(bind marginLeft "_isCompactView ? XS : S")
			(align = "middle")
			(height = 100%)
		)

		(controller $FxInstance lifetime="5"
			(bind renderer 'FxTaskItemScenarioStatus')
			(bind enabled "isIn(taskStatus, SC.Battle.PVE_TASK_STATUS.VISIBLE_STATUS) && _isCompactView")
			(bindcall create init=false on='addedToStage' (bind trigger "taskStatus"))
			(args
				_taskStatus = "taskStatus"
				_isCompactView = "_isCompactView"
				_isMainTask = "_isMainTask"
			)
		)
	)
)

(def element FxTaskItemScenarioStatus (_taskStatus:number, _isCompactView:bool, _isMainTask:bool=false)
	(scope
		(var isNeedToHideTask:bool = "isIn(_taskStatus, SC.Battle.PVE_TASK_STATUS.HIDDEN_IN_HUD_AFTER_COMPLETE) && !_isMainTask")
	)

	(style
		(pivotY = 50%)
		(pivotX = 50%)
	)


	

	(controller $Animation
		(bindcall play
			from={alpha:0, scaleY: 2, visualScaleX: 2, marginTop: 0, marginBottom: 0}
			to={alpha:1, scaleY: 1, visualScaleX: 1, marginTop: 2, marginBottom: 2}
			duration=0.2
			easing="Easing.bounce_in_out"
			on='addedToStage'
		)
		(bindcall play
			delay=4.5
			from={alpha:1, scaleY: 1, visualScaleX: 1, marginTop: 2, marginBottom: 2}
			to={alpha:0, scaleY: 0, visualScaleX: 0, marginTop: 0, marginBottom: 0}
			duration=0.2
			easing="Easing.bounce_out"
			on='addedToStage'
		)
	)

	(tf
		(bind class "_isCompactView ? '$TextDefaultBoldNM' : '$TextDefaultBold19NM'")
		(style
			(bind textColor "	_taskStatus == SC.Battle.PVE_TASK_STATUS.SUCCESS		? C_POSITIVE :
								_taskStatus == SC.Battle.PVE_TASK_STATUS.NOT_STARTED	? C_POSITIVE :
								_taskStatus == SC.Battle.PVE_TASK_STATUS.UPDATED		? C_POSITIVE :
								_taskStatus == SC.Battle.PVE_TASK_STATUS.IN_PROGRESS	? C_POSITIVE :
								_taskStatus == SC.Battle.PVE_TASK_STATUS.FAILURE		? C_CRITICAL :
								_taskStatus == SC.Battle.PVE_TASK_STATUS.CANCELED		? C_CRITICAL
																						: C_NEUTRAL	")
		)
		(bind text "'IDS_PVE_TASK_BATTLE_STATUS_' + SC.Battle.PVE_TASK_STATUS.VALUE_TO_NAME[_taskStatus]")
	)
)


