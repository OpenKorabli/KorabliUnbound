
(def constant FLYOFF_DAMAGE_TEXT_COLOR_MAP "{
# Ships and buildings
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_LIGHT: SC.Ui_styles.SERVICE_COLORS.YELLOW,
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_MEDIUM: SC.Ui_styles.SERVICE_COLORS.ORANGE,
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_HARD: SC.Ui_styles.SERVICE_COLORS.DARK_RED,
	SC.Battle.FLY_OFF_DAMAGE_STATE.ENEMY_LIGHT: SC.Ui_styles.SERVICE_COLORS.WHITE,
	SC.Battle.FLY_OFF_DAMAGE_STATE.ENEMY_MEDIUM: SC.Ui_styles.SERVICE_COLORS.WHITE,
	SC.Battle.FLY_OFF_DAMAGE_STATE.ENEMY_HARD: SC.Ui_styles.SERVICE_COLORS.WHITE,
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_TEAMKILLER_LIGHT: SC.Ui_styles.SERVICE_COLORS.PINK,
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_TEAMKILLER_MEDIUM: SC.Ui_styles.SERVICE_COLORS.PINK,
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_TEAMKILLER_HARD: SC.Ui_styles.SERVICE_COLORS.PINK,
	SC.Battle.FLY_OFF_DAMAGE_STATE.TEAMKILLER_LIGHT: SC.Ui_styles.SERVICE_COLORS.PINK,
	SC.Battle.FLY_OFF_DAMAGE_STATE.TEAMKILLER_MEDIUM: SC.Ui_styles.SERVICE_COLORS.PINK,
	SC.Battle.FLY_OFF_DAMAGE_STATE.TEAMKILLER_HARD: SC.Ui_styles.SERVICE_COLORS.PINK,

# Planes
	SC.Battle.FLY_OFF_DAMAGE_STATE.NORMAL_LIGHT: SC.Ui_styles.SERVICE_COLORS.WHITE,
	SC.Battle.FLY_OFF_DAMAGE_STATE.NORMAL_HARD: SC.Ui_styles.SERVICE_COLORS.WHITE,
	SC.Battle.FLY_OFF_DAMAGE_STATE.PRIORITY_LIGHT: SC.Ui_styles.SERVICE_COLORS.ORANGE,
	SC.Battle.FLY_OFF_DAMAGE_STATE.PRIORITY_HARD: SC.Ui_styles.SERVICE_COLORS.ORANGE,
	SC.Battle.FLY_OFF_DAMAGE_STATE.BARRAGE_LIGHT: SC.Ui_styles.SERVICE_COLORS.DARK_RED,
	SC.Battle.FLY_OFF_DAMAGE_STATE.BARRAGE_HARD: SC.Ui_styles.SERVICE_COLORS.DARK_RED
}")

(def constant FLYOFF_DAMAGE_TEXT_CLASS_MAP "{
# Ships and buildings
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_LIGHT: '$TextDefault17NM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_MEDIUM: '$TextDefault19NM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_HARD: '$TextDefault21NM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.ENEMY_LIGHT: '$TextDefaultNM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.ENEMY_MEDIUM: '$TextDefault17NM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.ENEMY_HARD: '$TextDefault19NM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_TEAMKILLER_LIGHT: '$TextDefault17NM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_TEAMKILLER_MEDIUM: '$TextDefault19NM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.SELF_TEAMKILLER_HARD: '$TextDefault21NM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.TEAMKILLER_LIGHT: '$TextDefaultNM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.TEAMKILLER_MEDIUM: '$TextDefault17NM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.TEAMKILLER_HARD: '$TextDefault19NM',

# Planes
	SC.Battle.FLY_OFF_DAMAGE_STATE.NORMAL_LIGHT: '$TextDefaultNM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.NORMAL_HARD: '$TextDefault19NM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.PRIORITY_LIGHT: '$TextDefaultNM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.PRIORITY_HARD: '$TextDefault19NM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.BARRAGE_LIGHT: '$TextDefaultNM',
	SC.Battle.FLY_OFF_DAMAGE_STATE.BARRAGE_HARD: '$TextDefault19NM'
}")

(def constant FLYOFF_DAMAGE_TEXT_SPECIAL_COLOR_MAP "{
	SC.Battle.FLY_OFF_DAMAGE_TYPE.OTHER: SC.Ui_styles.SERVICE_COLORS.WHITE,
	SC.Battle.FLY_OFF_DAMAGE_TYPE.STRAIGHT: SC.Ui_styles.SERVICE_COLORS.YELLOW,
	SC.Battle.FLY_OFF_DAMAGE_TYPE.PENETRATION: SC.Ui_styles.SERVICE_COLORS.ORANGE,
	SC.Battle.FLY_OFF_DAMAGE_TYPE.CITADEL: SC.Ui_styles.SERVICE_COLORS.DARK_RED
}")

(def constant FLYOFF_DAMAGE_TEXT_SPECIAL_CLASS_MAP "{
	SC.Battle.FLY_OFF_DAMAGE_TYPE.OTHER: '$TextDefaultNM',
	SC.Battle.FLY_OFF_DAMAGE_TYPE.STRAIGHT: '$TextDefaultNM',
	SC.Battle.FLY_OFF_DAMAGE_TYPE.PENETRATION: '$TextDefault17NM',
	SC.Battle.FLY_OFF_DAMAGE_TYPE.CITADEL: '$TextDefault21NM'
}")


(def element FlyOffDamageContainer ()
	(scope
		(macro STAGE_SIZE)
		(macro IS_ALIVE)

		(var flyOffDamageMessages:gfx = "$datahub.getCollection(CC.flyOffDamageMessage)")
	)

	(style
		(bind width "stageWidth")
		(bind height "stageHeight")
		(position = "absolute")
	)

	(controller $Repeat renderer='FlyOffDamageMessage'
		(bind count "flyOffDamageMessages.length" watch=false (event "flyOffDamageMessages.evAdded"))
		(bindcall removeChildAt "$event[1]" (event "flyOffDamageMessages.evRemoved"))
		(args
			_flyOffDamageMessages = "flyOffDamageMessages"
		)
	)
)

(def element FlyOffDamageMessage (_flyOffDamageMessages:gfx)
	(scope
		(event evMarkerUpdate)
		(event evFlyOffDamageEnded)

		(var flyOffDamageMessageEntity:gfx = "_flyOffDamageMessages.items[$index]" watch=false)
		(var flyOffDamageMessage:gfx = "flyOffDamageMessageEntity.flyOffDamageMessage")
		(var damage:number = "flyOffDamageMessage.damage")
		(var damageState:number = "flyOffDamageMessage.damageState")
		(var damageType:number = "flyOffDamageMessage.damageType")
		(var modules:array = "flyOffDamageMessage.modules")
		(var offsetY:number = "flyOffDamageMessage.offsetY")

		(var screenPosition:gfx = "flyOffDamageMessageEntity.screenPosition")
		(var posY:number = "screenPosition.position.y - offsetY" (event "evMarkerUpdate"))
		(var posX:number = "screenPosition.position.x" (event "evMarkerUpdate"))

		(var isSpecialDamageType:bool = "damageType != SC.Battle.FLY_OFF_DAMAGE_TYPE.NONE")
		(var isCitadel:bool = "damageType == SC.Battle.FLY_OFF_DAMAGE_TYPE.CITADEL")
		(var isShortAnimation:bool = "damageType == SC.Battle.FLY_OFF_DAMAGE_TYPE.OTHER || damageType == SC.Battle.FLY_OFF_DAMAGE_TYPE.STRAIGHT")

		(var updateEnabled:bool = "!(screenPosition.behindCamera)" (event "evEnterFrame"))
	)

	(dispatch evMarkerUpdate args={} (event "evEnterFrame") (bind enabled "updateEnabled"))

	(bindcall externalCall 'direct.action' "['battle.flyOffDamageEnded', [flyOffDamageMessageEntity.id]]" init=false (event "evFlyOffDamageEnded"))

	(style
		(position = "absolute")
		(flow = "horizontal")
		(align = "middle|center")
		(pivotY = 50%)
		(pivotX = 50%)
		(bind top "posY")
		(bind left "posX")
	)

	(controller $Animation
		(bindcall play
			keyframes =
			"[
				{time:0,	to:{ alpha:0, visualOffsetY: 0px, scaleX: 1, scaleY: 1 }},
				{time:0.3,	to:{ alpha:1, visualOffsetY: -24px, scaleX: 2, scaleY: 2 }, easing:Easing.quad_in_out},
				{time:0.4,	to:{ alpha:1, visualOffsetY: -24px, scaleX: 1, scaleY: 1 }},
				{time:0.8,	to:{ alpha:1, visualOffsetY: -24px, scaleX: 1, scaleY: 1 }},
				{time:1.75,	to:{ alpha:0, visualOffsetY: -60px, scaleX: 1, scaleY: 1 }, easing:Easing.quad_in_out}
			]"
			on='addedToStage'
			(bind enabled "!isCitadel && !isShortAnimation")
		)
		(bindcall play
			keyframes =
			"[
				{time:0,	to:{ alpha:0, visualOffsetY: 0px, scaleX: 1, scaleY: 1 }},
				{time:0.3,	to:{ alpha:1, visualOffsetY: -24px, scaleX: 3.0, scaleY: 3.0 }, easing:Easing.quad_in_out},
				{time:0.6,	to:{ alpha:1, visualOffsetY: -24px, scaleX: 1, scaleY: 1 }},
				{time:1.8,	to:{ alpha:1, visualOffsetY: -24px, scaleX: 1, scaleY: 1 }},
				{time:2.5,	to:{ alpha:0, visualOffsetY: -60px, scaleX: 1, scaleY: 1 }, easing:Easing.quad_in_out}
			]"
			on='addedToStage'
			(bind enabled "isCitadel")
		)
		(bindcall play
			keyframes =
			"[
				{time:0,	to:{ alpha:0, visualOffsetY: 0px, scaleX: 1, scaleY: 1 }},
				{time:0.3,	to:{ alpha:1, visualOffsetY: -24px, scaleX: 2.0, scaleY: 2.0 }, easing:Easing.quad_in_out},
				{time:0.4,	to:{ alpha:1, visualOffsetY: -24px, scaleX: 1, scaleY: 1 }},
				{time:0.6,	to:{ alpha:1, visualOffsetY: -24px, scaleX: 1, scaleY: 1 }},
				{time:1.0,	to:{ alpha:0, visualOffsetY: -60px, scaleX: 1, scaleY: 1 }, easing:Easing.quad_in_out}
			]"
			on='addedToStage'
			(bind enabled "isShortAnimation")
		)
		(dispatch evFlyOffDamageEnded dir="EventDirection.UP" on='evAnimEnded')
	)

	(hblock
		(style
			(bind marginRight "modules.length ? 10px : 0px")
		)
		(controller $Repeat renderer='DamagedModuleIcons'
			(bind count "modules.length")
			(args
				_moduleData = "modules[$index]"
			)
		)
	)

	(block
		(controller $Instance renderer='DamageDefaultText'
			(bind enabled "damage > 0 && !isSpecialDamageType")
			(args
				_damageState = "damageState"
				_damageValue = "damage"
			)
		)

		(controller $Instance renderer='DamageSpecialText'
			(bind enabled "damage > 0 && isSpecialDamageType")
			(args
				_damageType = "damageType"
				_damageValue = "damage"
			)
		)
	)
)

(def element DamagedModuleIcons (_moduleData:gfx)
	(scope
		(var count:number = "_moduleData.count")
		(var moduleType:number = "_moduleData.moduleType")
	)

	(style
		(width = 44px)
		(height = 44px)
		(backgroundImage = "'bitmap:icon_module_' + moduleType +'_1'")
	)

	(tf
		(style
			(position = "absolute")
			(top = 34px)
			(left = 34px)
			(alpha = "TC")
		)
		(class $TextDefault12NM)
		(bind text "'x' + count")
	)
)

(def element DamageDefaultText (_damageState:number, _damageValue:number)
	(tf
		(bind class "FLYOFF_DAMAGE_TEXT_CLASS_MAP[_damageState]")
		(style
			(bind textColor "FLYOFF_DAMAGE_TEXT_COLOR_MAP[_damageState]")
		)
		(bind text "_damageValue")
	)
)

(def element DamageSpecialText (_damageType:number, _damageValue:number)
	(tf
		(bind class "FLYOFF_DAMAGE_TEXT_SPECIAL_CLASS_MAP[_damageType]")
		(style
			(bind textColor "FLYOFF_DAMAGE_TEXT_SPECIAL_COLOR_MAP[_damageType]")
		)
		(bind text "_damageValue")
	)
)
