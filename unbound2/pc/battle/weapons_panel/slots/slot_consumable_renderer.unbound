(def element SlotConsumableRenderer (_totalCount:number, _col:gfx)
	(scope
		(var col:gfx = "_col") 
		(var itemsList:array = "col.items" (event "col.evUpdated"))
		(var consumableEntity:gfx = "itemsList[$index]" (event "col.evUpdated"))
		(var battleConsumable:gfx = "consumableEntity.battleConsumable")
		(var consumableName:str = "battleConsumable.ident")
		(var consumableCmd:str = "battleConsumable.cmd")
		(var consumableNum:number = "battleConsumable.consumeNum" (event "battleConsumable.evConsumeNumChanged"))
		(var consumableState:number = "battleConsumable.state" (event "battleConsumable.evStateChanged"))
		(var ownerSquadronId:number = "battleConsumable.ownerSquadronId" (event "battleConsumable.evStateChanged"))
		(var consumableIndex:number = "battleConsumable.index"  (event "battleConsumable.evStateChanged"))
		(var isLocked:bool = "battleConsumable.isLocked" (event "battleConsumable.evIsLockedChanged"))

		(var atWork:bool = "consumableState == SC.Battle.CONSUMABLE_STATES.AT_WORK")
		(var isReloadState:bool = "consumableState == SC.Battle.CONSUMABLE_STATES.RELOAD")
		(var isReloading:bool = "isIn(consumableState, SC.Battle.CONSUMABLE_STATES.RELOADING_STATES) || atWork")

		(var consumePostfix:str = "consumableNum == 0 && !(atWork) ? '_empty' : ''")
		(var itemImageUrl:str = "'url:../consumables/' + consumableName + consumePostfix + '.png'")
		
		(var timerEntity:gfx = "$datahub.getSingleEntity(CC.timer)")
		(var countdown:gfx = "consumableEntity && consumableEntity.hasComponent(CC.countDown) ? consumableEntity.countDown : null" (event "consumableEntity.evAdded") (event "consumableEntity.evRemoved"))		
		(var remainTime:number = "countdown ? countdown.endTime - timerEntity.timer.currentTime : 0" (event "timerEntity.timer.evFrequent") (event "countdown.evEndTimeChanged"))
		(var percentPassed:number = "countdown ? remainTime / countdown.duration : 1")

		(var isAutoConsumable:bool = "battleConsumable.isAutoConsumable")

		(var cmdEntity:gfx =  "$datahub.getPrimaryEntity(CC.commandMappingCommandName, consumableCmd)")
		(var commandId:number = "isAutoConsumable ? 0 : cmdEntity.commandMappingCommand.id" (event  "cmdEntity.commandMappingCommand.evChanged"))

		(var _width:number = "SLOT_SIZE")
		(var _height:number = "SLOT_SIZE")
	)

	(style
		(width = "_width")
		(height = "_height")
		(bind marginRight "($index + 1) != _totalCount ? PANEL_ITEM_MARGIN : 0")
	)

	
	(controller $Instance renderer='LabelAuto'
		(bind enabled "commandId == 0")
	)

	(block
		(class $FullsizeAbsolute)

		(element SlotItem
			(scope
				(bind _itemImageUrl "itemImageUrl")
				(bind _isSelectable "commandId != null")
				(bind _width "_width")
				(bind _height "_height")
				(bind _isLocked "isLocked")
			)
		)

		
		(element SlotReloadBar
			(scope
				(bind _atWork "atWork")
				(bind _percentPassed "percentPassed")
				(bind _remainTime "remainTime > 0 ? remainTime : 0")
			)
			(class $FullsizeAbsolute)
			(bind visible "isReloading")
		)

		
		(block
			(class $FullsizeAbsolute)
			(tf
				(bind visible "(consumableNum > 0 && !isLocked)")
				(style (position = "absolute") (top = "XS") (right = "XS"))
				(class $TextDefaultBoldNM)
				(bind text "consumableNum")
			)
		)

		
		(block
			(class $FullsizeAbsolute)
			(controller $FxInstance lifetime=0.5
				(bind renderer 'SlotWorkStartedFX')
				(bindcall create (bind enabled "atWork"))
			)
			(controller $FxInstance lifetime=0.5
				(bind renderer 'SlotWorkStartedFX')
				(args
					accented="true"
				)
				(bindcall create (event "battleConsumable.evReloadEnded"))
			)
			(controller $FxInstance lifetime=0.5
				(bind renderer "'SlotReloadStartedFX'")
				(bindcall create (bind enabled "isReloadState"))
			)
		)

		
		(block
			(style
				(position = "absolute")
				(left = "-(SLOT_FX_SIZE - SLOT_SIZE) / 2")
				(top = "-(SLOT_FX_SIZE - SLOT_SIZE) / 2")
			)
			(bind visible "atWork")
			(block
				(style
					(backgroundImage = 'url:../battle_hud/weapons_panel/slot/weapon_panel_slot_stroke_green.png')
					(backgroundSize = "fill")
					(width = "SLOT_FX_SIZE")
					(height = "SLOT_FX_SIZE")
				)
			)
		)
	)

	(element HIT_TEST_TOOLTIP_CONTAINER
		(macro MOUSE_LMB_EXTERNAL_CALL 'direct.action' "['battle.useConsumable', [{consumableIndex: consumableIndex, squadronId: ownerSquadronId}]]" "!(isAutoConsumable)")
		
		(controller $Tooltip (renderer = 'BattleConsumableTooltip')
			(args _consumableEntityId="consumableEntity.id")
			(align="bottom|center")
			(position="border")
			(offset=[0, 20])
			(screenBoundsOffset={left:10, top:30, right:10, bottom:100})
			(macro SIMPLE_TOOLTIP_ANIMATION)
		)
	)

	
	(controller $Instance (renderer = 'HotkeyIndicator')
		(bind enabled "commandId && !isAutoConsumable")
		(args _commandId="commandId" _toggled="atWork")
		(exprs
			(style
				(bottom = "-HOTKEY_SIZE[SIZE.MEDIUM]")
				(position = "absolute")
				(hcenter = "0px")
			)
		)
	)
)

