
(def constant RESULT_ANIMATION_NAME {
	"SC.Battle.BATTLE_RESULT.DEFEAT":	'lose',
	"SC.Battle.BATTLE_RESULT.VICTORY":	'win',
	"SC.Battle.BATTLE_RESULT.DRAW":		'draw',
	"SC.Battle.BATTLE_RESULT.FIRST_BATTLE_LOST": 'draw'
})

(def constant RESULT_TEXT_IDS {
	"SC.Battle.BATTLE_RESULT.DEFEAT":	'IDS_DEFEAT',
	"SC.Battle.BATTLE_RESULT.VICTORY":	'IDS_VICTORY',
	"SC.Battle.BATTLE_RESULT.DRAW":		'IDS_DRAW',
	"SC.Battle.BATTLE_RESULT.FIRST_BATTLE_LOST": 'IDS_BATTLE_FINISHED'
})

(def constant RESULT_TEXT_COLOR {
	"SC.Battle.BATTLE_RESULT.DEFEAT":	0xFFB5A6,
	"SC.Battle.BATTLE_RESULT.VICTORY":	0x99FFD6,
	"SC.Battle.BATTLE_RESULT.DRAW":		0xE1E7F5,
	"SC.Battle.BATTLE_RESULT.FIRST_BATTLE_LOST": 0xE1E7F5
})


(def element EndBattleIdlingResults () layout=true
	(scope
		(macro IS_SPECTATOR_MODE)
		(var avatar:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var isPlayer:bool = "avatar != null")
		(var isReallySpectator:bool = "!isPlayer && isSpectator")

		(var battleStateEntity:dhEntity = "getSingleEntity(CC.battleState)")
		(var battleStateComponent:dhComponent = "battleStateEntity.battleState")

		(var resultId:number = "battleStateComponent ? battleStateComponent.resultId : -1" (event "battleStateComponent.evBattleResultsChanged"))
		(var winnerTeamText:str = "battleStateComponent.winnerTeamText" (event "battleStateComponent.evBattleResultsChanged"))

		(var challengeParticipant:gfx= "avatar.challengeParticipant" (event "avatar.evAdded"))
		(var isChallengeParticipant:bool= "challengeParticipant != null")
		(var wonPosition:number= "challengeParticipant.wonPosition ?: 0" (event "challengeParticipant.evWonPositionChanged"))

		(var challengeResultText:str = "isReallySpectator || wonPosition == 0 ? toUpper(tr('IDS_SYS_MSG_BATTLE_RESULTS')) : toUpper(subst('IDS_CHALLENGE_BATTLE_ENDED', [], { _position: wonPosition }))")

		(var trialComponent:dhComponent = "getSingleComponent(CC.trial)")
		(var isTrialsEnabled:bool = "trialComponent != null")
		(var trialRound:number = "trialComponent.trialRound ?: 0" (event "trialComponent.evTrialInfoChanged"))
		(var trialRoundsCount:number = "trialComponent.trialsCount ?: 0" (event "trialComponent.evTrialInfoChanged"))
		(var targetScore:number = "trialComponent.targetScore ?: 0" (event "trialComponent.evTrialInfoChanged"))
		(var scoresAchieved:number = "trialComponent.scores ?: 0" (event "trialComponent.evTrialInfoChanged"))
		(var isMultipleRounds:bool = "trialRound > 1")
		(var isTargetScoreAchieved:bool = "scoresAchieved >= targetScore")
		(var bestRound:number = "	isMultipleRounds && isTargetScoreAchieved		? trialRound :
									isMultipleRounds && !isTargetScoreAchieved		? trialRound - 1
																					: 0")
		(var trialsResultText:str = "toUpper(subst('IDS_TRIAL_ROUND_RESULTS', [], { _bestRound: bestRound, _totalRounds: trialRoundsCount}))")

		(var resultAnimName:str = "	isReallySpectator		? RESULT_ANIMATION_NAME[SC.Battle.BATTLE_RESULT.DRAW] :
									isChallengeParticipant	? wonPosition == 1 	? RESULT_ANIMATION_NAME[SC.Battle.BATTLE_RESULT.VICTORY]
																				: RESULT_ANIMATION_NAME[SC.Battle.BATTLE_RESULT.DRAW]
															: RESULT_ANIMATION_NAME[resultId]")

		(var resultText:str = "	isChallengeParticipant 	? challengeResultText :
								isReallySpectator 		? toUpper(tr(winnerTeamText)) :
								isTrialsEnabled			? trialsResultText
														: toUpper(tr(RESULT_TEXT_IDS[resultId]))")

		(var resultColorText:number = "	isReallySpectator		? RESULT_TEXT_COLOR[SC.Battle.BATTLE_RESULT.DRAW] :
										isChallengeParticipant	? wonPosition == 1 	? RESULT_TEXT_COLOR[SC.Battle.BATTLE_RESULT.VICTORY]
																					: RESULT_TEXT_COLOR[SC.Battle.BATTLE_RESULT.DRAW]
																: RESULT_TEXT_COLOR[resultId]")
	)
	(class $FullsizeAbsolute)

	(block
		(class $FullsizeAbsolute)
		(style
			(bind backgroundImage "'url:../animations/spine/end_of_battle/' + resultAnimName + '.skel'")
			(backgroundSize = "cover")
			(height = 400px)
			(hitTest = false)
		)
		(controller $Spine)
	)

	(block
		(class $MiddleAlignedAbsolutely)
		(style (top = 206px) (pivotX = 50%) (pivotY = 50%))

		(controller $Animation
			(bindcall play
				from="{scaleX: 2, scaleY: 2}"
				to="{scaleX: 1, scaleY: 1}"
				duration=0.35
				easing="Easing.quint_out"
				action="kill"
				on='addedToStage'
			)
		)
		(controller $Animation
			(bindcall play
				from="{alpha:0}"
				to="{alpha:1}"
				duration=0.65
				easing="Easing.quint_out"
				action="kill"
				on='addedToStage'
			)
		)
		(tf
			(class $TextDefaultBold64NMWithoutShadow)
			(style (bind textColor "resultColorText"))
			(bind text "resultText")
		)
	)
)