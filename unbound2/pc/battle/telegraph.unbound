(def constant CRUISE_ITEM_WIDTH 39)
(def constant CRUISE_ITEM_HEIGHT 19)
(def constant CRUISE_ITEM_MARGIN 2)

(def constant DEPTH_ITEM_WIDTH 23)
(def constant DEPTH_ITEM_HEIGHT 15)
(def constant DEPTH_TEXT_HEIGHT 23)
(def constant DEPTH_HOTKEYS_MARGIN 20)

(def constant DEPTH_RULER_LINE_SIZE 3)

(def constant DEPTH_METR_WIDTH 13)
(def constant DEPTH_METR_HEIGHT 181)
(def constant COUNT_MAX_MIN_DEPTH_LINE 2)
(def constant MULTIPLY_DEPHT_FOR_CONVERT_TO_HEIGHT 3)

(def constant SPEED_CONTROL_VALUES "{
	'-1':'scale_value_full',
	'0':'scale_value_stop',
	'1':'scale_value_1_4',
	'2':'scale_value_1_2',
	'3':'scale_value_3_4',
	'4':'scale_value_full'
}")

(def constant ANGLE_CONTROL_VALUES "{
	'-2':'scale_value_max',
	'-1':'scale_value_1_2',
	'0':'scale_value_0',
	'1':'scale_value_1_2',
	'2':'scale_value_max'
}")

(def css $TelegraphMeasureText ()
	(extends $TextDefault17NM)
	(extends $FontEnableReadability)
)

(def css $TelegraphValueText ()
	(extends $TextDefaultBold17NM)
	(extends $FontEnableReadability)
)

(def element SpeedControl ()
	(scope
		(macro IS_ALIVE)
		(macro STAGE_SIZE)

		(var ownCarrierEntity:dhEntity = "getSingleEntity(CC.aircarrier)")
		(var aircarrier:dhComponent = "ownCarrierEntity.aircarrier")
		(var activeSquadron:number = "aircarrier.activeSquadron" (event "aircarrier.evStateChanged"))
		(var squadronCameraMode:str = "aircarrier.squadronCameraMode" (event "aircarrier.evSquadronCameraModeChanged"))

		(var isEnabled:bool = "isAlive && (aircarrier == null || activeSquadron == DEFAULT_SQUADRON_OWNER_ID && squadronCameraMode == SquadronCameraModes.DEFAULT)")
	)

	(style
		(bind width "stageWidth")
		(bind height "stageHeight")
	)

	(block
		(style
			(position = "absolute")
			(bottom = 51px)
			(left = 245px)
		)
		(controller $Instance renderer='SpeedControlContent'
			(bind enabled "isEnabled")
		)
	)
)

(def element SpeedControlContent ()

	(scope
		(var cruiseEntity:dhEntity = "getPrimaryEntity(CC.cruise, SC.Battle.CRUISE_CONTROL_TYPE.SPEED)")
		(var speedItemsNumber:number = "cruiseEntity.cruise ? cruiseEntity.cruise.states.length : 0")

		(var maxSpeed:number = "cruiseEntity.cruise ? cruiseEntity.cruise.max : 1")
		(var minSpeed:number = "cruiseEntity.cruise ? cruiseEntity.cruise.min : -1")

		(var speed:number = "cruiseEntity.cruise ? 
							(cruiseEntity.cruise.value > maxSpeed  ? maxSpeed :
							 cruiseEntity.cruise.value < minSpeed  ? minSpeed
												: cruiseEntity.cruise.value)
							 : 0" (event "cruiseEntity.cruise.evValueChanged"))

		(var speedWarning:number = "cruiseEntity.cruiseLimit ? cruiseEntity.cruiseLimit.limitValue : 0")
		(var clampedSpeedWarning:number = "speedWarning > maxSpeed ? maxSpeed : speedWarning")
		(var limitWarningEnabled:bool = "cruiseEntity.cruiseLimit ? cruiseEntity.cruiseLimit.limitWarningEnabled : false" (event "cruiseEntity.cruiseLimit.evLimitWarningEnabledChanged"))

		(var fwdItemsNum:number = "cruiseEntity.cruise ? cruiseEntity.cruise.statesPositiveNum : 1")
		(var bwdItemsNum:number = "cruiseEntity.cruise ? cruiseEntity.cruise.statesNegativeNum : 1")

		(var speedItemHeight:number = "CRUISE_ITEM_HEIGHT + CRUISE_ITEM_MARGIN * 2")

		(var speedPointerPosition:number = "speed / (speed > 0 ? -maxSpeed : minSpeed) * speedItemHeight * (speed > 0 ? fwdItemsNum : bwdItemsNum)")
		(var speedWarningPointerPosition:number = "- clampedSpeedWarning / maxSpeed * speedItemHeight * fwdItemsNum")

		
		(var forwardSpeedStepSize:number = "maxSpeed / fwdItemsNum")
		(var backwardSpeedStepSize:number = "minSpeed / bwdItemsNum")
		(var relativeSpeedState:number = "speed > 0 ? (speed / forwardSpeedStepSize)
													: -(speed / backwardSpeedStepSize)")

		(macro CUSTOM_ELEMENT_VISIBILITY_SCOPE)
		(var isDreadnoughtCustomization:bool = "(customisedElements & SC.Battle.CUSTOM_BATTLE_ELEMENTS.DREADNOUGHT) > 0")
	)

	(style
		(bind visualOffsetX "isDreadnoughtCustomization ? 100px : 0px")
	)

	
	(block
		(style
			(position = "absolute")
			(bind left "CRUISE_ITEM_WIDTH")
			(bind top "speedItemHeight * fwdItemsNum")
		)
		(controller $Instance (renderer = 'SpeedPointer')
			(exprs
				(style
					(position = "absolute")
					(bind top "speedPointerPosition + CRUISE_ITEM_MARGIN")
				)
			)
		)

		(controller $Instance (renderer = 'SpeedLimitPointer')
			(bind enabled "limitWarningEnabled")
			(exprs
				(style
					(position = "absolute")
					(bind top "speedWarningPointerPosition")
				)
			)
		)
	)

	
	(controller $Repeat renderer = 'SpeedItem'
		(bind count "speedItemsNumber")
		(args
			_relativeSpeedState = "relativeSpeedState"
		)
	)
)

(def element SpeedItem (_relativeSpeedState:number)
	(scope
		(var cruiseEntity:dhEntity = "getPrimaryEntity(CC.cruise, SC.Battle.CRUISE_CONTROL_TYPE.SPEED)")
		(var cruiseComponent:dhComponent = "cruiseEntity.cruise")
		(var allowedStates:array = "cruiseComponent.allowedStates" (event "cruiseComponent.evAllowedStatesChanged"))
		(var isDisabled:bool = "!isIn(cruiseComponent.states[$index], allowedStates)")

		(var isDebuffDepth:bool = "cruiseComponent.isDebuffDepth" (event "cruiseComponent.evDebuffDepthChanged"))
		(var isSoftCriticalEnabled:bool = "cruiseComponent.softCriticalEnabled" (event "cruiseComponent.evJammedChanged"))
		(var isJammed:bool = "cruiseComponent.jammed" (event "cruiseComponent.evJammedChanged"))

		(var state:number = "cruiseComponent.state ?: 0" (event "cruiseComponent.evStateChanged"))

		(var battleInfoComponent:dhComponent = "getSingleComponent(CC.battleInfo)")

		(var isSet:bool = "state == cruiseComponent.states[$index]")
		(var isHighlighted:bool = "abs(_relativeSpeedState - cruiseComponent.states[$index]) < 0.5 || isSet")

		(var isSoftCriticalEnabledState:bool = "isSoftCriticalEnabled || isDebuffDepth" (event "cruiseComponent.evJammedChanged"))
		(var isJammedState:bool = "isJammed || isDebuffDepth || isDisabled" )

		(var hotkeyState:number = "isJammedState	? isSoftCriticalEnabledState	? HotkeyState.WARNING
																					: HotkeyState.CRITICAL
													: state == 0					? HotkeyState.WARNING
																					: HotkeyState.DEFAULT")

		(var stateFolder:str = "	cruiseComponent.states[$index] == 0 && isSet	? 'default/'
																					: !isSet	? isJammedState	? isSoftCriticalEnabledState	? 'yellow/'
																																				: 'red/'
																												: 'default/'
																								: 'black/'")
	)

	(style
		(bind width "CRUISE_ITEM_WIDTH")
		(bind height "CRUISE_ITEM_HEIGHT")
		(marginTop = "CRUISE_ITEM_MARGIN")
		(marginBottom = "CRUISE_ITEM_MARGIN")
	)

	(element HotkeyBackground _hotkeyState="hotkeyState"
		(visible = "isSet")
		(alpha = "state == 0 ? 0.75 : 1")
		(controller $Animation
			(bindcall play  duration = 0.15
							easing = "Easing.cubic_out"
							from = "{ alpha: 0, visible: false }"
							to = "{ alpha: state == 0 ? 0.75 : 1, visible: true }"
							(bind enabled "isSet")
			)
			(bindcall play  duration = 0.15
							easing = "Easing.cubic_out"
							to = "{ alpha: 0, visible: false }"
							(bind enabled "!(isSet)")
			)
		)
	)

	(block
		(alpha = "isHighlighted ? 1 : 0.5")
		(style
			(bind backgroundImage "'url:../battle_hud/cruise_control/scale_values/' + stateFolder + SPEED_CONTROL_VALUES[cruiseComponent.states[$index]] + '.png'")
		)
		(controller $Animation
			(bindcall play  duration = 0.3
							easing = "Easing.cubic_out"
							from = { alpha: 0.5 }
							to = { alpha: 1 }
							reverse = "!(isHighlighted)"
							(bind trigger "isHighlighted")
			)
		)
	)
)

(def element SpeedPointer ()
	(scope
		(var cruiseEntity:dhEntity = "getPrimaryEntity(CC.cruise, SC.Battle.CRUISE_CONTROL_TYPE.SPEED)")

		(var speed:number = "cruiseEntity.cruise ? cruiseEntity.cruise.value : 0" (event "cruiseEntity.cruise.evValueChanged"))

		(var limitWarning:bool = "cruiseEntity.cruiseLimit ? cruiseEntity.cruiseLimit.limitWarning : false" (event "cruiseEntity.cruiseLimit.evLimitWarningChanged"))
		(var limitWarningEnabled:bool = "cruiseEntity.cruiseLimit ? cruiseEntity.cruiseLimit.limitWarningEnabled : false" (event "cruiseEntity.cruiseLimit.evLimitWarningEnabledChanged"))

		(var softCriticalEnabled:bool = "cruiseEntity.cruise ? cruiseEntity.cruise.softCriticalEnabled : false" (event "cruiseEntity.cruise.evJammedChanged"))
		(var isJammed:bool = "cruiseEntity.cruise ? cruiseEntity.cruise.jammed : false" (event "cruiseEntity.cruise.evJammedChanged"))

		(var isLimitSpeeding:bool = "limitWarning && limitWarningEnabled")

		(var textClass:str = "isJammed      ? softCriticalEnabled   ? '$TextColorWarning'
																	: '$TextColorHUDCritical'
											: isLimitSpeeding   ? '$TextColorWarning'
																: '$TextColorNeutral'")

		(var pointerColor:str = "isJammed   ? softCriticalEnabled   ? 'yellow'
																	: 'red'
											: isLimitSpeeding   ? 'yellow'
																: 'white'")
	)
	(style
		(position = "absolute")
		(width = "CRUISE_ITEM_WIDTH")
		(height = "CRUISE_ITEM_HEIGHT")
		(align = "middle")
	)

	
	(block
		(style
			(position = "absolute")
			(top = "18px")
			(bind backgroundImage "'url:../battle_hud/cruise_control/pointers/pointer_' + pointerColor + '.png'")
			(rotation = "-90")
		)
	)
	
	(hblock
		(style (marginLeft = "15px"))
		(tf
			(class $TelegraphValueText)
			(bind class "textClass")
			(bind text "(speed < -0.09 ? '-' : '') + formatFloatingPoint(abs(speed), 1)") 
		)
		(tf
			(class $TelegraphMeasureText)
			(bind class "textClass")
			(alpha = 0.7)
			(bind text "' kts'")
		)
	)
)

(def element SpeedLimitPointer ()
	(scope
		(var cruiseEntity:dhEntity = "getPrimaryEntity(CC.cruise, SC.Battle.CRUISE_CONTROL_TYPE.SPEED)")
		(var limitWarning:bool = "cruiseEntity.cruiseLimit.limitWarning" (event "cruiseEntity.cruiseLimit.evLimitWarningChanged"))
	)

	(block
		(style
			(position = "absolute")
			(top = "18px")
			(bind backgroundImage "limitWarning ? 'url:../battle_hud/cruise_control/pointers/pointer_speed_limit_warning.png' : 'url:../battle_hud/cruise_control/pointers/pointer_speed_limit_default.png'")
			(rotation = "-90")
		)
	)
)

(def element AngleControl ()
	(scope
		(macro IS_ALIVE)

		(var ownCarrierEntity:dhEntity = "getSingleEntity(CC.aircarrier)")
		(var aircarrier:dhComponent = "ownCarrierEntity.aircarrier")
		(var activeSquadron:number = "aircarrier.activeSquadron ?: 0" (event "aircarrier.evStateChanged"))
		(var squadronCameraMode:str = "aircarrier.squadronCameraMode" (event "aircarrier.evSquadronCameraModeChanged"))

		(var isEnabled:bool = "isAlive && (aircarrier == null || activeSquadron == DEFAULT_SQUADRON_OWNER_ID && squadronCameraMode == SquadronCameraModes.DEFAULT)")
	)

	(bind alpha "isEnabled ? 1 : 0")

	(element AngleControlContent
		
	)
)

(def element AngleControlContent ()
	(scope
		(var angleEntity:dhEntity = "getPrimaryEntity(CC.cruise, SC.Battle.CRUISE_CONTROL_TYPE.ANGLE)")
		(var angle:number = "angleEntity.cruise ? angleEntity.cruise.value : 0" (event "angleEntity.cruise.evValueChanged"))
		(var maxAngle:number = "angleEntity.cruise ? angleEntity.cruise.max : 1")
		(var stepsNum:number = "angleEntity.cruise ? angleEntity.cruise.statesPositiveNum : 1")
		(var softCriticalEnabled:bool = "angleEntity.cruise ? angleEntity.cruise.softCriticalEnabled : false" (event "angleEntity.cruise.evJammedChanged"))
		(var isJammed:bool = "angleEntity.cruise ? angleEntity.cruise.jammed : false" (event "angleEntity.cruise.evJammedChanged"))
		(var state:number = "angleEntity.cruise ? angleEntity.cruise.state : 0" (event "angleEntity.cruise.evStateChanged"))

		(var angleItemWidth:number = "CRUISE_ITEM_WIDTH")
		(var angleStepSize:number = "maxAngle / stepsNum")
		(var relativeAngleState:number = "angle / angleStepSize")

		(var anglePointerX:number =  "(stepsNum + 0.5) * angleItemWidth + (angle / maxAngle) * angleItemWidth * stepsNum")

		(var hotkeysState:number = "isJammed    ? softCriticalEnabled   ? HotkeyState.WARNING
																		: HotkeyState.CRITICAL
												: HotkeyState.INVALID")

		(var moveLeftCommand:dhEntity = "getPrimaryEntity(CC.commandMappingCommand, Cmd.CMD_MOVE_LEFT)")
		(var moveRightCommand:dhEntity = "getPrimaryEntity(CC.commandMappingCommand, Cmd.CMD_MOVE_RIGHT)")
		(var isMoveLeftCmdActive:bool = "moveLeftCommand.commandMappingCommand.isDown" (event "moveLeftCommand.commandMappingCommand.evIsDownChanged"))
		(var isMoveRightCmdActive:bool = "moveRightCommand.commandMappingCommand.isDown" (event "moveRightCommand.commandMappingCommand.evIsDownChanged"))

		(var stateSelected:bool = "state != 0")
		(var isVisible:bool = "stateSelected || angle != 0 || isJammed")

		(var angleStatesCount:number = "angleEntity.cruise ? angleEntity.cruise.states.length : 0")
	)

	(bind alpha "isVisible ? 1 : 0")

	(controller $Animation
		(bindcall play  duration="0.75"
						easing="Easing.quad_in"
						to="{ alpha: 0 }"
						action="kill"
						(bind enabled "!(isVisible)")
						(bind trigger "isVisible")
		)
		(bindcall play  duration="0.15"
						easing="Easing.quad_in"
						to="{ alpha: 1 }"
						action="kill"
						(bind enabled "isVisible")
						(bind trigger "isVisible")
		)
	)

	(block
		(style
			(position = "absolute")
			(left = "-CRUISE_ITEM_MARGIN")
			(height = "CRUISE_ITEM_HEIGHT")
		)
		(element HotkeyIndicator _commandId="Cmd.CRUISE_ANGLE_LEFT" _toggled=true _overwriteState="hotkeysState"
			(bind visible "state < 0")
			(style (position = "absolute") (right = 0))
		)
		(element HotkeyIndicator _commandId="Cmd.CMD_MOVE_LEFT" _overwriteState="hotkeysState"
			(bind visible "isMoveLeftCmdActive")
			(style (position = "absolute") (right = 0))
		)
	)

	(hblock
		(controller $Repeat (renderer = 'AngleItem')
			(bind count "angleStatesCount")
			(exprs
				(scope
					(bind relativeAngleState "relativeAngleState")
				)
			)
		)
		(controller $Instance (renderer = 'AnglePointer')
			(exprs
				(style
					(bind left "anglePointerX - 9") 
				)
			)
		)
	)

	(block
		(style
			(position = "absolute")
			(right = "-CRUISE_ITEM_MARGIN")
			(height = "CRUISE_ITEM_HEIGHT")
		)
		(element HotkeyIndicator _commandId="Cmd.CRUISE_ANGLE_RIGHT" _toggled=true _overwriteState="hotkeysState"
			(bind visible "state > 0")
			(style (position = "absolute"))
		)
		(element HotkeyIndicator _commandId="Cmd.CMD_MOVE_RIGHT" _overwriteState="hotkeysState"
			(bind visible "isMoveRightCmdActive")
			(style (position = "absolute"))
		)
	)
)

(def element AngleItem ()
	(scope
		(var relativeAngleState:number = 0)
		(var angleEntity:dhEntity = "getPrimaryEntity(CC.cruise, SC.Battle.CRUISE_CONTROL_TYPE.ANGLE)")
		(var state:number = "angleEntity.cruise.state ?: 0" (event "angleEntity.cruise.evStateChanged"))
		(var softCriticalEnabled:bool = "angleEntity.cruise.softCriticalEnabled")
		(var isJammed:bool = "angleEntity.cruise.jammed" (event "angleEntity.cruise.evJammedChanged"))
		(var isSet:bool = "state != 0 && state == angleEntity.cruise.states[$index]")
		(var isHighlighted:bool = "(abs(relativeAngleState - angleEntity.cruise.states[$index]) < 0.5) || isSet")

		(var stateFolder:str = "    isSet       ? 'black/' :
									isJammed    ? softCriticalEnabled   ? 'yellow/'
																		: 'red/'
												: 'default/'")
		(var hotkeyState:number = "isJammed ? softCriticalEnabled   ? HotkeyState.WARNING
																	: HotkeyState.CRITICAL
											: HotkeyState.DEFAULT")
	)

	(style
		(width = "CRUISE_ITEM_WIDTH")
		(height = "CRUISE_ITEM_HEIGHT")
	)

	(element HotkeyBackground _hotkeyState="hotkeyState"
		(visible = "isSet")
		(controller $Animation
			(bindcall play  duration = 0.15
							easing = "Easing.cubic_out"
							from = "{ alpha: 0, visible: false }"
							to = "{ alpha: 1, visible: true }"
							(bind enabled "isSet")
			)
			(bindcall play  duration = 0.15
							easing = "Easing.cubic_out"
							to = "{ alpha: 0, visible: false }"
							(bind enabled "!(isSet)")
			)
		)
	)

	(block
		(alpha = "isHighlighted ? 1 : 0.5")
		(style
			(bind backgroundImage "'url:../battle_hud/cruise_control/scale_values/' + stateFolder + ANGLE_CONTROL_VALUES[angleEntity.cruise.states[$index]] + '.png'")
		)
		(controller $Animation
			(bindcall play  duration = 0.3
							easing = "Easing.cubic_out"
							from = { alpha: 0.5 }
							to = { alpha: 1 }
							reverse="!(isHighlighted)"
							(bind trigger "isHighlighted")
			)
		)
	)
)

(def element AnglePointer ()
	(scope
		(var angleEntity:dhEntity = "getPrimaryEntity(CC.cruise, SC.Battle.CRUISE_CONTROL_TYPE.ANGLE)")
		(var softCriticalEnabled:bool = "angleEntity.cruise ? angleEntity.cruise.softCriticalEnabled : false")
		(var isJammed:bool = "angleEntity.cruise ? angleEntity.cruise.jammed : false" (event "angleEntity.cruise.evJammedChanged"))
		(var statePostfix:str = "   isJammed    ? softCriticalEnabled   ? 'yellow'
																		: 'red'
												: 'white'")
	)
	(style
		(position = "absolute")
		(top = "CRUISE_ITEM_HEIGHT")
		(bind backgroundImage "'url:../battle_hud/cruise_control/pointers/pointer_' + statePostfix + '.png'")
	)
)

(def macro DEPTH_CONTROL_HOTKEY_ANIMATION (isActive:expression)
	(alpha = "isActive ? 1 : 0")
	(controller $Animation
		(bindcall play  duration="0.15"
						easing="Easing.quad_in"
						to="{ alpha: 1 }"
						action="kill"
						(bind enabled "isActive")
		)
		(bindcall play  duration="0.15"
						easing="Easing.quad_out"
						to="{ alpha: 0 }"
						action="kill"
						(bind enabled "!(isActive)")
		)
	)
)

(def css $TextDepthNoShadowNM13 ()
	(fontFamily = '$DefaultFont')
	(extends $FontColorWhite)
	(extends $TextMouseDisable)

	(fontSize = 13)
	(marginTextLeft = -3px)
	(marginTextRight = -3px)
	(marginTextTop = -5px)
	(marginTextBottom = -5px)
)

(def element DepthRulerNumber (_num:number)
	(scope
		(var cruiseEntity:dhEntity = "getPrimaryEntity(CC.cruise, SC.Battle.CRUISE_CONTROL_TYPE.DEPTH)")
		(var cruise:dhComponent = "cruiseEntity.cruise")
		(var cruiseState:number = "cruise.state ?: 0" (event "cruise.evStateChanged"))
		(var cruiseStates:array = "cruise.states" (event "cruise.evStatesChanged"))
		(var currentDepthLimit:number = "cruiseEntity.cruiseLimit.limitValue ?: 0" (event "cruiseEntity.cruiseLimit.evLimitValueChanged"))
		(var isDepthLimitLower:bool = "_num > abs(round(currentDepthLimit))")
		(var isCruiseLimitRestricted:bool = "currentDepthLimit == cruise.max || isDepthLimitLower")

		(var cruiseValue:number = "cruise.value ?: 0" (event "cruise.evValueChanged"))
		(var depthValue:number = "abs(cruiseValue)")
		(var currentDepth:number = "depthValue" watch=false)
		(controller $Animation
			(bindcall play  duration=0.3
							easing="Easing.line"
							to="{ currentDepth: depthValue }"
							action="kill"
			)
		)

		(var selfVehicleEntity:dhEntity = "getSingleEntity(CC.selfVehicle)")
		(var submarine:dhComponent = "selfVehicleEntity.submarine")

		(var nearestDepthIndex:number = "submarine.nearestDepthIndex ?: 0" (event "submarine.evNearestDepthIndexChanged"))
		
		(var depthValues:array = "submarine.depthValues")
		(var selectedDepth:number = "depthValues[cruiseState]")

		(var offsetTop:number = "abs(depthValues[$index]*DEPTH_RULER_LINE_SIZE) - 8")
		(var isSelected:bool = "cruiseState == $index")
		(var isNearest:bool = "nearestDepthIndex == $index")

		(var disabledNumber:bool = "!isIn($index, cruiseStates)")

		(var selectedDepthStr:str = "formatFloatingPoint(round(_num * 10) / 10, 1, false)") 
		
		(var restrictedColorTransform:dict = "(isSelected && isCruiseLimitRestricted) ? CT_YELLOW : CT_NONE")

		(var isMinSelected:bool = "isSelected && $index == cruiseStates[0]")
		(var isMaxSelected:bool = "isSelected && $index == cruiseStates[cruiseStates.length - 1]")

		(var canNotReachIndex:number = "-1" watch=false)
		(bind canNotReachIndex "$event[1]" (event "cruise.evSetStateFailed"))

		(var moveUpCommand:dhEntity = "getPrimaryEntity(CC.commandMappingCommand, Cmd.CRUISE_DEEP_UP)")
		(var moveDownCommand:dhEntity = "getPrimaryEntity(CC.commandMappingCommand, Cmd.CRUISE_DEEP_DOWN)")

		(var animOffset:number = "0" watch=false)
		(bind animOffset "-4" (event "moveUpCommand.commandMappingCommand.evIsDownChanged"))
		(bind animOffset "4" (event "moveDownCommand.commandMappingCommand.evIsDownChanged"))
	)
	(style
		(position = "absolute")
		(bind top "offsetTop")
		(left = "XS")
		(width = "26")
		(height = "17")
		(align = "middle|center")
	)
	(controller $Animation
		(bind enabled "canNotReachIndex == $index")
		(bindcall play  duration=0.2
						easing="Easing.quad_in"
						from="{top:offsetTop}"
						to="{top:offsetTop+animOffset}"
						watch=false
						(event "cruise.evSetStateFailed")
		)
		(bindcall play  delay=0.2
						duration=0.15
						easing="Easing.quad_out"
						from="{top:offsetTop+animOffset}"
						to="{top:offsetTop}"
						watch=false
						(event "cruise.evSetStateFailed")
		)
	)
	(block
		(bind visible "isSelected")
		(bind colorTransform "restrictedColorTransform")
		(class $FullsizeAbsolute)
		(style
			(backgroundImage = 'url:../battle_hud/depth_indicator/depth_selected.png')
		)
		
		(block
			(class $FullsizeAbsolute)
			(style
				(top = 50%)
				(left = 50%)
			)
			(block
				(class $FullsizeAbsolute)
				(style
					(top = -50%)
					(left = -50%)
					(backgroundImage = 'url:../battle_hud/depth_indicator/depth_selected.png')
				)
			)
			(alpha = "0")
			(controller $Animation
				(bindcall play  duration=0.5
								action="kill"
								easing="Easing.quad_out"
								from="{scaleX:1, scaleY:1, alpha: 1 }"
								to="{scaleX:2, scaleY:2,  alpha: 0 }"
								(bind enabled "selectedDepth == -currentDepth")
				)
			)
		)
	)
	(tf
		(class $TextDepthNoShadowNM13)
		(bind alpha "isSelected ? 1 : (disabledNumber ? 0.4 : (isNearest ? 1.5 : 0.8))")
		(style
			(bind textColor "(isSelected || disabledNumber) ? C_DARK : (isNearest ? 0xFFFFFFFF : C_NEUTRAL)")
		)
		(text = "selectedDepthStr")
	)
	(block
		(bind visible "isSelected && isDepthLimitLower")
		(style
			(position = "absolute")
			(bind left "26px")
			(backgroundImage = "'url:../battle_hud/depth_indicator/depth_terrain_indicator.png'")
		)
	)
)

(def element RangeReachedEffect (_range:array)
	(scope
		(var minDepth:number = "_range[0] ?: 0")
		(var maxDepth:number = "_range[1] ?: 0")
		(var linesCount:number = "abs(maxDepth - minDepth)")
		(var totalHeight:number = "DEPTH_RULER_LINE_SIZE*linesCount")
		(var offsetTop:number = "abs(minDepth)*DEPTH_RULER_LINE_SIZE")
	)
	(alpha = "0")
	(bind alpha "1" init=false (bind trigger "_range"))
	(controller $Animation
		(bindcall play  duration = "1"
						delay = 0.1
						from = "{ alpha: 1 }"
						to = "{ alpha: 0 }"
						action="kill"
						(bind trigger "_range")
		)
	)
	(style
		(position = "absolute")
		(bind top "offsetTop")
		(bind height "totalHeight")
		(width = 5)
		(backgroundColor = "SC.Ui_styles.SERVICE_COLORS.WHITE")
	)
)

(def element DepthCurrentValue (_currentDepth:number, _depthStatesValues:array)
	(scope
		(var cruiseEntity:dhEntity = "getPrimaryEntity(CC.cruise, SC.Battle.CRUISE_CONTROL_TYPE.DEPTH)")
		(var cruise:dhComponent = "cruiseEntity.cruise")
		(var currentDepthLimit:number = "cruiseEntity.cruiseLimit.limitValue ?: 0" (event "cruiseEntity.cruiseLimit.evLimitValueChanged"))
		(var isCruiseLimitRestricted:bool = "currentDepthLimit == cruise.max")

		(var restrictedColorTransform:dict = "isCruiseLimitRestricted ? CT_YELLOW : CT_NONE")

		(var formattedCurrentDepth:str = "formatFloatingPoint(_currentDepth)")

		(event evTriggerFX)
		(var triggered:bool = "isIn(round(-_currentDepth), _depthStatesValues)")
	)

	(dispatch evTriggerFX (bind enabled "triggered") (bind trigger "triggered"))

	(bind colorTransform "restrictedColorTransform")
	(bind alpha "isCruiseLimitRestricted ? 1.3 : 1")
	(style (flow = "horizontal"))

	(block
		(tf
			(style (textAlign = "right") (width = 40))
			(alpha = 0.9)
			(class $TelegraphValueText)
			(macro TFMouseEnabled value=false)
			(bind text "formattedCurrentDepth")
		)
		(controller $FxInstance renderer='DepthCurrentValueFX' lifetime="1"
			(bindcall create (event "evTriggerFX"))
			(args "formattedCurrentDepth")
		)
	)
	
	(tf
		(class $TelegraphMeasureText)
		(alpha = 0.7)
		(macro TFMouseEnabled value=false)
		(bind text "' m'")
	)
)

(def element DepthCurrentValueFX (_text:str)
	(scope
		(event evShow)
	)
	(dispatch evShow on='addedToStage')

	(class $FullsizeAbsolute)
	(style
		(align = "right|bottom")
	)

	(block
		(controller $Animation
			(bindcall play  duration=0.5
							delay=0.15
							to="{scaleX: 1.3, scaleY: 1.3, ubScaleX: 1.3, ubScaleY: 1.3, alpha: 0}"
							(event "evShow")
			)
		)

		(tf
			(style (textAlign = "right") (width = 40))
			(alpha = 0.9)
			(class $TelegraphValueText)
			(bind text "_text")
		)
	)
)

(def element DepthCurrentState ()
	(scope
		(var selfVehicleEntity:dhEntity = "getSingleEntity(CC.selfVehicle)")
		(var submarine:dhComponent = "selfVehicleEntity.submarine")
		(var depthIndex:number = "submarine.depthIndex" (event "submarine.evDepthIndexChanged"))

		(var targetAlpha:number = "0.6" watch=false)
		(bind targetAlpha "1" init=false (event "submarine.evDepthIndexChanged"))
		(controller $Animation
			(bindcall play  duration="0.5"
							delay="1"
							easing="Easing.quad_out"
							to="{ targetAlpha: 0.6 }"
							action="kill"
							(event "submarine.evDepthIndexChanged")
			)
		)

		(var depthStateIds:str = "'IDS_SUBMARINE_DEPTH_STATE_' + SC.Battle.DEPTH_STATE.VALUE_TO_NAME[depthIndex]")
	)

	(alpha = "0.6")
	(bind alpha "targetAlpha")

	(tf
		(class $TextDefaultBold13NM)
		(style (textAlign = "right"))
		(bind text "toUpper(tr(depthStateIds))")
	)
)

(def element DepthRulerCurrentDepthLine (_currentRange:number, _depthLimit:number)
	(scope
		(var currentRange:number = "_currentRange ?: 0")
		(var depthLimit:number = "_depthLimit ?: 0")
		(var isUnderLimit:bool = "depthLimit > currentRange")
	)
	(style
		(bind alpha "isUnderLimit ? 0.25 : 1")
		(bind width "isUnderLimit ? 8px : 13px")
		(height = 1px)
		(position = "absolute")
		(bind top "abs(currentRange) * MULTIPLY_DEPHT_FOR_CONVERT_TO_HEIGHT")
		(bind right "isUnderLimit ? 5px : 0px")
		(backgroundColor = "SC.Ui_styles.SERVICE_COLORS.WHITE")
	)
)

(def element DepthRulerDepthLine (_depthLine:number, _depthLimit:number, _currentRange:array)
	(scope
		(var isUnderLimit:bool = "_depthLimit > _depthLine")
	)
	(style
		(bind alpha "isIn(_depthLine, _currentRange) ? 0 : isUnderLimit ? 0.25 : 0.5")
		(width = 5px)
		(height = 1px)
		(position = "absolute")
		(bind top "abs(_depthLine) * MULTIPLY_DEPHT_FOR_CONVERT_TO_HEIGHT")
		(backgroundColor = "SC.Ui_styles.SERVICE_COLORS.WHITE")
	)
)
(def element DepthRulerCurrentDepthMask (_currentDepthRange:array, _depthLimitPositive:number)
	(scope
		(var currentDepthRangeZero:number = "_currentDepthRange[0] ? abs(_currentDepthRange[0]) : 0")
		(var currentDepthRangeFirst:number = "_currentDepthRange[1] ? abs(_currentDepthRange[1]) : 0")
		(var maxHeight:number = "_depthLimitPositive < currentDepthRangeFirst ? _depthLimitPositive : currentDepthRangeFirst")
	)
	(block
		(style
			(width = "DEPTH_METR_WIDTH")
			(bind height "(maxHeight - currentDepthRangeZero) * MULTIPLY_DEPHT_FOR_CONVERT_TO_HEIGHT")
			(position = "absolute")
			(bind top "currentDepthRangeZero * MULTIPLY_DEPHT_FOR_CONVERT_TO_HEIGHT")
			(backgroundColor = "SC.Ui_styles.SERVICE_COLORS.WHITE")
		)
		(isMask = true)
	)
	(block
		(style
			(height = "DEPTH_METR_HEIGHT")
			(backgroundImage = 'swf:../battle_hud/depth_ruler_svg/depth_ruler_svg.swf:DeepMetr')
		)
	)
)

(def element DepthRulerMainMask (_depthLimitPositive:number)
	(scope
		(var isInvert:bool = "$index>0")
		(var depthLimitInPixel:number = "_depthLimitPositive*3+1")
	)
	(style
		(position = "absolute")
		(alpha = "isInvert? 0.25 : 0.5")
	)
	(block
		(style
			(width = "DEPTH_METR_WIDTH")
			(bind height "isInvert ? DEPTH_METR_HEIGHT-depthLimitInPixel : depthLimitInPixel")
			(position = "absolute")
			(bind top "isInvert ? depthLimitInPixel : 0")
			(backgroundColor = "SC.Ui_styles.SERVICE_COLORS.WHITE")
		)
		(isMask = true)
	)
	(block
		(style
			(height = "DEPTH_METR_HEIGHT")
			(backgroundImage = 'swf:../battle_hud/depth_ruler_svg/depth_ruler_svg.swf:DeepMetr')
		)
	)
)

(def element DepthRuler (_depthStatesValues:array, _currentRange:array, _maskHeight:number, _depthLimit:number)
	(scope
		(var depthLimitPositive:number = "abs(_depthLimit)")
	)
	(style
		(marginLeft = "S")
		(width = 10px)
	)
	(block
		(style
			(width = "DEPTH_METR_WIDTH")
			(bind height "_maskHeight")
			(position = "absolute")
			(right = 0)
			(top = 0)
			(backgroundColor = "0xFFFFFFFF")
		)
		(isMask = true)
	)

	(controller $Repeat renderer='DepthRulerMainMask'
		(count = "COUNT_MAX_MIN_DEPTH_LINE")
		(args
			_depthLimitPositive="depthLimitPositive"
		)
	)

	(element DepthRulerCurrentDepthMask
		_currentDepthRange="_currentRange"
		_depthLimitPositive="depthLimitPositive"
	)

	(controller $Repeat renderer='DepthRulerCurrentDepthLine'
		(count = "COUNT_MAX_MIN_DEPTH_LINE")
		(args
			_currentRange="_currentRange[$index]"
			_depthLimit="_depthLimit"
		)
	)

	(controller $Repeat renderer='DepthRulerDepthLine'
		(bind count "_depthStatesValues.length")
		(args
			_currentRange="_currentRange"
		 	_depthLine="_depthStatesValues[$index]"
		 	_depthLimit="_depthLimit"
		)
	)

	(element RangeReachedEffect
		_range = "_currentRange"
		(style (left = 5px))
	)
)

(def element DisabledDepthRulerStandardLine (_depthLine:number, _currentRange:array)
	(scope
		(var isCurrentRange:bool = "isIn(_depthLine, _currentRange)")
	)
	(style
		(alpha = 0.25)
		(bind width "isCurrentRange ? 6px : 3px")
		(height = 1px)
		(position = "absolute")
		(bind top "abs(_depthLine)*3")
		(bind left "isCurrentRange ? -1px : 2px")
		(backgroundColor = "SC.Ui_styles.SERVICE_COLORS.WHITE")
	)
)

(def element DisabledDepthRulerMainLimitMask ()
	(style
		(alpha = 0.5)
		(height = "DEPTH_METR_HEIGHT")
		(backgroundImage = 'swf:../battle_hud/depth_ruler_svg/depth_ruler_svg.swf:DeepMetr_black')
	)
)


(def element DisabledDepthRuler (_depthStatesValues:array, _valuesRange:number, _currentRange:array, _maskHeight:number)
	(style
		(width = 10px)
		(position = "absolute")
		(right = 0)
	)
	(block
		(style
			(width = "DEPTH_METR_WIDTH")
			(bind height "(_valuesRange)*DEPTH_RULER_LINE_SIZE+1 - _maskHeight")
			(position = "absolute")
			(right = 0)
			(bottom = 0)
			(backgroundColor = "SC.Ui_styles.SERVICE_COLORS.WHITE")
		)
		(isMask = true)
	)
	(element DisabledDepthRulerMainLimitMask)
	(controller $Repeat renderer='DisabledDepthRulerStandardLine'
		(bind count "_depthStatesValues.length")
		(args
			_depthLine="_depthStatesValues[$index]"
			_currentRange="_currentRange"
		)
	)

	(element RangeReachedEffect
		_range = "_currentRange"
		(style (left = 5px))
	)
)

(def element DepthControlNew ()
	(scope
		(var cruiseEntity:dhEntity = "getPrimaryEntity(CC.cruise, SC.Battle.CRUISE_CONTROL_TYPE.DEPTH)")
		(var cruise:dhComponent = "cruiseEntity.cruise")
		(var cruiseState:number = "cruise.state ?: 0" (event "cruise.evStateChanged"))
		(var currentDepthLimit:number = "cruiseEntity.cruiseLimit.limitValue ?: 0" (event "cruiseEntity.cruiseLimit.evLimitValueChanged"))
		(var isCruiseLimitEnabled:bool = "currentDepthLimit != cruise.min")
		(var isCruiseLimitRestricted:bool = "currentDepthLimit == cruise.max")

		(var depthValue:number = "cruise.value ? abs(cruise.value) : 0" (event "cruise.evValueChanged"))
		(var currentDepth:number = "depthValue" watch=false)
		(controller $Animation
			(bindcall play  duration=0.3
							easing="Easing.line"
							to="{ currentDepth: depthValue }"
							action="kill"
			)
		)

		(macro SCOPE_IS_BATTLE_IN_PROGRESS "'isBattleInProgress'")

		(struct altVisionMode = GET_PREF_STR(_option = "'battle.altVision.mode'"))

		(var cameraEntity:dhEntity = "getSingleEntity(CC.camera)")
		(var altVision:bool = "cameraEntity.camera.altVision" (event "cameraEntity.camera.evAltVisionChanged"))
		(var isTactical:bool = "cameraEntity.camera.isTactical" (event "cameraEntity.camera.evTacticalStateChanged"))
		(var isAltVisionMode:bool = "altVision || AltVisionMode[altVisionMode.value] == AltVisionMode.ENABLED")
		(var isVisible:bool = "!(isTactical)")
		
		(var moveUpCommand:dhEntity = "getPrimaryEntity(CC.commandMappingCommand, Cmd.CRUISE_DEEP_UP)")
		(var moveDownCommand:dhEntity = "getPrimaryEntity(CC.commandMappingCommand, Cmd.CRUISE_DEEP_DOWN)")
		(var isMoveUpCmdActive:bool = "moveUpCommand.commandMappingCommand.isDown" (event "moveUpCommand.commandMappingCommand.evIsDownChanged"))
		(var isMoveDownCmdActive:bool = "moveDownCommand.commandMappingCommand.isDown" (event "moveDownCommand.commandMappingCommand.evIsDownChanged"))

		(var selfVehicleEntity:dhEntity = "getSingleEntity(CC.selfVehicle)")
		(var submarine:dhComponent = "selfVehicleEntity.submarine")
		(var depthIndex:number = "submarine.depthIndex" (event "submarine.evDepthIndexChanged"))
		(var depthRanges:dict = "submarine.depthRanges ?: {}")
		(var currentRange:array = "depthRanges[depthIndex] ?: []")

		(var batteryComponent:dhComponent = "selfVehicleEntity.battery")
		(var batteryState:number = "batteryComponent ? batteryComponent.batteryState : SC.Battle.BATTERY_STATE.IDLE" (event "batteryComponent.evBatteryStateChanged"))
		(var isEmptyBattery:bool = "batteryComponent.batteryState == SC.Battle.BATTERY_STATE.EMPTY" (event "batteryComponent.evBatteryStateChanged"))

		(var depthValueIndex:number = "cruiseState")
		(var nearestDepthIndex:number = "submarine.nearestDepthIndex" (event "submarine.evNearestDepthIndexChanged"))
		
		(var depthValues:array = "submarine.depthValues ?: []")
		(var selectedDepth:number = "depthValues[depthValueIndex] ?: 0")
		(var depthStatesValues:array = "submarine.depthStatesValues")
		(var cruiseMax:number = "cruise.max ?: 0")
		(var cruiseMin:number = "cruise.min ?: 0")
		(var valuesRange:number = "cruiseMax - cruiseMin")
		(var isDepthLimitLower:bool = "valuesRange > abs(round(currentDepthLimit))")

		(var rulerMaskHeight:number = "isEmptyBattery ? (isCruiseLimitEnabled && isCruiseLimitRestricted ? 0 : (max(currentDepth, abs(currentDepthLimit))*DEPTH_RULER_LINE_SIZE)) : valuesRange*DEPTH_RULER_LINE_SIZE")
		(var hotkeyDeepDownState:number = "(isCruiseLimitEnabled && cruise.max == currentDepthLimit) ? HotkeyState.WARNING : HotkeyState.INVALID")
	)

	(alpha = "isVisible ? 1 : 0")

	(controller $Animation
		(bindcall play  duration = 0.35
						from = "{ alpha: 0 }"
						to = "{ alpha: 1 }"
						reverse = "!(isVisible)"
						(bind trigger "isVisible")
		)
	)
	
	
	(element DepthCurrentValue "currentDepth" "depthStatesValues"
		(style (marginLeft = "-S"))
	)
	
	
	(block
		(alpha = "!isBattleInProgress || isAltVisionMode ? 1 : 0")

		(style
			(position = "absolute")
			(right = "-MS") (bottom = "-valuesRange * DEPTH_RULER_LINE_SIZE / 2")
		)

		(bind alpha "1" init=false
			(bind trigger "isBattleInProgress")
			(event "cruise.evValueChanged")
			(event "cruise.evStateChanged")
			(event "moveUpCommand.commandMappingCommand.evIsDownChanged")
			(event "moveDownCommand.commandMappingCommand.evIsDownChanged")
		)

		(controller $Animation
			(bind enabled "isBattleInProgress && !isAltVisionMode")
			(bindcall play  duration = "0.35"
							delay = 10
							to = "{ alpha: 0 }"
							action="kill"
							(bind trigger "isBattleInProgress")
			)
			(bindcall play  duration = "0.35"
							delay = "1.4"
							to = "{ alpha: 0 }"
							action="kill"
							(event "cruise.evValueChanged")
							(event "cruise.evStateChanged")
							(event "moveUpCommand.commandMappingCommand.evIsDownChanged")
							(event "moveDownCommand.commandMappingCommand.evIsDownChanged")
			)
		)

		(controller $Animation
			(bind enabled "isBattleInProgress && depthValue == abs(selectedDepth)")
			(bindcall play  duration = "0.15"
							from="{ alpha: 0 }"
							to="{ alpha: 1 }"
							action="kill"
							(bind enabled "(isAltVisionMode)")
			)
			(bindcall play  duration = "0.35"
							to="{ alpha: 0 }"
							(bind enabled "!(isAltVisionMode)")
			)
		)

		(block
			(style
				(position = "absolute")
				(left = "44")
				(top = "-L")
			)
			(element HotkeyIndicator _commandId="Cmd.CRUISE_DEEP_UP" _overwriteState="hotkeyDeepDownState"
				(style (position = "absolute") (right = 0))
				(macro DEPTH_CONTROL_HOTKEY_ANIMATION "isMoveUpCmdActive")
			)
		)

		(hblock
			(bind alpha "depthIndex > SC.Battle.DEPTH_STATE.PERISCOPE ? 0.8 : 1")

			(element DepthRuler
				_depthStatesValues="depthStatesValues"
				_currentRange="currentRange"
				_maskHeight="rulerMaskHeight+1"
				_depthLimit="currentDepthLimit"
			)

			(element DisabledDepthRuler

				_depthStatesValues="depthStatesValues"
				_valuesRange="valuesRange"
				_currentRange="currentRange"
				_maskHeight="rulerMaskHeight+1"

				(bind visible "isEmptyBattery")
			)
			
			
			(block
				(style
					(bind top "abs(currentDepth*DEPTH_RULER_LINE_SIZE)")
					(position = "absolute")
					(right = "-3px")
					(height = 1px)
					(width = "20px")
					(backgroundColor = 0xFFFFFFFF)
				)
			)
			
			(block
				(bind visible "isDepthLimitLower")
				(style
					(bind top "abs(currentDepthLimit*DEPTH_RULER_LINE_SIZE)")
					(position = "absolute")
					(right = "-3px")
					(height = 1px)
					(width = "20px")
					(backgroundColor = 0xFFFFFFFF)
				)
				(bind colorTransform "CT_YELLOW")
			)
			(block
				(controller $Repeat renderer='DepthRulerNumber'
					(bind count "depthValues.length")
					(args "abs(depthValues[$index])")
				)
			)
		)
	
		
		(block
			(style
				(position = "absolute")
				(left = "44")
				(bottom = "-10")
			)
			(element HotkeyIndicator _commandId="Cmd.CRUISE_DEEP_DOWN" _overwriteState="hotkeyDeepDownState"
				(macro DEPTH_CONTROL_HOTKEY_ANIMATION "isMoveDownCmdActive")
				(style (position = "absolute") (right = 0))
			)
		)

		(element DepthCurrentState
			(style
				(position = "absolute")
				(right = "MS") (top = "50%")
				(paddingTop = "XS")
			)
		)
	)
)
