(def constant SHIP_RESTRICTIONS_HEIGHT 600)
(def constant SHIP_RESTRICTIONS_WIDTH 340)

(def element SeasonShipRestrictionsTooltip ()
	(scope
		(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND_SCOPE)
	)

	(style
		(hitTest = false)
		(width = "SHIP_RESTRICTIONS_WIDTH")
	)
	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND_MARKUP)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(element TooltipSystemHeaderSubheaderText
			_headerText = 'IDS_SEASON_RESTRICTIONS_TOOLTIP_HEADER'
		)

		(element TooltipSystemHorizontalDivider)

		(element TooltipSystemDescriptionText _descriptionText='IDS_SEASON_RESTRICTIONS_TOOLTIP_STATUS_LINE')

		(element TooltipSystemHorizontalDivider)

		(element TooltipSystemStatusLine
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
			_text =	'IDS_HINT_LEFT_CLICK_FOR_FURTHER_INFO'
		)
	)
)

(def element TooltipSystemExcludedShipsRestrictionBlock (_headerText:str, _shipsArray:array)
	(style (width = 100%))

	(element TooltipSystemStatusLine
		_text = "_headerText"
		_width = 100%
	)

	(element TooltipSystemHorizontalDivider)

	(block
		(style (width = 100%))
		(controller $Repeat renderer='SeasonShipRestrictionLine'
			(bind count "_shipsArray.length")
			(args
				_length = "_shipsArray.length"
				_entityId = "_shipsArray[$index]"
			)
		)
	)
)

(def element TooltipSystemConcreteShipsRestrictionBlock (_headerText:str, _shipsCollection:dhCollection)
	(scope
		(var shipsCollectionLen:number = "_shipsCollection.length")
	)
	(style (width = 100%))

	(element TooltipSystemStatusLine
		_text = "_headerText"
		_width = 100%
	)

	(element TooltipSystemHorizontalDivider)
	(block
		(style (width = 100%))
		(controller $Repeat renderer='SeasonShipCollectionRestrictionLine'
			(bind count "shipsCollectionLen")
			(args
				_shipsCollection = "_shipsCollection"
			)
		)
	)
)


(def element TooltipSystemSeasonShipsRestrictionBlock (_headerText:str, _shipsArray:array)
	(scope
		(var preBattlePlayerSimpleEntity:dhEntity = "getSingleEntity(CC.accountSelf)")
		(var preBattlePlayerSimpleComponent:dhComponent = "preBattlePlayerSimpleEntity.preBattlePlayerSimple" (event "preBattlePlayerSimpleEntity.evAdded") (event "preBattlePlayerSimpleEntity.evRemoved"))
		(var selfPreBattleId:number = "preBattlePlayerSimpleComponent.preBattleId ?: 0" (event "preBattlePlayerSimpleComponent.evPreBattleIdChanged"))

		(var preBattleEntity:dhEntity = "getPrimaryEntity(CC.preBattle, selfPreBattleId)")
		(var preBattleComponent:dhComponent = "preBattleEntity.preBattle")
		(var chosenShipIdsDict:dict = "preBattleComponent.selfTeamShipIdsCount" (event "preBattleComponent.evSelfTeamShipIdsCountChanged"))
		(var chosenShipCountInGroupRestrictions:array = "preBattleComponent.chosenShipCountInGroupRestrictions" (event "preBattleComponent.evChosenShipCountChanged"))
	)

	(style (width = 100%))

	(element TooltipSystemStatusLine
		_text = "_headerText"
		_width = 100%
	)
	(block
		(style (width = 100%))
		(controller $Repeat renderer='SeasonShipRestriction'
			(bind count "_shipsArray.length")
			(args
				_shipsArray = "_shipsArray"
				_chosenShipIdsDict = "chosenShipIdsDict"
				_chosenShipCountInGroupRestrictions = "chosenShipCountInGroupRestrictions"
			)
		)
	)
)

(def element SeasonShipRestriction (_shipsArray:array, _chosenShipIdsDict:dict={}, _chosenShipCountInGroupRestrictions:array=[])
	(scope
		(var data:array = "_shipsArray[$index]")
		(var shipsIds:array = "data[0]")
		(var chosenShipCount:number = "_chosenShipCountInGroupRestrictions[$index] ?: 0")
	)
	(style (width = 100%))
	(block
		(style (width = 100%))
		(element TooltipSystemHorizontalDivider)
	)

	(hblock
		(style (width = 100%))
		(block
			(style (width = 100%))
			(controller $Repeat renderer='SeasonShipRestrictionLine'
				(bind count "shipsIds.length")
				(args
					_length = "shipsIds.length"
					_entityId = "shipsIds[$index]"
					_chosenShipIdsDict = "_chosenShipIdsDict"
				)
			)
		)
		(tf
			(style (alpha = "TA"))
			(class $TextDefaultBoldNM)
			(bind text "chosenShipCount + '/' + toString(data[1])")
		)
	)
)


(def element SeasonShipRestrictionLine (_length:number, _entityId:number, _chosenShipIdsDict:dict={})
	(scope
		(var filterEntity:dhEntity = "getEntity(_entityId)")
		(var shipId:number = "toNumber(filterEntity.shipFilterItem.field)" (event "filterEntity.shipFilterItem.evUpdate"))

		(var shipEntity:dhEntity = "getPrimaryEntity(CC.ship, shipId)")
		(var shipInfo:dhComponent = "shipEntity.ship")

		(var textAlpha:number = "	_chosenShipIdsDict[shipId]					? 0.3 :
									shipInfo.isFarming || shipInfo.uiSpecial 	? 1
																				: TA")
	)

	(style
		(maxWidth = 100%)
		(height = 27px)
		(align = "center|middle")
		(marginRight = "SXS")
		(backgroundColor = "NO_COLOR")
	)

	(element ShipLineItemNM
		_shipId = "shipId"
		_alpha = "textAlpha"
		_withFlag = true
	)

	(controller $Tooltip
		(renderer = 'ShipExtendedTooltip')
		(args
			_shipId = "shipId"
			_hasShipImage = true
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element SeasonShipCollectionRestrictionLine (_shipsCollection:dhCollection, _chosenShipIdsDict:dict={})
	(scope
		(var filterEntity:dhEntity = "_shipsCollection[$index]")
		(var shipId:number = "toNumber(filterEntity.shipFilterItem.field)" (event "filterEntity.shipFilterItem.evUpdate"))

		(var shipEntity:dhEntity = "getPrimaryEntity(CC.ship, shipId)")
		(var shipInfo:dhComponent = "shipEntity.ship")

		(var textAlpha:number = "	_chosenShipIdsDict[shipId]					? 0.3 :
									shipInfo.isFarming || shipInfo.uiSpecial 	? 1
																				: TA")
	)

	(style
		(maxWidth = 100%)
		(height = 27px)
		(align = "center|middle")
		(marginRight = "SXS")
		(backgroundColor = "NO_COLOR")
	)

	(element ShipLineItemNM
		_shipId = "shipId"
		_alpha = "textAlpha"
		_withFlag = true
	)

	(controller $Tooltip
		(renderer = 'ShipExtendedTooltip')
		(args
			_shipId = "shipId"
			_hasShipImage = true
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element SeasonShipRestrictionsInfotip (_limitedShips:array, _excludedShips:array, _concreteShipsCollection:dhCollection)
	(scope
		(var isLimitedShipsVisible:bool = "_limitedShips.length > 0")
		(var isExcludedShipsVisible:bool = "_excludedShips.length > 0")
		(var isConcreteShipsVisible:bool = "_concreteShipsCollection.length > 0")
		(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND_SCOPE)

		(var contentScrollHeight:number = 0)
		(var currentScrollHeight:number = "min(contentScrollHeight, SHIP_RESTRICTIONS_HEIGHT)")
	)

	(macro HIDE_UI_ON_SHIPOVERVIEW)

	(style
		(width = "SHIP_RESTRICTIONS_WIDTH")
	)

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND_MARKUP "true")

	(element INFOTIP_SYSTEM_DEFAULT_CONTAINER
		(block
			(style
				(width = 100%)
				(paddingRight = "M")
				(paddingLeft = "M")
				(paddingTop = "SXS")
				(paddingBottom = "-SXS")
			)
			(element TooltipSystemHeaderSubheaderText
				_headerText = 'IDS_SEASON_RESTRICTIONS_TOOLTIP_HEADER'
			)
			(element TooltipSystemHorizontalDivider)
		)

		(scrollArea
			(style (width = 100%) (bind height "currentScrollHeight") (backgroundColor = "NO_COLOR"))

			(verticalSlider ScrollBarVLight
				_singleStep = 60
			)
			(hscrollPolicy = 'off')
			(vscrollPolicy = 'auto')

			(wheelScrollSpeed = 1.0)
			(wheelScrollAcceleration = 0.9)
			(maxScrollingAnimatedDistance = 150)

			(activeControlsAlpha = 1)
			(inactiveControlsAlpha = 0.5)
			(animationDuration = 0.2)
			(animationEasing = "Easing.cubic_out")

			(content
				(style (width = 100%))
				(bind contentScrollHeight "$globalLayoutBounds[3]" (event "$evLayoutBoundsChanged"))

				(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
					(block
						(style (width = 100%))
						(controller $Instance renderer='TooltipSystemSeasonShipsRestrictionBlock'
							(bind enabled "isLimitedShipsVisible")
							(args
								_shipsArray = "_limitedShips"
								_headerText = 'IDS_LIMITED_SHIPS_HEADER'
							)
						)
					)

					(block
						(style (width = 100%))
						(controller $Instance renderer='TooltipSystemHorizontalDivider'
							(bind enabled "isExcludedShipsVisible && isLimitedShipsVisible")
						)
					)
					(block
						(style (width = 100%))
						(controller $Instance renderer='TooltipSystemExcludedShipsRestrictionBlock'
							(bind enabled "isExcludedShipsVisible")
							(args
								_shipsArray = "_excludedShips"
								_headerText = 'IDS_EXCLUDED_SHIPS_HEADER'
							)
						)
					)

					(block
						(style (width = 100%))
						(controller $Instance renderer='TooltipSystemHorizontalDivider'
							(bind enabled "(isLimitedShipsVisible || isExcludedShipsVisible) && isConcreteShipsVisible")
						)
					)
					(controller $Instance renderer='TooltipSystemConcreteShipsRestrictionBlock'
						(bind enabled "isConcreteShipsVisible")
						(args
							_shipsCollection = "_concreteShipsCollection"
							_headerText = 'IDS_CONCRETE_SHIPS_HEADER'
						)
					)
				)
			)
		)
	)
)

(def element FormationHeader (_isTrainingRoom:bool=false, _isSpectatorsTeam:bool=false, _teamId:number="SC.Common.TRAINING_ROOM_TEAMS_IDS.SELF_TEAM", _isClanDivision:bool=false)
	(scope
		(macro PULL_TRAINING_ROOM_ENTITY)

		(var divisionEntranceInfoEntity:gfx = "$datahub.getSingleEntity(CC.divisionEntranceInfo)")
		(var isDivisionAvailable:bool = "divisionEntranceInfoEntity.divisionEntranceInfo.isDivisionAvailable" (event "divisionEntranceInfoEntity.divisionEntranceInfo.evIsDivisionAvailableChanged"))

		(var divisionDataEntity:gfx = "$datahub.getSingleEntity(CC.division)")
		(var shipRestrictions:dict = "divisionDataEntity.division.shipRestrictions ?: {}" (event "divisionDataEntity.division.evShipRestrictionsChanged"))

		(var selfPlayerEntity:gfx = "$datahub.getSingleEntity(CC.accountSelf)")
		(var preBattleSelfPlayerSimple:gfx = "selfPlayerEntity.preBattlePlayerSimple" (event "selfPlayerEntity.evAdded") (event "selfPlayerEntity.evRemoved"))
		(var selfTeamId:number = "preBattleSelfPlayerSimple.teamId" (event "preBattleSelfPlayerSimple.evTeamIdChanged"))
		(var isSelfPlayerCommander:bool = "preBattleSelfPlayerSimple.isCommander" (event "preBattleSelfPlayerSimple.evIsCommanderChanged"))
		(var selfPreBattleId:number = "preBattleSelfPlayerSimple.preBattleId" (event "preBattleSelfPlayerSimple.evPreBattleIdChanged"))
		(var isMercenary:bool = "preBattleSelfPlayerSimple.isMercenary" (event "preBattleSelfPlayerSimple.evIsMercenaryChanged"))

		(var preBattleEntity:gfx = "$datahub.getPrimaryEntity(CC.preBattle, selfPreBattleId)")
		(var isFormationInBattle:bool = "preBattleEntity.preBattle.isInBattle" (event "preBattleEntity.preBattle.evStatusChanged"))
		(var ownerId:number = "preBattleEntity.preBattle.ownerId" (event "preBattleEntity.preBattle.evOwnerIdChanged"))

		
		(var preBattleOwnerPlayerEntity:gfx = "$datahub.getPrimaryEntity(CC.preBattlePlayerSimple, ownerId)")
		(var clanId:number = "preBattleOwnerPlayerEntity.clanman.clanId" (event "preBattleOwnerPlayerEntity.clanman.evClanIdChanged"))

		(var clanEntity:gfx = "$datahub.getPrimaryEntity(CC.clan, clanId)")
		(var clanTag:str = "clanEntity.clan.tag" (event "clanEntity.clan.evTagChanged"))

		(var clanTeamEntity:gfx = "$datahub.getPrimaryEntity(CC.clanTeam, selfPreBattleId)")
		(var squadId:number = "clanTeamEntity.clanTeam.squadId" (event "clanTeamEntity.clanTeam.evSquadIdChanged"))

		(var clanLadderInfoEntity:gfx = "$datahub.getPrimaryEntity(CC.clanLadderInfo, clanId)")
		(var leadingSquadId:number = "clanLadderInfoEntity.clanLadderInfo.leadingSquadId")
		(var isLeadingSquad:bool = "squadId == leadingSquadId")

		(var hasClanSquadModifier:bool = "selfPlayerEntity.clanmanSupplyInfo.hasClanSquadModifier" (event "selfPlayerEntity.clanmanSupplyInfo.evHasClanSquadModifierChanged"))
		

		(var isShowClanSquadModifier:bool = "hasClanSquadModifier && !isMercenary && squadId")

		(var selectedBattleTypesCollections:gfx = "$datahub.getCollection(CC.battleType).getChildByPath('selected')")
		(var selectedBattleTypes:array = "selectedBattleTypesCollections.items" (event "selectedBattleTypesCollections.evAdded") (event "selectedBattleTypesCollections.evRemoved"))
		(var selectedBattleTypeEntity:gfx = "$datahub.getEntity(selectedBattleTypes[0].id)")

		(var trainingRoomComponent:gfx = "trainingRoomEntity.trainingRoom")
		(var trainingRoomTeamSize:number = "trainingRoomComponent.teamSize ?: 0" 		(event "trainingRoomComponent.evUpdate"))
		(var observersTeamSize:number = "trainingRoomComponent.observersTeamSize ?: 0" 	(event "trainingRoomComponent.evUpdate"))
		(var alphaTeamName:str = "trainingRoomComponent.alphaTeamName" 					(event "trainingRoomComponent.evUpdate"))
		(var bravoTeamName:str = "trainingRoomComponent.bravoTeamName" 					(event "trainingRoomComponent.evUpdate"))

		(var isNeutralTeam:bool = "_teamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.NEUTRAL_TEAM")
		(var isObserverTeam:bool = "_teamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.OBSERVER_TEAM")
		(var isSelfTeam:bool = "_teamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.SELF_TEAM")
		(var isOtherTeam:bool = "_teamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.OTHER_TEAM")
		
		(var maxPlayersInFormation:number = "_isTrainingRoom		?	isObserverTeam	? observersTeamSize
																						: trainingRoomTeamSize
																	:	shipRestrictions.maxPlayers")
		
		(var preBattlePlayersFilter:str = "_isTrainingRoom	? 'byPreBattleAndTeam.' + selfPreBattleId + '_' + _teamId + '.preBattleMembers'
															: 'byPreBattle.' + selfPreBattleId + '.preBattleMembers'")
		
		(var preBattlePlayerSimpleCollection:gfx = "$datahub.getCollection(CC.preBattlePlayerSimple)")
		(var preBattleMembersCollection:gfx = "preBattlePlayerSimpleCollection.getChildByPath(preBattlePlayersFilter)"	(event "preBattlePlayerSimpleCollection.evChildAdded")
																														(event "preBattlePlayerSimpleCollection.evChildRemoved"))
		(var preBattlePlayers:array = "preBattleMembersCollection.items ?: []"	(event "preBattleMembersCollection.evAdded")
																				(event "preBattleMembersCollection.evRemoved"))

		
		(var preBattlenvitedPlayersCollection:gfx = "preBattlePlayerSimpleCollection.getChildByPath('byPreBattleAndTeam.' + selfPreBattleId + '_' + _teamId + '.invitedPlayers')"	(event "preBattlePlayerSimpleCollection.evChildAdded")
																																													(event "preBattlePlayerSimpleCollection.evChildRemoved"))
		(var preBattleInvitedPlayers:array = "preBattlenvitedPlayersCollection.items ?: []"	(event "preBattlenvitedPlayersCollection.evAdded")
																							(event "preBattlenvitedPlayersCollection.evRemoved"))

		(var curPlayersInFormation:number = "preBattlePlayers.length + preBattleInvitedPlayers.length")


		(var label:str = "	_isTrainingRoom 	?	isSelfTeam 											? alphaTeamName	? alphaTeamName
																														: SC.Common.BASE_TEAM_NAMES.ALPHA_TEAM_NAME
												:	isOtherTeam											? bravoTeamName	? bravoTeamName
																														: SC.Common.BASE_TEAM_NAMES.BRAVO_TEAM_NAME
																										: toUpper(tr('IDS_DIVISION_' + _teamId)) :
							isFormationInBattle ?	tr('IDS_IN_BATTLE') :
							_isClanDivision		?	'[' + clanTag + '] ' + tr(isShowClanSquadModifier	? 'IDS_CLAN_SQUAD_' + squadId
																										: 'IDS_DIVISION')
												:	tr('IDS_DIVISION')")

		(var isLimitExceed:bool = "curPlayersInFormation >= maxPlayersInFormation")
		(var isLeadingIconVisible:bool = "_isClanDivision && isShowClanSquadModifier && isLeadingSquad && !isFormationInBattle")

		(var hasClanman:bool = "preBattleOwnerPlayerEntity && preBattleOwnerPlayerEntity.hasComponent(CC.clanman)" (event "preBattleOwnerPlayerEntity.evAdded") (event "preBattleOwnerPlayerEntity.evRemoved"))

		(var labelColorClass:number = "	_isTrainingRoom && isNeutralTeam				?	SC.Ui_styles.SERVICE_COLORS.WHITE	:
										_isTrainingRoom && selfTeamId == _teamId		?	SC.Ui_styles.SERVICE_COLORS.YELLOW	:
										_isTrainingRoom && selfTeamId != _teamId 		?	SC.Ui_styles.SERVICE_COLORS.WHITE	:
										isFormationInBattle || !isDivisionAvailable		?	SC.Ui_styles.SERVICE_COLORS.ORANGE
																						:	SC.Ui_styles.SERVICE_COLORS.YELLOW")

		(var colorClass:number = "	_isTrainingRoom && selfTeamId == _teamId 	? SC.Ui_styles.SERVICE_COLORS.YELLOW :
									_isTrainingRoom && selfTeamId != _teamId 	? SC.Ui_styles.SERVICE_COLORS.WHITE	 :
									isFormationInBattle							? SC.Ui_styles.SERVICE_COLORS.ORANGE
																				: SC.Ui_styles.SERVICE_COLORS.YELLOW")
	)
	(name = 'headerDivision')
	(style (flow = "horizontal"))

	(block
		(bind visible "!_isTrainingRoom && !hasClanman")
		(style	(hitTest = false) (width = 19px) (height = 19px) (marginTop = -3px) (marginBottom = "-XS") (marginRight = "XS")
				(backgroundImage = 'url:../service_kit/chat_channels/division.png'))
	)

	(tf
		(class $TextDefaultBold17NM)
		(style
			(bind alpha "_isTrainingRoom && (isNeutralTeam || selfTeamId != _teamId) ? TA : 1")
			(bind textColor "labelColorClass")
		)
		(bind text "label")
	)

	(block
		(bind visible "isLeadingIconVisible")
		(style (hitTest = false) (marginLeft = "S"))

		(controller $Instance renderer='LeadingClanSquadIcon'
			(bind enabled "isLeadingIconVisible")
			(args
				_isGolden = true
			)
		)
	)

	(hblock
		(bind visible "(isDivisionAvailable && !_isTrainingRoom) || (_isTrainingRoom && !isNeutralTeam)")
		(style (marginLeft = "S") (bind alpha "isLimitExceed ? 0.5 : 1"))

		(tf
			(class $TextDefaultBold17NM)
			(style
				(marginRight = "XXS")
				(bind textColor "colorClass")
			)
			(bind text "'(' + curPlayersInFormation")
		)

		(tf
			(class $TextDefaultBoldNM)
			(style
				(marginTop = 1px)
				(marginRight = 1px)
				(bind textColor "colorClass")
				(bind alpha "isLimitExceed ? 1 : 0.8")
			)
			(bind text "'/' + maxPlayersInFormation")
		)

		(tf
			(class $TextDefaultBold17NM)
			(style (bind textColor "colorClass"))
			(bind text "')'")
		)
	)
)

(def element LeadingClanSquadIcon (_size:number="SIZE.MEDIUM", _isGolden:bool=false)
	(scope
		(var sizeParam:str = "_size == SIZE.LARGE	? '30px' : '18px'")
		(var prefix:str = "_size == SIZE.LARGE ? '_big' : '_small'")
		(var status:str = "_isGolden ? 'golden' : 'white'")
	)
	(style
		(backgroundSize = "cover")
		(bind width "sizeParam")
		(bind height "sizeParam")
		(bind backgroundImage "'url:../service_kit/icons/icon_leading_squad_' + status + prefix + '.png'")
	)
)

(def element FormationShipClassesStatus (_preBattleId:number, _teamId:number)
	(scope
		(var classesListCollections:gfx = "$datahub.getCollection(CC.divisionShipCountRestriction)")
		(var filteredClassesListCollections:gfx = "classesListCollections.getChildByPath('shipClassCountRestrictions.byPreBattleAndTeam.' +  _preBattleId + '_' + _teamId + '.sorted')" (event "classesListCollections.evChildAdded"))
		(var classesList:array = "filteredClassesListCollections.items ?: []" (event "filteredClassesListCollections.evUpdated"))
	)
	(style (flow = "horizontal"))

	(controller $Repeat renderer='RepeatFormationShipClassStatus'
		(bind count "classesList.length")
		(args
			_divisionShipClassCountEntity = "classesList[$index]"
		)
	)
)

(def element RepeatFormationShipClassStatus (_divisionShipClassCountEntity:gfx)
	(scope
		(var shipClasses:array = "_divisionShipClassCountEntity.divisionShipCountRestriction.shipClasses ?: []" (event "_divisionShipClassCountEntity.divisionShipCountRestriction.evUpdate"))
		(var curCount:number = "_divisionShipClassCountEntity.divisionShipCountRestriction.curCount ?: 0" (event "_divisionShipClassCountEntity.divisionShipCountRestriction.evCurCountChanged"))
		(var maxCount:number = "_divisionShipClassCountEntity.divisionShipCountRestriction.maxCount ?: 0" (event "_divisionShipClassCountEntity.divisionShipCountRestriction.evUpdate"))
		
		(var restrictionsIds:str = "shipClasses.length > 1 ? 'IDS_DEPENDED_CLASSES_RESTRICTIONS_FOR_DIVISION_TOOLTIP' : 'IDS_CLASS_RESTRICTIONS_FOR_DIVISION_TOOLTIP'")
	)
	(style (flow = "horizontal") (bind marginLeft "$index ? SXS : 0px") (align = "middle") (backgroundColor = 0x01000000))

	(controller $Tooltip
		(renderer ='SimpleStatusTooltip')
		(args
			_text = "restrictionsIds"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(hblock
		(style (marginRight = "XXS"))

		(controller $Repeat renderer='ShipClassIconWrapper'
			(bind count "shipClasses.length")
			(args
				_length = "shipClasses.length"
				_shipType = "shipClasses[$index]"
			)
		)
	)
	(element DefaultDividedCounter
		_curValueTextClass = "'$TextDefaultBold17NM'"
		_curValue = "curCount"
		_maxValue = "maxCount"
		_doNotHideOnZeroMaxValue = true
		_doNotAlphaOnZeroCurValue = true
	)
)

(def element ShipClassIconWrapper (_shipType:str, _length:number)
	(style
		(marginBottom = -3px)
		(bind marginLeft "_length > 1 && $index != (_length - 1) ? -5px : 0px")
	)
	
	(element ShipIcon
		_shipType = "_shipType"
	)
)

(def constant TRAINING_ROOM_DRAG_SLOT_STATE_ALPHA {	ACTIVE:		0.5,
													OVER:		1,
													HIDE:		0
})

(def element FormationMainElement (_isTrainingRoom:bool, _formationPlayerClass:str='', _teamId:number="SC.Common.TRAINING_ROOM_TEAMS_IDS.NONE", _channelEntityId:number=null)
	(scope
		(var trainingRoomEntity:dhEntity = "getSingleEntity(CC.trainingRoomWindowState)")

		(var trainingRoomComponent:dhComponent = "trainingRoomEntity.trainingRoom")
		(var trainingRoomTeamSize:number = 	"trainingRoomComponent.teamSize ?: 0" 			(event "trainingRoomComponent.evUpdate"))
		(var observersTeamSize:number = 	"trainingRoomComponent.observersTeamSize ?: 0" 	(event "trainingRoomComponent.evUpdate"))
		(var isEnemyShipsHidden:bool = 		"trainingRoomComponent.hideShips" 				(event "trainingRoomComponent.evUpdate"))
		
		(var battleTypeCollection:dhCollection = "getCollection(CC.battleType).getChildByPath('selected')")
		(var battleTypeEntity:dhEntity = "battleTypeCollection.length > 0 ? battleTypeCollection[0] : null")
		(var battleTypeComponent:dhComponent = "battleTypeEntity.battleType")
		(var selectedBattleType:str = "battleTypeComponent.type ?: ''" (event "battleTypeComponent.evBattleTypeChanged"))

		(var selfPlayerEntity:dhEntity = "getSingleEntity(CC.accountSelf)")
		(var preBattleSelfPlayerSimpleComponent:dhComponent ="selfPlayerEntity.preBattlePlayerSimple")

		(var selfTeamId:number = 		"preBattleSelfPlayerSimpleComponent.teamId ?: 0" 		(event "preBattleSelfPlayerSimpleComponent.evTeamIdChanged"))
		(var selfPreBattleId:number = 	"preBattleSelfPlayerSimpleComponent.preBattleId ?: 0" 	(event "preBattleSelfPlayerSimpleComponent.evPreBattleIdChanged"))

		(var teamId:number = "_teamId != SC.Common.TRAINING_ROOM_TEAMS_IDS.NONE ? _teamId : selfTeamId")

		(var tournamentRoomInfoEntity:dhEntity = "getSingleEntity(CC.tournamentRoomInfo)")
		(var isTournamentRoomInfo:bool = "tournamentRoomInfoEntity != null")
		(var isActiveTournamentBattle:bool = "selectedBattleType == SC.Common.BATTLE_TYPES.TOURNAMENT_BATTLE")

		(var targetTournamentTeamId:number = "tournamentRoomInfoEntity.tournamentRoomInfo.targetTeamId" (event "tournamentRoomInfoEntity.tournamentRoomInfo.evChanged"))

		(var isSelfPlayerOwner:bool = 		"preBattleSelfPlayerSimpleComponent.isCommander" 	(event "preBattleSelfPlayerSimpleComponent.evIsCommanderChanged"))
		(var isSelfPlayerInBattle:bool = 	"preBattleSelfPlayerSimpleComponent.isInBattle" 	(event "preBattleSelfPlayerSimpleComponent.evIsInBattleChanged"))
		
		(var selfTrainingRoomPlayerComponent:dhComponent = "selfPlayerEntity.trainingRoomPlayer")
		(var isSelfPlayerCommander:bool = "selfTrainingRoomPlayerComponent.isCommander" (event "selfTrainingRoomPlayerComponent.evUpdate"))
		(var isTeamManagementAvailable:bool = "isSelfPlayerOwner || (isSelfPlayerCommander && selfTeamId == _teamId)")

		
		(var preBattlePlayersFilter:str = "_isTrainingRoom 	? 'byPreBattleAndTeam.' + selfPreBattleId + '_' + teamId + '.preBattleMembers.sorted' 
															: 'byPreBattle.' + selfPreBattleId + '.preBattleMembers.sorted'")

		(var preBattleInvitedPlayersFilter:str = "_isTrainingRoom 	? 'byPreBattleAndTeam.' + selfPreBattleId + '_' + teamId + '.invitedPlayers' 
																	: 'byPreBattle.' + selfPreBattleId + '.invitedPlayers'")
																	
		(var preBattlePlayersCollections:dhCollection = "getCollection(CC.preBattlePlayerSimple)")
		(var playersFilteredCollection:dhCollection = 			"preBattlePlayersCollections.getChildByPath(preBattlePlayersFilter)")
		(var invitedPlayersFilteredCollections:dhCollection = 	"preBattlePlayersCollections.getChildByPath(preBattleInvitedPlayersFilter)")

		(var playersFilteredCount:number = "playersFilteredCollection.length ?: 0")
		(var playersInvitedCount:number = "invitedPlayersFilteredCollections.length ?: 0")
		

		(var divisionDataEntity:dhEntity = "getSingleEntity(CC.division)")
		(var shipRestrictions:dict = "divisionDataEntity.division.shipRestrictions ?: {}" (event "divisionDataEntity.division.evShipRestrictionsChanged"))

		(var isNeutralTeam:bool = 	"_teamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.NEUTRAL_TEAM")
		(var isObserverTeam:bool = 	"_teamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.OBSERVER_TEAM")
		(var isSelfTeam:bool = 		"_teamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.SELF_TEAM")
		(var isOtherTeam:bool = 	"_teamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.OTHER_TEAM")
		(var isTargetTeam:bool = 	"targetTournamentTeamId == _teamId")
		(var isMyTeam:bool = 		"selfTeamId == _teamId")
		(var isMySelfTeam:bool = 	"selfTeamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.SELF_TEAM")
		(var isMyOtherTeam:bool = 	"selfTeamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.OTHER_TEAM")

		(var isTargetSelf:bool = 	"targetTournamentTeamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.SELF_TEAM")
		(var isTargetOther:bool = 	"targetTournamentTeamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.OTHER_TEAM")

		(var maxPlayersInFormation:number = "_isTrainingRoom 	?	isObserverTeam		? playersFilteredCount < observersTeamSize	? playersFilteredCount + 1
																																	: observersTeamSize  :
																	isNeutralTeam 		? playersFilteredCount
																						: trainingRoomTeamSize
																: shipRestrictions.maxPlayers")

		(var preBattleEntity:dhEntity = "getPrimaryEntity(CC.preBattle, selfPreBattleId)")
		(var isFormationInBattle:bool = "preBattleEntity.preBattle.isInBattle" (event "preBattleEntity.preBattle.evStatusChanged"))

		(var chatEntity:dhEntity = "getSingleEntity(CC.chat)")
		(var isChatServerAvailable:bool = "chatEntity.chat.isConnected" (event "chatEntity.chat.evConnected") (event "chatEntity.chat.evDisConnected"))
		(var showFormationPlayers:bool = "isChatServerAvailable || _isTrainingRoom")

		(var preBattlePlayersCount:number = "playersFilteredCount + playersInvitedCount")
		(var divisionItemsLength:number = "preBattlePlayersCount > maxPlayersInFormation ? preBattlePlayersCount : maxPlayersInFormation ")

	 	(var chosenOperationId:number = "battleTypeComponent.battleTypeGameParamId ?: 0")
		(var operationEntity:dhEntity = "getPrimaryEntity(CC.operation, chosenOperationId)")
		(var operationStatus:number = "operationEntity.operation.status ?: 0" (event "operationEntity.operation.evStatusChanged"))

		(var pveStateEntity:dhEntity = "getSingleEntity(CC.pveState)")
		(var isEnterMatchmaker:bool = "pveStateEntity.pveState.enterMatchmaker ?: true" (event "pveStateEntity.pveState.evEnterMatchmakerChanged"))

		(var isChosenOperationOfTheWeek:bool = "operationStatus == SC.Common.PVE_OPERATION_STATUS.WEEKLY")

		
		
		
		

		
		(var activeIdsTournament:array = "isSelfPlayerCommander ? 	isTargetSelf && isSelfTeam 		? ['-1', '-1_bot'] :
																	isTargetSelf && isNeutralTeam 	? ['0', '0_bot'] :
																	isTargetOther && isOtherTeam 	? ['-1', '-1_bot'] :
																	isTargetOther && isNeutralTeam 	? ['1', '1_bot']
																									: []
																: 	[]")
		
		(var activeIdsTrainingOwner:array = "	isSelfTeam		? ['-1', '1', '-1_bot', '1_bot', '100'] :
												isOtherTeam 	? ['0', '-1', '0_bot', '-1_bot', '100'] :
												isObserverTeam 	? ['0', '1', '-1']
																: ['0', '1', '0_bot', '1_bot', '100']")
		
		(var activeIdsTrainingCommander:array = "	isMyTeam 						? ['-1', '-1_bot'] :
													isNeutralTeam && isMySelfTeam	? ['0', '0_bot'] :
													isNeutralTeam && isMyOtherTeam	? ['1', '1_bot']
																					: []")

		(var activeIdsTrainigRoom:array = "	isSelfPlayerOwner 		? activeIdsTrainingOwner :
											isSelfPlayerCommander	? activeIdsTrainingCommander
																	: []")
		
		(var activeIds:array = "isTournamentRoomInfo ?  activeIdsTournament : activeIdsTrainigRoom")

		(event evDragStarted)
		(event evDragStopped)
		(event evDragAccept)
		(event evDragFadeIn)
		(event evDragFadeOut)

		(var isActiveDragging:bool = false)
		(bind isActiveDragging "true" init=false watch=false (event "evDragStarted"))
		(bind isActiveDragging "false" init=false watch=false (event "evDragStopped") (event "evDragAccept"))

		(var isActiveRemoveBotZone:bool = false)
		(bind isActiveRemoveBotZone "$event.isBot && isNeutralTeam" init=false watch=false (event "evDragStarted"))
		(bind isActiveRemoveBotZone "false" init=false watch=false (event "evDragStopped") (event "evDragAccept"))

		(var dragSlotBackgroundPath:str = "'url:../service_kit/panel_backgrounds/outlined_panel_shaded_' + (isActiveRemoveBotZone ? 'orange' : 'white') + '.png'" watch=false (event "evDragStarted"))

		(var dragRollOver:bool = false)
		(bind dragRollOver "true" init=false watch=false (event "evDragFadeIn"))
		(bind dragRollOver "false" init=false watch=false (event "evDragFadeOut") (event "evDragStopped") (event "evDragAccept"))
		
		(var dragSlotAlpha:number = "	dragRollOver		? TRAINING_ROOM_DRAG_SLOT_STATE_ALPHA.OVER :
										isActiveDragging	? TRAINING_ROOM_DRAG_SLOT_STATE_ALPHA.ACTIVE
															: TRAINING_ROOM_DRAG_SLOT_STATE_ALPHA.HIDE")

		(var isTournamentFormationReadySwitcherVisible:bool = "isActiveTournamentBattle ? !isNeutralTeam : true")
		(var isFormationReadySwitcherHidden:bool = "isEnemyShipsHidden && isNeutralTeam")
		(var isFormationReadySwitcherVisible:bool = "	!isObserverTeam && ((!_isTrainingRoom && !isSelfPlayerInBattle) || isMyTeam) 
														&& !isFormationReadySwitcherHidden && isTournamentFormationReadySwitcherVisible")
	)
	(bindcall externalCall "'inputMapping.onAction'" "['setTeamInTrainingRoom', { playerID: $event.playerId, teamID: teamId }]" init=false watch=false (event "evDragAccept"))
	(bind name "'FormationMainElement_' + _teamId")
	(class $Fullsize)
	(style (backgroundColor = 0x01000000))

	(block
		(class $Fullsize)
		(style (backgroundColor = 0x01000000))

		(controller $Droppable
			(bind slotIds "activeIds")
			(dispatch 'evDragStarted' args="$event" on='evDragStarted')
			(dispatch 'evDragStopped' args="$event" on='evDragStopped')
			(dispatch 'evDragAccept' args="$event" on='evDragFinished')
			(dispatch 'evDragFadeIn' args="$event" on='evDragIn')
			(dispatch 'evDragFadeOut' args="$event" on='evDragOut')
		)

		
		(scrollArea
			(class $Fullsize)

			(verticalSlider ScrollBarVLight
				_singleStep = 60
			)
			(hscrollPolicy='off')
			(vscrollPolicy='auto')

			(wheelScrollSpeed = 1.0)
			(wheelScrollAcceleration = 0.8)
			(maxScrollingAnimatedDistance = 280)

			(activeControlsAlpha = 1)
			(inactiveControlsAlpha = 0.5)
			(animationDuration = 0.2)
			(animationEasing = "Easing.cubic_out")

			(drag = false)

			(content
				(style (bind width "isNeutralTeam || isObserverTeam	? { 1280:290px, 1920:420px } : { 1280:340px, 1920:420px }"))

				(controller $Repeat renderer='DivisionListItem'
					(bind count "divisionItemsLength")
					(args
						_isTrainingRoom = "_isTrainingRoom"
						_teamId = "teamId"
						_formationPlayerClass = "_formationPlayerClass"
						_showInvites = "isTeamManagementAvailable &&
										!(_isTrainingRoom && (teamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.NEUTRAL_TEAM)) &&
										!(isFormationInBattle && isSelfPlayerInBattle)"
						_preBattlePlayers = "playersFilteredCollection"
						_preBattleInvitedPlayers = "invitedPlayersFilteredCollections"
						_channelEntityId = "_channelEntityId"
					)
				)
			)
		)

		(element DEFAULT_EXPAND_CONTAINER "!isObserverTeam && selectedBattleType == SC.Common.BATTLE_TYPES.PVE_BATTLE && !isSelfPlayerInBattle"
			(style (width = 100%) (paddingBottom = "SXS") (paddingLeft = "SXS") (paddingRight = "S") (paddingTop = "XXS")  (bind hitTest "!isActiveDragging"))
			
			(element CheckBox
				_isChecked = "isEnterMatchmaker && isChosenOperationOfTheWeek"
				_label ='IDS_PVE_DIVISION_MATCHMAKER_CHECKBOX_TEXT'
				_enabled = "isSelfPlayerOwner && isChosenOperationOfTheWeek"
				_maxTfWidth = 220px
				_methods = "[{
								type:	'inputMapping.onAction',
								name:	'PVEScriptsProxy.changeEnterMatchmaker',
								args:	{ isEnterMatchmaker: !isEnterMatchmaker }
							}]"
			)

			(controller $Tooltip
				(renderer = 'DescriptionStatusLineTooltip')
				(args
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
					_statusText = "!isSelfPlayerOwner ? 'IDS_PVE_DIVISION_MATCHMAKER_CONFIG_AVAILABLE_FOR_COMMANDER' : ''"
					_descriptionText = "isEnterMatchmaker ? 'IDS_PVE_DIVISION_MATCHMAKER_ON_INFO' : 'IDS_PVE_DIVISION_MATCHMAKER_OFF_INFO'"
				)
				(macro DEFAULT_TOOLTIP_BEHAVIOUR)
			)
		)

		(block
			(visible = "isFormationReadySwitcherVisible")
			(style (width = 100%) (paddingBottom = 21px) (align = "center") (alpha = "isFormationReadySwitcherVisible ? 1 : 0") (bind hitTest "!isActiveDragging"))
			(controller $Animation
				(bindcall play from="{ alpha: 0, visible: false, visualOffsetY: 5px }"	to="{alpha: 1, visible: true, visualOffsetY: 0px	}" duration=0.15 easing="Easing.line" action="kill" (bind enabled "isFormationReadySwitcherVisible"))
				(bindcall play from="{ alpha: 1, visible: true, visualOffsetY: 0px }"	to="{alpha: 0, visible: false, visualOffsetY: -5px	}" duration=0.15 easing="Easing.line" action="kill" (bind enabled "!isFormationReadySwitcherVisible"))
			)
			(element FormationReadySwitcher
				_isTrainingRoom = "_isTrainingRoom"
			)
		)
	)

	
	(block
		(class $FullsizeAbsolute)
		(style (hitTest = false) (paddingTop = -1px))

		(block
			(class $FullsizeAbsolute)
			(style
				(bind backgroundImage "dragSlotBackgroundPath")
				(alpha = "dragSlotAlpha")
				(scale9grid = 3)
			)
			(macro DEFAULT_CONTROL_STATE_ANIMATION_ALPHA _trigger="dragSlotAlpha" _alpha="dragSlotAlpha")
		)

		(block
			(bind visible "isActiveRemoveBotZone")
			(class $Fullsize)
			(style (align = "center|middle"))
			
			(block
				(style
					(width = 23px)
					(height = 23px)
					(backgroundImage = 'url:../service_kit/training_room/icon_bot_remove_zone.png')
					(marginBottom = "SXS")
				)
			)
			(tf
				(class $TextDefault17NM)
				(style (textColor = "SC.Ui_styles.SERVICE_COLORS.RED"))
				(text = 'IDS_TRAINING_ROOM_BOT_REMOVE_ZONE')
			)
		)
	)
)

(def element FormationReadySwitcher (_isTrainingRoom:bool)
	(scope
		(var selfPlayerEntity:gfx = "$datahub.getSingleEntity(CC.accountSelf)")
		(var preBattleSelfPlayerSimple:gfx ="selfPlayerEntity.preBattlePlayerSimple" (event "selfPlayerEntity.evAdded") (event "selfPlayerEntity.evRemoved"))
		(var isSelfPlayerReady:bool ="preBattleSelfPlayerSimple.isReady" (event "preBattleSelfPlayerSimple.evIsReadyChanged"))
		(var isSelfPlayerInBattle:bool ="preBattleSelfPlayerSimple.isInBattle" (event "preBattleSelfPlayerSimple.evIsInBattleChanged"))
		(var selfTeamId:number = "preBattleSelfPlayerSimple.teamId ?: SC.Common.TRAINING_ROOM_TEAMS_IDS.NONE" (event "preBattleSelfPlayerSimple.evTeamIdChanged"))

		(var selectedBattleTypesCollections:gfx = "$datahub.getCollection(CC.battleType).getChildByPath('selected')")
		(var selectedBattleTypes:array = "selectedBattleTypesCollections.items ?: []" (event "selectedBattleTypesCollections.evAdded") (event "selectedBattleTypesCollections.evRemoved"))
		(var selectedBattleTypeEntity:gfx = "selectedBattleTypes[0]")
		(var readyButtonDenyReasons:array = "selectedBattleTypeEntity.battleType.readyButtonReasons ?: []" (event "selectedBattleTypeEntity.battleType.evDisableReasonChanged"))

		(var isReadyBtnEnabled:bool = "readyButtonDenyReasons.length == 0 || isSelfPlayerReady || selfTeamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.NEUTRAL_TEAM")
	)
	(element TEXT_SWITCH_TABS_BACKGROUND
		(block
			(bind name "isSelfPlayerReady ? 'isReadyDivision' : 'isNotReadyDivision'")

			(controller $Tooltip
				(renderer='FormationReadyButtonTooltip')
				(bind enabled "isReadyBtnEnabled")
				(macro DEFAULT_TOOLTIP_BEHAVIOUR "1")
			)

			(element TextSwitchTab
				_width = 115px
				_height = 25px
				_label = "toUpper(tr('IDS_READY'))"
				_isEnabled = "isReadyBtnEnabled"
				_isReadyBtn = true
				_name = 'readyDivision'
				_methods = "[	{	type: 'inputMapping.onAction',
									name: _isTrainingRoom ? 'setIsReadyInTrainingRoom' : 'setIsReadyInDivision',
									args: {	isReady: true }
								}]"
				_isSelected = "isSelfPlayerReady || isSelfPlayerInBattle"

			)
		)
		(block
			(style (height = 100%))
			(element VerticalDivider)
		)
		(block
			(controller $Tooltip
				(renderer='FormationNotReadyButtonTooltip')
				(bind enabled "isReadyBtnEnabled")
				(args
					_isReadyBtnEnabled = "isReadyBtnEnabled"
				)
				(macro DEFAULT_TOOLTIP_BEHAVIOUR)
			)

			(element TextSwitchTab
				_width = 115px
				_height = 25px
				_label = "toUpper(tr('IDS_NOT_READY'))"
				_isEnabled = "isReadyBtnEnabled"
				_isReadyBtn = false
				_name = 'notReadyDivision'
				_methods = "[	{	type: 'inputMapping.onAction',
									name: _isTrainingRoom ? 'setIsReadyInTrainingRoom' : 'setIsReadyInDivision',
									args: {	isReady: false }
								}]"
				_isSelected = "!isSelfPlayerReady && !isSelfPlayerInBattle"
			)
		)
	)

	(controller $Tooltip
		(renderer='MultiparagraphStatusTooltip')
		(bind enabled "!isReadyBtnEnabled")
		(args
			_items = "readyButtonDenyReasons"
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.WARNING"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR "0")
	)
)

(def element DivisionListItem (_isTrainingRoom:bool, _teamId:number, _formationPlayerClass:str, _showInvites:bool,
								_preBattlePlayers:dhCollection, _preBattleInvitedPlayers:dhCollection, _channelEntityId:number)
	(scope
		(var preBattlePlayersCount:number = "_preBattlePlayers.length ?: 0")
		(var preBattleInvitedPlayersCount:number = "_preBattleInvitedPlayers.length ?: 0")

		(var entityPlayer:dhEntity = "$index < preBattlePlayersCount ? _preBattlePlayers[$index] : null")

		(var indexEntityInvitedPlayer:number = "$index - preBattlePlayersCount")
		(var isExistEntityInvitedPlayer:bool = "indexEntityInvitedPlayer >= 0 && indexEntityInvitedPlayer < preBattleInvitedPlayersCount")
		(var entityInvitedPlayer:dhEntity = "isExistEntityInvitedPlayer ? _preBattleInvitedPlayers[indexEntityInvitedPlayer] : null")
		
		(var renderElement:str = "_formationPlayerClass ? _formationPlayerClass : 'FormationPlayerItem'")

		(var isVisiblePlayerListItem:bool = "entityPlayer != null")
		(var isVisibleInvitedPlayerListItem:bool = "entityInvitedPlayer != null")
		(var isVisibleInviteListItem:bool = "_showInvites && !isVisiblePlayerListItem && !isVisibleInvitedPlayerListItem")

		(var divisionEntranceInfotipIsVisible:bool = false)
		(var isTournamentRoomInfo:bool = "getSingleComponent(CC.tournamentRoomInfo) != null")
	)
	(style (width = 100%) (height = "{720:28px, 1080:32px}"))

	(controller $Instance
		(bind renderer "renderElement")
		(bind enabled "isVisiblePlayerListItem")
		(args
			_entityAccountId = "entityPlayer.id"
			_channelEntityId = "_channelEntityId"
		)
	)

	(controller $Instance renderer='InvitedPlayerItem'
		(bind enabled "isVisibleInvitedPlayerListItem")
		(args
			_accountEntity = "entityInvitedPlayer"
			_isTrainingRoom = "_isTrainingRoom"
		)
	)
	
	(controller $Instance renderer='FormationInviteListItem'
		(bind enabled "!isTournamentRoomInfo && isVisibleInviteListItem")
		(args
			_isTrainingRoom = "_isTrainingRoom"
			_teamId = "_teamId"
		)
	)
	
	(controller $Tooltip
		(renderer = 'SimpleStatusTooltip')
		(bind enabled "isVisibleInviteListItem")
		(args
			_text = 'IDS_HINT_INVITE_PLAYERS'
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR "0")
	)

	(controller $Tooltip
		(bind enabled "isVisibleInviteListItem")
		(renderer = 'DivisionEntranceInfotip')
		(args
			_isFromTrainingRoomBtn = "_isTrainingRoom"
			_teamId = "_teamId"
		)
		(macro DEFAULT_INFOTIP_BEHAVIOUR "1")
		
		(bind align "_teamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.SELF_TEAM ? right|middle : left|middle")
		(position = "borderNoTrack")

		(bind divisionEntranceInfotipIsVisible "true" init=false on='evStartShow')
		(bind divisionEntranceInfotipIsVisible "false" init=false on='evHide')
	)
)

(def element InvitedPlayerItem (_accountEntity:dhEntity)
	(scope
		(macro MOUSE_HANDLER_SCOPE)

		(var isSelfPlayer:bool = "_accountEntity.accountSimple.isSelfPlayer")
		(var nickName:str = "_accountEntity.accountName.nickName" (event "_accountEntity.accountName.evChanged"))
		(var isSuspended:bool = "_accountEntity.accountSimple.suspended" (event "_accountEntity.accountSimple.evSuspendedChanged"))
		
		(var preBattlePlayerSimple:dhComponent ="_accountEntity.preBattlePlayerSimple")
		(var prebattlePlayerId:number = "preBattlePlayerSimple.id")
		
		(var selfPlayerEntity:dhEntity = "getSingleEntity(CC.accountSelf)")
		(var preBattleSelfPlayerSimple:dhComponent ="selfPlayerEntity.preBattlePlayerSimple")
		(var isSelfPlayerCommander:bool = "preBattleSelfPlayerSimple.isCommander" (event "preBattleSelfPlayerSimple.evIsCommanderChanged"))

		(var formationPlayerContextMenuVisible:bool = false)
		
	)
	(bind name "'invitedDivisionPlayer_' + nickName")
	(class $Fullsize)

	(block
		(class $FullsizeAbsolute)
		(style (bind hitTest "!isSelfPlayer"))
		(element DockSubmenuItem
			_selected = "formationPlayerContextMenuVisible"
			_rollOver = "rollOver"
			_methods = "[ {
							type:	'inputMapping.onAction',
							name:	'openChannelForPrivateMessages',
							args:	{ dbId: _accountEntity.accountSimple.dbId }
						}]"
		)

		(controller $Tooltip
			(renderer = 'ContactInfoTooltip')
			(args
				_entityAccountId = "_accountEntity.id"
				_actionDenyReason = "ACTION_DENY_REASON_NONE"
				_playerContext = "{ type: 'startPrivateChat' }"
				_isContextMenuAvailable = "!isSelfPlayer"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR "0")
		)

		(controller $Tooltip
			(bind enabled "!isSelfPlayer")
			(renderer = 'ContactContextMenu')
			(args
				_entityAccountId = "_accountEntity.id"
				_playerContext = "{ type: 'startPrivateChat' }"
				_inviteType = "SC.Pre_battle.PRE_BATTLE_INVITE_TYPE.COMMON"
				_isInvitation = true
			)
			(macro DEFAULT_MENU_BEHAVIOUR "1")
			(bind formationPlayerContextMenuVisible "true" init=false on='evStartShow')
			(bind formationPlayerContextMenuVisible "false" init=false on='evHide')
		)
	)

	(hblock
		(class $Fullsize)
		(style (paddingLeft = 13px) (paddingRight = 6px) (align = "middle") (alpha = "TS"))
		
		(block
			(style (hitTest = false) (marginLeft = 1px) (marginTop = 3px) (marginRight = 6px))
			(element FormationPlayerIcon
				_isEmptySlot = true
			)
		)

		(tf
			(class $TextDefaultNM)
			(style
				(width = 100%)
				(wordWrap = false)
				(elideMode = true)
				(hitTest = false) 
				(bind textColor "_accountEntity.isAbuser	? SC.Ui_styles.SERVICE_COLORS.PINK
															: SC.Ui_styles.SERVICE_COLORS.GRAY")
			)
			(bind text "nickName")
		)

		(block
			(bind visible "rollOver && isSelfPlayerCommander")

			(element CloseButton
				_tooltipText = 'IDS_RECALL_INVITATION'
				_methods = "[	{	type: 'inputMapping.onAction',
									name: 'revokeInvitationToDivision',
									args: {	id: prebattlePlayerId }
								}]"
			)
		)
	)
	(macro MOUSE_EVENTS_DISPATCHER)
)

(def element TrainingRoomPlayerItem (_entityAccountId:number, _channelEntityId:number)
	(scope
		(var entityAccount:gfx = "$datahub.getEntity(_entityAccountId)")
		(var preBattleAccountPlayerSimple:gfx = "entityAccount.preBattlePlayerSimple" (event "entityAccount.evAdded") (event "entityAccount.evRemoved"))
		(var entityAccountTeamId:number = "preBattleAccountPlayerSimple.teamId ?: 0" (event "preBattleAccountPlayerSimple.evTeamIdChanged"))

		(var selfPlayerEntity:gfx = "$datahub.getSingleEntity(CC.accountSelf)")
		(var preBattleSelfPlayerSimple:gfx ="selfPlayerEntity.preBattlePlayerSimple" (event "selfPlayerEntity.evAdded") (event "selfPlayerEntity.evRemoved"))

		(var selfTeamId:number = "preBattleSelfPlayerSimple.teamId ?: 0" (event "preBattleSelfPlayerSimple.evTeamIdChanged"))
		(var isSelfPlayerOwner:bool = "preBattleSelfPlayerSimple.isCommander" (event "preBattleSelfPlayerSimple.evIsCommanderChanged"))
		
		(var selfTrainingRoomPlayer:gfx = "selfPlayerEntity.trainingRoomPlayer" (event "selfPlayerEntity.evAdded") (event "selfPlayerEntity.evRemoved"))
		(var isSelfPlayerCommander:bool = "selfTrainingRoomPlayer.isCommander" (event "selfTrainingRoomPlayer.evUpdate"))
		
		(var tournamentRoomInfoEntity:dhEntity = "getSingleEntity(CC.tournamentRoomInfo)")
		(var isTournamentRoomInfo:bool = "tournamentRoomInfoEntity != null")
		(var targetTournamentTeamId:number = "tournamentRoomInfoEntity.tournamentRoomInfo.targetTeamId" (event "tournamentRoomInfoEntity.tournamentRoomInfo.evChanged"))

		(var isNeutralTeam:bool = "entityAccountTeamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.NEUTRAL_TEAM")
		(var isMyTeam:bool = "selfTeamId == entityAccountTeamId")
		(var isTargetTournamentTeam:bool = "targetTournamentTeamId == entityAccountTeamId")

		(var isTeamCommander:bool = "isSelfPlayerCommander && (isMyTeam || isNeutralTeam)")		
		(var isTournamentTeamCommander:bool = "	isTournamentRoomInfo && isSelfPlayerCommander && (isMyTeam || isNeutralTeam || isTargetTournamentTeam)")
		
		(var isTeamManagementAvailable:bool = "isSelfPlayerOwner || isTeamCommander || isTournamentTeamCommander")
		
		(var isBot:bool = "entityAccount && entityAccount.hasComponent(CC.bot)" (event "entityAccount.evAdded") (event "entityAccount.evRemoved"))
		(var dropTypePostfix:str = "isBot ? '_bot' : ''")

		(var dragSlotId:str = "toString(entityAccountTeamId) + dropTypePostfix")

		(macro PULL_TRAINING_ROOM_ENTITY)
		(var trainingRoomComponent:gfx = "trainingRoomEntity.trainingRoom")
		(var isEnemyShipsHidden:bool = "trainingRoomComponent.hideShips" (event "trainingRoomComponent.evUpdate"))
		(var isHiddenShips:bool = "isEnemyShipsHidden && isNeutralTeam")
	)
	(class $Fullsize)
	(style (backgroundColor = 0x01000000))
	(bind name "'TrainingRoomPlayerItem_' + $index")

	(controller $Draggable
		(bind enabled "isTeamManagementAvailable")
		(bind slotId "dragSlotId")
		(args
			playerId = "preBattleAccountPlayerSimple.id"
			isBot = "isBot"
		)
	)

	(element FormationPlayerItem
		_entityAccountId = "_entityAccountId"
		_channelEntityId = "_channelEntityId"
		_isTrainingRoom = true
		_isHiddenShip = "isHiddenShips"
	)
)

(def element FormationPlayerItem (_entityAccountId:number, _channelEntityId:number, _isTrainingRoom:bool=false, _isHiddenShip:bool=false)
	(scope
		(event evIsReadyTrueChanged)
		(event evIsReadyFalseChanged)

		(var entityAccount:dhEntity = "getEntity(_entityAccountId)")
		(var isBot:bool = "entityAccount.hasComponent(CC.bot)")

		(var accountSimpleComponent:dhComponent = 			"entityAccount.accountSimple")
		(var accountNameComponent:dhComponent = 			"entityAccount.accountName")
		(var preBattlePlayerSimpleComponent:dhComponent = 	"entityAccount.preBattlePlayerSimple")
		(var trainingRoomPlayerComponent:dhComponent = 		"entityAccount.trainingRoomPlayer")

		(var isSelfPlayer:bool = "accountSimpleComponent.isSelfPlayer ?: false")
		(var isSuspended:bool = "accountSimpleComponent.suspended" (event "accountSimpleComponent.evSuspendedChanged"))

		
		(var shipId:number = 				"preBattlePlayerSimpleComponent.shipId ?: 0" 	(event "preBattlePlayerSimpleComponent.evShipIdChanged"))
		(var teamId:number = 				"preBattlePlayerSimpleComponent.teamId ?: 0" 	(event "preBattlePlayerSimpleComponent.evTeamIdChanged"))
		(var isReady:bool = 				"preBattlePlayerSimpleComponent.isReady" 		(event "preBattlePlayerSimpleComponent.evIsReadyChanged"))
		(var isInBattle:bool = 				"preBattlePlayerSimpleComponent.isInBattle" 	(event "preBattlePlayerSimpleComponent.evIsInBattleChanged"))
		(var isCommanderOwner:bool = 		"preBattlePlayerSimpleComponent.isCommander" 	(event "preBattlePlayerSimpleComponent.evIsCommanderChanged"))
		(var isMercenary:bool = 			"preBattlePlayerSimpleComponent.isMercenary" 	(event "preBattlePlayerSimpleComponent.evIsMercenaryChanged"))
	
		(var isTrainingCommander:bool = "trainingRoomPlayerComponent.isCommander" (event "trainingRoomPlayerComponent.evUpdate"))
		
		
		(var nickName:str = "accountNameComponent.nickName ?: ''" 	(event "accountNameComponent.evChanged"))
		(var pureName:str = "accountNameComponent.name ?: ''" 		(event "accountNameComponent.evChanged"))

		(var selfPlayerEntity:dhEntity = "getSingleEntity(CC.accountSelf)")
		(var selfTrainingRoomPlayerComponent:dhComponent = 	"selfPlayerEntity.trainingRoomPlayer")
		(var selfPreBattlePlayerSimple:dhComponent = "selfPlayerEntity.preBattlePlayerSimple")
		
		(var isSelfTrainingCommander:bool = 			"selfTrainingRoomPlayerComponent.isCommander" 	(event "selfTrainingRoomPlayerComponent.evUpdate"))
		(var isSelfPreBattleOwner:bool = 				"selfPreBattlePlayerSimple.isCommander" 		(event "selfPreBattlePlayerSimple.evIsCommanderChanged"))
		(var isSelfPreBattlePlayerSimpleInBattle:bool = "selfPreBattlePlayerSimple.isInBattle"			(event "selfPreBattlePlayerSimple.evIsInBattleChanged"))
		(var selfTeamId:number = 						"selfPreBattlePlayerSimple.teamId ?: 0" 		(event "selfPreBattlePlayerSimple.evTeamIdChanged"))

		(var isTrainingTeamObserver:bool = 	"teamId == SC.Common.TRAINING_ROOM_TEAMS_IDS.OBSERVER_TEAM")
		(var isMyTeam:bool = "teamId == selfTeamId")
		
		(var chatComponent:dhComponent = "getSingleComponent(CC.chat)")
		(var isChatOptionsAvailable:bool = "chatComponent.isConnected" 	(event "chatComponent.evConnected") (event "chatComponent.evDisConnected"))
		(var isChatOptionsAcces:bool = "isChatOptionsAvailable && !isSelfPlayer")

		(var isTournamentRoomInfo:bool = 	"getSingleComponent(CC.tournamentRoomInfo) != null")
		(var isDivisionData:bool = 			"getSingleComponent(CC.division) != null")
		(var isTrainingRoomState:bool = 	"getSingleComponent(CC.trainingRoomWindowState) != null && !isTournamentRoomInfo")

		(var isTrainigCommanderOptionsAvailable:bool = "isSelfTrainingCommander && !isCommanderOwner && isMyTeam")

		(var isTournamentOptionsAvailable:bool = 	"isTournamentRoomInfo && isSelfPreBattleOwner")
		(var isTrainigOptionsAvailable:bool = 		"isTrainingRoomState && (isSelfPreBattleOwner || isTrainigCommanderOptionsAvailable)")
		(var isDivisionOptionsAvailable:bool = 		"isDivisionData && isSelfPreBattleOwner")

		(var isPreBattleOptionsAvailable:bool = "	!isSelfPlayer && !isSelfPreBattlePlayerSimpleInBattle
													&& (isTournamentOptionsAvailable || isTrainigOptionsAvailable || isDivisionOptionsAvailable)")
													
		(var isContextMenuAvailable:bool = "isBot ? isSelfPreBattleOwner : (isPreBattleOptionsAvailable || isChatOptionsAcces)")

		(var isShipLineVisible:bool = "!_isHiddenShip && shipId && (isReady || isInBattle && !isTrainingTeamObserver)")

		(var formationPlayerContextMenuVisible:bool = false)
		
	)
	(class $Fullsize)
	(dispatch "isReady ? 'evIsReadyTrueChanged' : 'evIsReadyFalseChanged'" (event "preBattlePlayerSimpleComponent.evIsReadyChanged"))

	(block
		(bind visible "isSelfPlayer")
		(class $FullsizeAbsolute)
		(style (hitTest = false) (backgroundColor = "SC.Ui_styles.SERVICE_COLORS.INNER_PANEL"))
	)

	(block
		(class $FullsizeAbsolute)
		(style (bind hitTest "!isSuspended"))

		(element DockSubmenuItem
			_selected = "formationPlayerContextMenuVisible"
			_methods = "[ {
							type:	!isSelfPlayer && !isBot ? 'inputMapping.onAction' : '',
							name:	'openChannelForPrivateMessages',
							args:	{ dbId: accountSimpleComponent.dbId }
						}]"
		)

		(controller $Tooltip
			(renderer = 'ContactInfoTooltip')
			(args
				_entityAccountId = "entityAccount.id"
				_actionDenyReason = "ACTION_DENY_REASON_NONE"
				_playerContext = "{ type: 'startPrivateChat' }"
				_isContextMenuAvailable = "isContextMenuAvailable"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR "0")
		)

		(controller $Tooltip
			(bind enabled "isContextMenuAvailable")
			(renderer = 'ContactContextMenu')
			(args
				_entityAccountId = "entityAccount.id"
				_playerContext = "{ type: 'startPrivateChat' }"
				_inviteType = "SC.Pre_battle.PRE_BATTLE_INVITE_TYPE.COMMON"
				_isTrainingRoom = "_isTrainingRoom"
			)
			(macro DEFAULT_MENU_BEHAVIOUR "1")
			(bind formationPlayerContextMenuVisible "true" init=false on='evStartShow')
			(bind formationPlayerContextMenuVisible "false" init=false on='evHide')
		)
	)

	
	(block
		(class $FullsizeAbsolute)
		(style (hitTest = false))
		
		(block
			(class $FullsizeAbsolute)
			(style (backgroundColor = 0x90FF9933) (alpha = 0))

			(controller $Animation
				(bindcall play
					keyframes="[
						{ percent:0,	to:{alpha:0} }, 
						{ percent:45,	to:{alpha:1} },
						{ percent:55,	to:{alpha:1} },
						{ percent:100,	to:{alpha:0} }
					]"
					duration = 0.5
					action = "killAll"
					easing = "Easing.quad_in"
					(event "evIsReadyFalseChanged")
				)
			)
		)
		
		(block
			(class $FullsizeAbsolute)
			(style (backgroundColor = 0x804CE8AA) (alpha = 0))

			(controller $Animation
				(bindcall play
					keyframes="[
						{ percent:0,	to:{alpha:0} }, 
						{ percent:45,	to:{alpha:1} },
						{ percent:55,	to:{alpha:1} },
						{ percent:100,	to:{alpha:0} }
					]"
					duration = 0.5
					action = "killAll"
					easing = "Easing.quad_in"
					(event "evIsReadyTrueChanged")
				)
			)
		)
	)
	
	(hblock
		(bind name "'participantDivisionPlayer_' + nickName")

		(class $Fullsize)
		(style (hitTest = false) (paddingLeft = 13px) (paddingRight = 6px) (align = "middle"))
		
		(block
			(style (marginLeft = -14px) (width = 12px))
			(element VoiceChatDockIcon
				_playerName = "pureName"
				_isSelf = "isSelfPlayer"
			)
		)
		(block
			(style (marginLeft = 3px) (marginTop = 3px) (marginRight = 6px))
			(bind name "'participantDivisionPlayer_' + teamId + '_' + nickName")

			(element FormationPlayerIcon
				_isCommander = "isCommanderOwner || isTrainingCommander"
				_isMercenary = "isMercenary"
				_isReady = "isReady"
				_isInBattle = "isInBattle"
				_isOtherTeam = "selfTeamId != teamId"
			)
		)
		(tf
			(bind class "isSelfPlayer ? '$TextDefaultBoldNM' : '$TextDefaultNM'")
			(style
				(bind width "isShipLineVisible ? 45% : 100%")
				(wordWrap = false)
				(elideMode = true)
				(bind alpha "selfTeamId == teamId && !isMercenary ? 1 : TA")
				(bind textColor "selfTeamId == teamId && !isMercenary	? SC.Ui_styles.SERVICE_COLORS.YELLOW
																		: SC.Ui_styles.SERVICE_COLORS.WHITE")
			)
			(bind text "nickName")
		)

		(block
			(bind visible "isShipLineVisible")
			(bind name "'lbl_ship_line_' + teamId")
			(style (width = 55%))

			(controller $Instance renderer='ShipLineItemNM'
				(bind enabled "isShipLineVisible")
				(args
					_shipId = "shipId"
					_withFlag = false
					_width = '100%'
					_hideUpgradableStatus = true
				)
			)
		)
	)
)

(def element VoiceChatDockIcon (_isSelf:bool, _playerName:str)
	(scope
		(macro GET_PREF 'selfVoiceChatEnabled' "'sound.voice.chat.enabled'")
		
		(var playerVoiceChatEntity:gfx = "$datahub.getPrimaryEntity(CC.playerVoiceState, _playerName)")
		(var isMuted:bool = "playerVoiceChatEntity.playerVoiceState.isMuted" (event "playerVoiceChatEntity.playerVoiceState.evIsMutedChanged"))
		(var isSpeaking:bool = "playerVoiceChatEntity.playerVoiceState.isSpeaking" (event "playerVoiceChatEntity.playerVoiceState.evIsSpeakingChanged"))

		(var playerVoiceChatIsEnabled:bool = "playerVoiceChatEntity != null")
		(var isChatEnabled:bool = "_isSelf	? selfVoiceChatEnabled
											: selfVoiceChatEnabled	? playerVoiceChatIsEnabled
																	: true")

		(var bgImage:str = "!isChatEnabled		? 'swf:../service_kit/chat_channels_svg/chat_channels_svg.swf:voice_chat_disabled' :
							isMuted				? 'swf:../service_kit/chat_channels_svg/chat_channels_svg.swf:voice_chat_muted' :
							isSpeaking			? 'swf:../service_kit/chat_channels_svg/chat_channels_svg.swf:voice_chat_speak'
												: ''")
	)
	(style
		(width = 19px)
		(height = 19px)
		(bind backgroundImage "bgImage")
	)
)

(def element FormationInviteListItem (_isTrainingRoom:bool, _teamId:number)
	(scope
		(event evMenuItemClicked)
		(var formationType:str = "_isTrainingRoom ? 'TRAINING_ROOM' : 'DIVISION'")
	)
	(class $Fullsize)
	(style (align = "middle"))
	(bind name "'FormationInviteListItem_' + _teamId")

	(block
		(class $FullsizeAbsolute)

		(element DockSubmenuItem
			_selected = false
		)
	)

	(hblock
		(style (paddingLeft = 13px) (hitTest = false) (align = "middle"))
		
		(block
			(style
				(width = 14px)
				(height = 14px)
				(backgroundImage = 'url:../service_kit/icons/icon_invite.png')
				(backgroundSize = "cover")
			)
		)
		(tf
			(class $TextDefaultNM)
			(style (marginLeft = 6px) (alpha = 0.6))
			(bind text "tr(toUpper('IDS_HINT_LEFT_CLICK_TO_INVITE_TO_' + formationType))")
		)
	)
)

(def element PreBattlePlayerShip (_shipId:number)
	(scope
		(macro PULL_SHIP_SCOPE "_shipId" "'shipEntity'" "'shipInfo'")
	)
	(style (flow = "horizontal") (width = 100%) (align = "middle"))

	(block
		(style (marginTop = 1px) (marginBottom = -1px)) 
		(element ShipIcon
			_shipType = "shipInfo.subtype"
		)
	)

	(block
		(style
			(bind marginLeft "shipInfo.levelIcon.length == 0 ? 3px : 0px")
			(bind marginRight "shipInfo.levelIcon.length == 0 ? XXS : 1px")
			
		)
		(element ShipLevelNM
			_levelIcon = "shipInfo.levelIcon"
			_levelRome = "shipInfo.levelRome"
			_alpha = "TA"
		)
	)
	(tf
		(class $TextDefaultBoldNM)
		(style (alpha = "TA") (width = 100%) (wordWrap = false))
		(bind text "toUpper(tr(shipInfo.nameIDS))")
	)
)