(def constant BANNER_SIZE_WIDTH 280px)

(def constant BANNER_SIZE_HEIGHT {
	SMALL: 	36px,
	MEDIUM:	69px
})

(def constant MOTIVATOR_BANNER_MIN_HEIGHT {
	RESOLUTION_SMALL: 84px,
	RESOLUTION_LARGE: 98px,
})

(def constant MOTIVATOR_REWARD_SIZE {
	SMALL: 48px,
	LARGE: 68px,
})

(def constant MOTIVATOR_SYMBOLS_MAX 23)

(def constant TUTORIAL_BANNER_MAX_LEVEL 14)

(def constant NEWBIE_QUESTS_BANNER_MAX_LEVEL 8)

(def css $PortBanner ()
	(padding = "SXS")
	(gap = "SXS")
)

(def css $PortBannerStatus ()
	(position = "absolute")
	(right = 0)
	(width = 32px)
	(align = "center")
)

(def css $MarkerRewardPosition ()
	(position = "absolute")
	(top = -10px)
	(right = 0px)
)

(def constant ALPHA_BANNER_STATE {	SC.Ui_styles.BUTTON_STATE.OVER:	1,
									SC.Ui_styles.BUTTON_STATE.DOWN:	0,
									SC.Ui_styles.BUTTON_STATE.UP:	0
})

(def macro MOUSE_HANDLER_BANNER (_methods:expression=[])
	(macro MOUSE_EVENTS_DISPATCHER)
	(macro SOUND_HANDLER "'button_banner'")
	(macro MOUSE_LMB_EXTERNAL_CALL_REPEAT _methods = "_methods")
)

(def macro MOTIVATOR_STAGE_SIZES ()
	(macro STAGE_SIZE)
	(var isMediumResolution:bool = "stageHeight < 1080")
	(var isSmallResolution:bool = "stageHeight <= 800")
)

(def element SseBannerMain ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		(var sseOpenEndedCounterEntity:dhEntity = "getSingleEntity(CC.sseOpenEndedCounter)")
		(var sseOpenEndedCounterComponent:dhComponent = "sseOpenEndedCounterEntity.sseOpenEndedCounter")
		(var activeOpenEndedTasksCount:number = "sseOpenEndedCounterComponent.activeAmount ?: 0" (event "sseOpenEndedCounterComponent.evChanged"))

		(var itemsFirstLineCollection:dhCollection = "getCollection(CC.sseCore).child('bannerSSEItems')")
		(var commonTasksCount:number = "itemsFirstLineCollection.length ?: 0")

		(var sseCountTasks:number = "commonTasksCount + activeOpenEndedTasksCount")
		(var isTasksExist:bool = "sseCountTasks > 0")

		(var activeTaskStateDoneCollection:dhCollection = "getCollectionByPath(CC.campaignTaskPlayer, 'active.taskStateDone')")
		(var hasCampaignReward:bool = "activeTaskStateDoneCollection.length > 0")

		(var sseWindowStateEnity:dhEntity = "getSingleEntity(CC.sseWindowState)")
		(var sseWindowStateComponent:dhComponent = "sseWindowStateEnity.sseWindowState")
		(var hasSSeReward:bool = "sseWindowStateComponent.unclaimedRewardCount > 0" (event "sseWindowStateComponent.evChanged"))

		(var hasReward:bool = "hasCampaignReward || hasSSeReward")

		(struct featureSse =		FEATURES(_state = "SC.Common.ACCOUNT_FEATURE.ACTIONS_USE"))
		(struct featureCampaign =	FEATURES(_state = "SC.Common.ACCOUNT_FEATURE.CAMPAIGNS"))

		(var isFeatureSseLocked:bool = "featureSse.state == 'locked'")
		(var title:str = "isFeatureSseLocked ? 'IDS_DOCK_BANNER_SSE_NEWBIE_QUESTS' : 'IDS_DOCK_BANNER_SSE_BATTLE_TASKS'")

		(var newbieQuestCollection:dhCollection = "getCollection(CC.newbieQuest)")

		(var newbieQuestAllCollection:dhCollection = "newbieQuestCollection.child('sorted')")
		(var isNewbieQuestAvailable:bool = "newbieQuestAllCollection.length > 0 ")

		(var newbieQuestActiveCollection:dhCollection = "newbieQuestCollection.getChildByPath('notDone')")
		(var newbieQuestActiveCount:number = "newbieQuestActiveCollection.length ?: 0")
		(var isNewbieQuestCountVisible:bool = "isFeatureSseLocked && newbieQuestActiveCount > 0")

		(var shipAcesSeasonEntity:dhEntity = "getSingleEntity(CC.shipAcesSeason)")
		(var isShipAcesAvailable:bool = "shipAcesSeasonEntity != null")

		(var sseOpenEndedEntity:dhEntity = "getSingleEntity(CC.sseOpenEnded)")

		(var newContentEnity:dhEntity = "getPrimaryEntity(CC.newContent, SC.Common.CONTENT_CATEGORY.SSETAGS)")
		(var newContentComponent:dhComponent = "newContentEnity.newContent")
		(var isNewContent:bool = "newContentComponent.count > 0" (event "newContentComponent.evCountChanged"))

		(var isNewCampaigns:bool = "featureCampaign.state == 'new'")
		(var isNewShipAcesSeason:bool = "shipAcesSeasonEntity.hasComponent(CC.newItem)")
		(var isNewSseOpenEnded:bool = 	"sseOpenEndedEntity.hasComponent(CC.newItem)")

		(var newContentEntity:dhEntity = "getPrimaryEntity(CC.newContent, SC.Common.CONTENT_CATEGORY.NEWBIE_QUESTS_BANNER_STATE)")
		(var newShipContentComponent:dhComponent = "newContentEntity.newContent")
		(var isNewbieQuestMarkerVisible:bool = "newShipContentComponent.count > 0" (event "newShipContentComponent.evCountChanged"))

		(var isNewMarkerVisible:bool = "isTasksExist && isNewContent || isNewShipAcesSeason || isNewSseOpenEnded || isNewCampaigns || isNewbieQuestMarkerVisible")

		
		(struct sseIntroNewTip =			PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SSE_INTRO"))
		(struct sseIntroRepeatNewTip =		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SSE_INTRO_REPEAT"))
		(struct shipAcesNewTip =			PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SHIP_ACES"))
		(struct shipAcesNationNewTip =		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SHIP_ACES_NATION"))
		(struct shipAcesTypeShipNewTip =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SHIP_ACES_SHIP_TYPE"))
		(struct nqIntroNewTip =				PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.NEWBIE_QUESTS_INTRO"))
		(struct campaignIntroNewTip = 		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.PORT_BANNER_CAMPAIGN_INTRO"))
		(struct campaignIntroRepeatNewTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.PORT_BANNER_CAMPAIGN_INTRO_REPEAT"))
		(struct campaignIntroOldPlayersTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.PORT_BANNER_CAMPAIGN_INTRO_OLD_PLAYERS"))

		(var sseTipId:number = "sseIntroNewTip.isActive				? SC.Context_guiding_tip.TIP_TYPE.SSE_INTRO :
								sseIntroRepeatNewTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.SSE_INTRO_REPEAT :
								shipAcesNewTip.isActive				? SC.Context_guiding_tip.TIP_TYPE.SHIP_ACES :
								shipAcesNationNewTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.SHIP_ACES_NATION :
								shipAcesTypeShipNewTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.SHIP_ACES_SHIP_TYPE :
								nqIntroNewTip.isActive				? SC.Context_guiding_tip.TIP_TYPE.NEWBIE_QUESTS_INTRO :
								campaignIntroNewTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.PORT_BANNER_CAMPAIGN_INTRO :
								campaignIntroRepeatNewTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.PORT_BANNER_CAMPAIGN_INTRO_REPEAT :
								campaignIntroOldPlayersTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.PORT_BANNER_CAMPAIGN_INTRO_OLD_PLAYERS
																	: SC.Context_guiding_tip.TIP_TYPE.NONE")

		(var isSseTipVisible:bool = "sseTipId != SC.Context_guiding_tip.TIP_TYPE.NONE")
	)
	(name = 'quest_banner')

	(style (width = "BANNER_SIZE_WIDTH") (height = "BANNER_SIZE_HEIGHT.SMALL"))

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[	{
							type: 'inputMapping.onAction',
							name: 'navigateTo',
							args: { route: isFeatureSseLocked ? SC.Ui_windows.ROUTE.SSE_NEWBIE_QUESTS : SC.Ui_windows.ROUTE.SSE }
						}]"
	)

	(controller $Tooltip
		(renderer = 'SseBannerTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)
		(block
			(style (width = 100%))
			(macro PORT_BANNER_CHANGE_ALPHA_BY_TRIGGER_ANIM
				_triggerExpression = "!(isTasksExist || isNewbieQuestAvailable || hasReward || isShipAcesAvailable)"
			)
			(element BannerItemTitle
				_title = "title"
				_isNewMarker = "isNewMarkerVisible"
				_isStateOwn = "hasReward"
			)
		)

		(block
			(class $PortBannerStatus)
			(controller $Instance renderer = 'BannerCountTask'
				(bind enabled "!hasReward")
				(args
					_count = "sseCountTasks + newbieQuestActiveCount "
				)
			)
		)

		(block
			(class $MarkerRewardPosition)
			(controller $Instance renderer = 'MarkerReward'
				(bind enabled "hasReward")
				(args
					_iconReward = "hasCampaignReward	? 'url:../service_kit/port_banner/icon_banner_star.png'
														: 'url:../service_kit/port_banner/icon_banner_reward.png'"
					_isAnimate = true
				)
			)
		)
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "isSseTipVisible")
		(args
			_tipId = "sseTipId"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_pointerOffset = 9px
			_offsetX = "-XXS"
		)
	)
)

(def element SseBanner ()
	(scope
		(event startShow)
		(event startHide)

		(macro MOTIVATOR_STAGE_SIZES)

		(var sseMotivatorCollection:dhCollection = "getCollection(CC.sseCore).getChildByPath('byMotivationPriority.sorted')")
		(var isSseMotivatorActive:bool = "sseMotivatorCollection.length > 0")
	)
	(name = 'sse_banner')
	(element SseBannerMain)

	(block
		(style (width = 100%))
		(controller $Instance renderer='SseMotivatorSubBanner'
			(bind enabled "isSseMotivatorActive && !isSmallResolution")
		)
	)
)

(def element SseMotivatorSubBanner ()
	(scope
		(var sseMotivatorCollection:dhCollection = "getCollection(CC.sseCore)")

		(var sseMotivatorSubCollection:dhCollection = "sseMotivatorCollection.getChildByPath('byMotivationPriority.sorted')")
		(var sseMotivatorComingSoonSubCollection:dhCollection = "sseMotivatorCollection.getChildByPath('byMotivationPriority.comingSoon.sorted')")
		(var sseMotivatorActiveSubCollection:dhCollection = "sseMotivatorCollection.getChildByPath('byMotivationPriority.active')")

		(var isMotivatorStatusDone:bool = "sseMotivatorActiveSubCollection.length == 0")
		(var tasksCounter:number = "isMotivatorStatusDone	? min(SC.Sse.SSE_MOTIVATION_BANNER.COMING_SOON_TASKS_ON_BANNER_MAX, sseMotivatorComingSoonSubCollection.length)
															: min(SC.Sse.SSE_MOTIVATION_BANNER.ACTIVE_TASKS_ON_BANNER_MAX, sseMotivatorSubCollection.length)")
		(var sseTasks:dhCollection = "isMotivatorStatusDone ? sseMotivatorComingSoonSubCollection : sseMotivatorSubCollection")

		(struct sseMotivatorIntroNewTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SSE_MOTIVATOR_INTRO"))
	)
	(style (width = 100%))
	(controller $Repeat renderer='SseMotivatorSubBannerItem'
		(bind count "tasksCounter")
		(args
			_sseId = "sseTasks[$index].id"
			_isSingleCard = "tasksCounter == 1 && isMotivatorStatusDone"
			_tasksCount = "tasksCounter"
		)
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "sseMotivatorIntroNewTip.isActive")
		(args
			_tipId = "SC.Context_guiding_tip.TIP_TYPE.SSE_MOTIVATOR_INTRO"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_offsetX = "-XXS"
		)
	)
)

(def element SseMotivatorSubBannerItem (_sseId:number = 0, _isSingleCard:bool = false)
	(scope
		(event evSubBannerItemClicked)

		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(macro MOTIVATOR_STAGE_SIZES)

		(var sseEntity:dhEntity = "getEntity(_sseId)")
		(var sseTaskId:str = "sseEntity.sseCore.id" (event "sseEntity.sseCore.evChanged"))
		(var sseCategoryId:str = "sseEntity.sseCore.tag ?: ''" (event "sseEntity.sseCore.evChanged"))
		(var isTaskHighlighted:bool = "sseEntity.sseCore.isMotivationHighlighted" (event "sseEntity.sseCore.evChanged"))
		(var statusesCore:array = "sseEntity.sseCore.statuses ?: []" (event "sseEntity.sseCore.evStatusesChanged"))
		(var isTaskCompletedBlock:bool = "	isIn(SC.Sse.SSE_STATUSES.DONE, statusesCore) ||
											isIn(SC.Sse.SSE_STATUSES.LOCKED_BY_TIME, statusesCore) ||
											isIn(SC.Sse.SSE_STATUSES.LOCKED_BECAUSE_NOT_PRIME_TIME, statusesCore)")

		(struct portBannerAlpha = PORT_BANNER_ALPHA(
			_alphaBannerVariants = "ALPHA_BANNER_STATE"
			_isMouseDown = "isTaskCompletedBlock ? false : mouseDown"
			_isRollOver = "isTaskCompletedBlock ? false : rollOver"
		))
		(var elementName:str = "isTaskCompletedBlock ? 'SseMotivatorTaskCompleted' : 'SseMotivatorTaskActive'")
		(var motivatorBannerHeight:number = "isMediumResolution	? MOTIVATOR_BANNER_MIN_HEIGHT.RESOLUTION_SMALL
																: MOTIVATOR_BANNER_MIN_HEIGHT.RESOLUTION_LARGE")
	)
	(name = 'sse_motivator_banner')
	(dispatch evSubBannerItemClicked dir="EventDirection.DOWN" on='leftClick')
	(bindcall externalCall "'inputMapping.onAction'" "[ 'deactivateTipChain', { tip_chain_id: SC.Context_guiding_tip.TIP_CHAIN_ID.SSE_MOTIVATOR_INTRO } ]" watch=false (event "evSubBannerItemClicked"))

	(style (align = "middle") (width = "BANNER_SIZE_WIDTH") (bind minHeight "motivatorBannerHeight"))

	(macro PORT_BANNER_BG
		_bgColor = "SC.Ui_styles.SERVICE_COLORS.INNER_PANEL"
		_portBannerAlpha = "portBannerAlpha"
	)
	(macro MOUSE_HANDLER_BANNER
		_methods = "[	{ type: 'inputMapping.onAction', name: isTaskCompletedBlock ? '' : 'navigateTo', args: { route: 'sse_' + sseCategoryId }},
						{ type: 'inputMapping.onAction', name: isTaskCompletedBlock ? '' : 'SSEProxyCommonUSS.selectItem', args: { itemId: sseTaskId }}]"
	)

	(block
		(bind visible "isTaskHighlighted && !isTaskCompletedBlock")
		(class $FullsizeAbsolute)
		(style
			(hitTest = false)
			(backgroundImage = 'url:../animations/spine/sse/motivator/sse_motivator_bg.skel')
			(backgroundSize = "fill")
		)
		(controller $Spine (bind enabled "isTaskHighlighted && !isTaskCompletedBlock"))
	)
	(block
		(bind visible "isTaskCompletedBlock")
		(style (position = "absolute") (width = 280px) (height = 84px) (backgroundImage = 'url:../sse/motivator/task_completed.png'))
	)
	(block
		(style
			(width = 100%)
			(paddingRight = "SXS")
			(paddingBottom = 10px)
			(paddingLeft = "M")
			(bind paddingTop "isTaskCompletedBlock ? S : XS")
		)
		(controller $Instance
			(bind renderer "elementName")
			(args
				_sseId = "_sseId"
				_isSingleCard = "_isSingleCard"
			)
		)
	)
	(block
		(style (position = "absolute") (top = 0) (width = 100%))
		(element HorizontalDividerTwoPx)
	)
	(block
		(class $FullsizeAbsolute)
		(style (backgroundColor = "NO_COLOR"))
		(controller $Tooltip
			(renderer = 'SseMotivatorBannerTooltip')
			(bind enabled "!isTaskCompletedBlock")
			(args
				_sseId = "_sseId"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)
)

(def element SseMotivatorTaskActive (_sseId:number = 0)
	(scope
		(event evSubBannerItemClicked)
		(event evDeactivateTip)

		(macro MOTIVATOR_STAGE_SIZES)

		(var sseEntity:dhEntity = "getEntity(_sseId)")
		(var progressCurrent:number = "sseEntity.progress.value" (event "sseEntity.progress.evChanged"))
		(var progressMax:number = "sseEntity.progress.max" (event "sseEntity.progress.evChanged"))
		(var sseTaskId:str = "sseEntity.sseCore.id" (event "sseEntity.sseCore.evChanged"))

		(var isChain:bool = "sseEntity && sseEntity.hasComponent(CC.sseChain)")
		(var currentTaskId:str = "isChain ? sseEntity.sseChain.currentTaskId : ''" (event "sseEntity.sseChain.evChanged"))
		(var sseCoreEntity:dhEntity = "getPrimaryEntity(CC.sseCore, currentTaskId)")
		(var sseTaskComponent:dhComponent = "isChain ? sseCoreEntity.sseTask : sseEntity.sseTask")
		(var sseTaskEntityId:number = "isChain ? sseCoreEntity.id : _sseId")
		(var sseChainName:str = "sseEntity.sseChain.name ?: ''" (event "sseEntity.sseChain.evChanged"))
		(var sseChainDisplayName:str = "sseChainName == '' || sseChainName.length > MOTIVATOR_SYMBOLS_MAX	? tr('IDS_SSE_MOTIVATOR_TASK_COMMON_TITLE_COLON')
																											: sseChainName + ':'")
		(var sseTaskName:str = "sseTaskComponent.name.length > MOTIVATOR_SYMBOLS_MAX ? tr('IDS_SSE_MOTIVATOR_TASK_COMMON_TITLE') : sseTaskComponent.name")
		(var nameToDisplay:str = "isChain ? sseChainDisplayName : sseTaskName")

		(var taskConditions:array = "sseTaskComponent.conditions ?: []" (event "sseTaskComponent.evChanged"))
		(var conditionId:number = "taskConditions[0]")
		(var sseConditionEntity:dhEntity = "getEntity(conditionId)")
		(var taskDescriptionData:dict = "sseConditionEntity.sseConditions.taskDescriptionData" (event "sseConditionEntity.sseConditions.evConditionSetChanged"))

		(var sseTaskRewards:array = "sseTaskComponent.rewards ?: []" (event "sseTaskComponent.evChanged"))
		(var rewardEntity:dhEntity = "getEntity(sseTaskRewards[0])")
		(var reward:dict = "{	id: rewardEntity.rewardComponent.id,
								amount: 0,
								name: rewardEntity.rewardComponent.name,
								type: rewardEntity.rewardComponent.type,
								subtype: rewardEntity.rewardComponent.subtype,
								params: rewardEntity.rewardComponent.params,
								isPRMP: rewardEntity.rewardComponent.isPRMP }")
		(var isResourceCoeff:bool = "reward.type == SC.Common.REWARD_TYPE.RESOURCE_COEFF")
		(var rewardAmount:number = "rewardEntity.rewardComponent.amount ?: 0")
		(var resMulCoeff:str = "(rewardAmount > 0 ? '+' : '') + toString(rewardAmount) + '%'")
		(var rewardCounter:str = "isResourceCoeff ? resMulCoeff : toString(rewardAmount)")

		(struct sseMotivatorTaskChangedNewTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SSE_MOTIVATOR_TASK_CHANGED"))

		(var rewardSize:number = "MOTIVATOR_REWARD_SIZE.LARGE")
		(var rewardScale:number = "rewardSize / 90")  
		(var textClass:str = "isMediumResolution ? '$TextDefault13NM' : '$TextDefaultNM'")

		
		(var sseTaskChainId:str = "sseCoreEntity.sseCore.id" (event "sseCoreEntity.sseCore.evChanged"))
		(var sseIdUI:str = "isChain ? sseTaskChainId : sseTaskId")
	)
	(dispatch evDeactivateTip (event "evSubBannerItemClicked") (bind enabled "sseTaskId == sseMotivatorTaskChangedNewTip.targetId"))
	(bindcall externalCall	"'inputMapping.onAction'" "[ 'deactivateTipChain', { tip_chain_id: SC.Context_guiding_tip.TIP_CHAIN_ID.SSE_MOTIVATOR_TASK_CHANGED } ]" watch=false (event "evDeactivateTip"))

	(style (width = 100%) (backgroundColor = "NO_COLOR"))

	(block
		(style
			(width = 100%)
			(marginBottom = "XXS")
			(bind minHeight "rewardSize")
			(bind paddingRight "rewardSize")
		)
		(hblock
			(style (width = 100%) (marginBottom = "S") (marginTop = "S"))  
			(tf
				(class $TextDefaultBold13NM)
				(style (alpha = "TA") (marginRight = "S") (bind width "isChain ? 'auto' : 100%"))
				(bind text "toUpper(nameToDisplay)")
			)
			(block
				(controller $Instance renderer='DefaultDividedCounter'
					(bind enabled "isChain")
					(args
						_curValueTextClass = '$TextDefaultBold13NM'
						_curValue = "progressCurrent"
						_maxValue = "progressMax"
						_doNotAlphaOnZeroCurValue = true
					)
				)
			)
		)
		(tf
			(bind class "textClass")
			(style (width = 100%) (alpha = "TA"))
			(bind text "taskDescriptionData.ids")
		)
	)
	(block
		(style (position = "absolute") (right = 0) (top = "XS"))
		(block
			(style (bind scaleX "rewardScale") (bind scaleY "rewardScale"))
			(element RewardItem
				_reward = "reward"
				_withTooltip = false
			)
		)
		(block
			(style (position = "absolute") (bottom = 0) (right = "XXS"))
			(element ImageTextCounter _text = "rewardCounter")
		)
	)
	(element SseProgress
		_sseId="sseTaskEntityId"
		_conditionId="conditionId"
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "sseMotivatorTaskChangedNewTip.isActive && sseTaskId == sseMotivatorTaskChangedNewTip.targetId")
		(args
			_tipId = "SC.Context_guiding_tip.TIP_TYPE.SSE_MOTIVATOR_TASK_CHANGED"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_offsetX = "SXS"
		)
	)
)

(def element SseMotivatorTaskCompleted (_sseId:number = 0, _isSingleCard:bool = false)
	(scope
		(var sseMotivatorCollection:dhCollection = "getCollection(CC.sseCore)")
		(var sseMotivatorComingSoonCollection:dhCollection = "	getCollection(CC.sseCore).getChildByPath('byMotivationPriority.comingSoon.sorted')"
																									(event "sseMotivatorCollection.evChildAdded")
																									(event "sseMotivatorCollection.evChildRemoved")
																									(event "sseMotivatorCollection.evChildUpdated"))

		(var sseEntity:dhEntity = "getEntity(_sseId)")
		(var statuses:array = "sseEntity.sseCore.statuses ?: []" (event "sseEntity.sseCore.evStatusesChanged"))
		(var weekly:number = "sseEntity.sseRefresh.weekly" (event "sseEntity.sseRefresh.evChanged"))
		(var isChain:bool = "sseEntity && sseEntity.hasComponent(CC.sseChain)")
		(var currentTaskId:str = "isChain ? sseEntity.sseChain.currentTaskId : ''")
		(var sseCoreEntity:dhEntity = "getPrimaryEntity(CC.sseCore, currentTaskId)")

		(var isTaskLockedByTime:bool = "isIn(SC.Sse.SSE_STATUSES.LOCKED_BY_TIME, statuses)")
		(var sseName:str = "_isSingleCard	? 'IDS_SSE_MOTIVATOR_TASKS_COMPLETED' :
							weekly > 0		? 'IDS_SSE_MOTIVATOR_BP_WEEKLY_TASKS_COMPLETED'
											: 'IDS_SSE_MOTIVATOR_BP_DAILY_TASKS_COMPLETED'")
		(var sseStatusId:number = "	_isSingleCard	? sseMotivatorComingSoonCollection[0].id :
									isChain			? isTaskLockedByTime ? _sseId : sseCoreEntity.id
													: _sseId")

		(struct sseMotivatorDailyTaskCompletedNewTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SSE_MOTIVATOR_DAILY_TASK_COMPLETED"))
		(struct sseMotivatorWeeklyTaskCompletedNewTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SSE_MOTIVATOR_WEEKLY_TASK_COMPLETED"))

		(var guidingTipId:number = "sseMotivatorDailyTaskCompletedNewTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.SSE_MOTIVATOR_DAILY_TASK_COMPLETED :
									sseMotivatorWeeklyTaskCompletedNewTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.SSE_MOTIVATOR_WEEKLY_TASK_COMPLETED
																					: SC.Context_guiding_tip.TIP_TYPE.NONE")
	)

	(style (width = 100%))
	(tf
		(class $TextDefaultBold17NM)
		(style (marginRight = "S") (marginBottom = "M") (alpha = "TA"))
		(bind text "sseName")
	)
	(element SseMotivatorTimeStatus
		_sseId = "sseStatusId"
		_isSseMotivator = true
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "guidingTipId != SC.Context_guiding_tip.TIP_TYPE.NONE")
		(args
			_tipId = "guidingTipId"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_offsetX = "SXS"
		)
	)
)

(def element MetaShopBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		(var metashopBannerStateEntity:dhEntity = "getSingleEntity(CC.metashopBannerState)")
		(var metashopBannerStateComponent:dhComponent = "metashopBannerStateEntity.metashopBannerState")

		(var hasReward:bool = 			"metashopBannerStateComponent.isActive" (event "metashopBannerStateComponent.evUpdate"))
		(var isNewMarkerVisible:bool = 	"metashopBannerStateComponent.isNew" 	(event "metashopBannerStateComponent.evUpdate"))

		
		(struct metashopIntroNewTip = 		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.METASHOP_INTRO"))
		(struct metashopIntroRepeatNewTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.METASHOP_INTRO_REPEAT"))
		(struct metashopSpecialNewTip = 	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.METASHOP"))

		(var metashopChainId:number = "	metashopIntroNewTip.isActive		? SC.Context_guiding_tip.TIP_CHAIN_ID.METASHOP : 
										metashopIntroRepeatNewTip.isActive	? SC.Context_guiding_tip.TIP_CHAIN_ID.METASHOP_REPEAT :
										metashopSpecialNewTip.isActive		? SC.Context_guiding_tip.TIP_CHAIN_ID.METASHOP_SPECIAL
																			: SC.Context_guiding_tip.TIP_CHAIN_ID.NONE")
		
		(var metashopTipId:number = "	metashopIntroNewTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.METASHOP_INTRO : 
										metashopIntroRepeatNewTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.METASHOP_INTRO_REPEAT :
										metashopSpecialNewTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.METASHOP
																			: SC.Context_guiding_tip.TIP_TYPE.NONE")

		(var isMetashopTipVisible:bool = "metashopTipId != SC.Context_guiding_tip.TIP_TYPE.NONE")
	)
	(name = 'meta_shop_banner')

	(style (height = "BANNER_SIZE_HEIGHT.SMALL") (width = "BANNER_SIZE_WIDTH"))

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[
						{
							type: 'inputMapping.onAction',
							name: isMetashopTipVisible ? 'deactivateTipChain' : '',
							args: { tip_chain_id: metashopChainId }
						},
						{
							type: 'inputMapping.onAction',
							name: 'featureSeen',
							args: { featureIndex: SC.Common.ACCOUNT_FEATURE.METASHOP }
						},
						{
							type: 'inputMapping.onRequest',
							name: 'openMetashop',
							args: {}
						},
						{	
							type: 'inputMapping.onAction',
							name: 'metashopBannerClicked',
							args: {}
						}
					]"
	)

	(controller $Tooltip
		(renderer = 'MetaShopBannerTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)

		(element BannerItemTitle
			_title = 'IDS_DOCK_BANNER_METASHOP'
			_isNewMarker = "isNewMarkerVisible"
			_isStateOwn = "hasReward"
		)

		(block
			(class $MarkerRewardPosition)
			(element MarkerReward
				_iconReward = "hasReward 	? 'url:../service_kit/port_banner/icon_banner_arsenal_active.png'
											: 'url:../service_kit/port_banner/icon_banner_arsenal.png'"
				_isAnimate = "hasReward"
			)
		)
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "isMetashopTipVisible")
		(args
			_tipId = "metashopTipId"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_offsetX = "-XXS"
		)
	)
)

(def element BattlePassBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		(var unclaimedRewardsCollection:dhCollection = "getCollection(CC.battlePassReward).child('unclaimedRewards')")
		(var hasReward:bool = "unclaimedRewardsCollection.length > 0")

		(var battlePassCurrentLevelEntity:dhEntity = "getSingleEntity(CC.battlePassCurrentLevel)")

		(var battlePassLevel:dhComponent = "battlePassCurrentLevelEntity.battlePassLevel")

		(var curLevel:number = 	"battlePassLevel.level" (event "battlePassLevel.evChanged"))

		(var mainProgressionCollection:dhCollection = "getCollection(CC.battlePassLevel).getChildByPath('mainProgression')")
		(var mainProgressionLength:number = "mainProgressionCollection.length ?: 0")

		(var battlePassPostProgressionLevelComponent:dhComponent = "battlePassCurrentLevelEntity.battlePassPostProgressionLevel")
		(var countCompleted:number = "battlePassPostProgressionLevelComponent.countCompleted" (event "battlePassPostProgressionLevelComponent.evChanged"))
		(var level:number = "countCompleted ? curLevel + countCompleted : curLevel")
		(var isPostProgression:bool = "battlePassPostProgressionLevelComponent != null")

		
		(struct battlePassSeasonFinishFreeTip =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.BATTLEPASS_SEASON_FINISH_FREE"))
		(struct battlePassSeasonFinishPaidTip =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.BATTLEPASS_SEASON_FINISH_PAID"))
		(struct battlePassEventStartTip =		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.BATTLEPASS_EVENT_START"))
		
		(var battlePassTipId:number = "	battlePassSeasonFinishFreeTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.BATTLEPASS_SEASON_FINISH_FREE : 
										battlePassSeasonFinishPaidTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.BATTLEPASS_SEASON_FINISH_PAID :
										battlePassEventStartTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.BATTLEPASS_EVENT_START
																				: SC.Context_guiding_tip.TIP_TYPE.NONE")

		(var isBattlePassTipVisible:bool = "battlePassTipId != SC.Context_guiding_tip.TIP_TYPE.NONE")
	)

	(name = 'battlepass_banner')

	(style (height = "BANNER_SIZE_HEIGHT.SMALL") (width = "BANNER_SIZE_WIDTH"))

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[{
			type: 'inputMapping.onAction',
			name: 'navigateTo',
			args: { route: SC.Ui_windows.ROUTE.BATTLE_PASS }
		}]"
	)
	
	(controller $Tooltip
		(renderer = 'BattlePassBannerTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)

		(element BannerItemTitle
			_title = 'IDS_DOCK_BANNER_BATTLEPASS'
			_isStateOwn = "hasReward"
		)

		(block
			(class $MarkerRewardPosition)

			(controller $Instance renderer = 'MarkerReward'
				(bind enabled "hasReward")
				(args
					_iconReward = 'url:../service_kit/port_banner/icon_banner_reward.png'
					_isAnimate = true
				)
			)
		)

		(block
			(class $PortBannerStatus)

			(controller $Instance renderer = 'DefaultDividedCounter'
				(bind enabled "!hasReward && !isPostProgression")
				(args
					_curValue = "curLevel-1"
					_maxValue = "mainProgressionLength"
					_doNotAlphaOnZeroCurValue = true
					_curValueTextClass = '$TextDefaultBold17NM'
				)
			)

			(controller $Instance renderer = 'BannerCountTask'
				(bind enabled "!hasReward && isPostProgression")
				(args
					_count = "level-1"
				)
			)

		)	
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "isBattlePassTipVisible")
		(args
			_tipId = "battlePassTipId"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_offsetX = "-XXS"
		)
	)
)

(def element LootboxBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		
		(var dailyLootboxesEntity:dhEntity = "getPrimaryEntity(CC.splitRunTest, 'Return_daily_lootboxes')")
		(var isDailyLootboxesAvailable:bool = "dailyLootboxesEntity.splitRunTest.data.isDailyLootboxesAvailable" (event "dailyLootboxesEntity.splitRunTest.evDataChanged"))

		(var dockDataEntity:dhEntity = "getSingleEntity(CC.dockData)")
		(var dockDataComponent:dhComponent = "dockDataEntity.dockData")
		(var isArmorVisible:bool = "dockDataComponent.isArmorVisible" (event "dockDataComponent.evIsArmorVisibleChanged"))

		(struct featureLootboxes = FEATURES(_state = "SC.Common.ACCOUNT_FEATURE.LOOTBOXES"))

		(var lootboxEntity:dhEntity = 		"getSingleEntity(CC.lootboxConfigComponent)")
		(var lootboxStorageComponent:dhComponent = 	"lootboxEntity.lootboxStorageComponent")
		(var lootboxConfigComponent:dhComponent = 	"lootboxEntity.lootboxConfigComponent")

		(var lootboxInStorage:number = 	"lootboxStorageComponent.inStorage"	(event "lootboxStorageComponent.evUpdate"))
		(var lootboxExp:number = 		"lootboxStorageComponent.lootExp" 	(event "lootboxStorageComponent.evUpdate"))
		(var lootboxPrices:array = 		"lootboxConfigComponent.prices" 	(event "lootboxConfigComponent.evUpdate"))

		(var isMaxDailyExp:bool = "lootboxExp >= lootboxPrices[2]")

		(var hasReward:bool = "lootboxEntity.hasComponent(CC.newItem)")
		(var isDailyLootboxesBlockVisible:bool = "!isMaxDailyExp && isDailyLootboxesAvailable")	
		(var isNewMarkerVisible:bool = "featureLootboxes.state == 'new'")

		
		

		(var expToNextLootbox:number = "lootboxExp >= lootboxPrices[1]	? lootboxPrices[2] - lootboxExp :
										lootboxExp >= lootboxPrices[0]	? lootboxPrices[1] - lootboxExp
																		: lootboxPrices[0] - lootboxExp")

		(var curLootExpStep:number = "	lootboxExp >= lootboxPrices[1]	? lootboxExp - lootboxPrices[1] :
										lootboxExp >= lootboxPrices[0]	? lootboxExp - lootboxPrices[0]
																		: lootboxExp")

		(var maxLootExpStep:number = "	lootboxExp >= lootboxPrices[1]	? lootboxPrices[2] - lootboxPrices[1] :
										lootboxExp >= lootboxPrices[0]	? lootboxPrices[1] - lootboxPrices[0]
																		: lootboxPrices[0]")

		(var dailyLootProgress:number = "maxLootExpStep ? curLootExpStep / maxLootExpStep : null")

		
		(var isShowLootBox:bool = "featureLootboxes.state != 'locked'")

		(struct lootboxNewTip =						PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.LOOTBOXES_INTRO"))
		(struct lootboxRepeatNewTip = 				PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.LOOTBOXES_INTRO_REPEAT"))
		(struct lootboxEmptyStorageNewTip = 		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.LOOTBOXES_INTRO_EMPTY_STORAGE"))
		(struct lootboxEmptyStorageRepeatNewTip = 	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.LOOTBOXES_INTRO_EMPTY_STORAGE_REPEAT"))

		(var lootboxTipId:number = "lootboxNewTip.isActive						? SC.Context_guiding_tip.TIP_TYPE.LOOTBOXES_INTRO :
									lootboxRepeatNewTip.isActive				? SC.Context_guiding_tip.TIP_TYPE.LOOTBOXES_INTRO_REPEAT :
									lootboxEmptyStorageNewTip.isActive			? SC.Context_guiding_tip.TIP_TYPE.LOOTBOXES_INTRO_EMPTY_STORAGE :
									lootboxEmptyStorageRepeatNewTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.LOOTBOXES_INTRO_EMPTY_STORAGE_REPEAT
																				: SC.Context_guiding_tip.TIP_TYPE.NONE")
		
		(var isLootboxTipVisible:bool = "isShowLootBox && (lootboxTipId != SC.Context_guiding_tip.TIP_TYPE.NONE)")
	)
	(name = 'lootboxes_banner')

	(style
		(width = "BANNER_SIZE_WIDTH")
		(bind height "isDailyLootboxesBlockVisible ? BANNER_SIZE_HEIGHT.MEDIUM : BANNER_SIZE_HEIGHT.SMALL")
	)

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[{
			type: 'inputMapping.onAction',
			name: 'navigateTo',
			args: { route: SC.Ui_windows.ROUTE.BARGE }
		},
		{	
			type: 'inputMapping.onAction',
			name: isArmorVisible ? 'hideArmour' : '',
			args: { }
		},
		{	
			type: 'inputMapping.onAction',
			name: 'featureSeen',
			args: { featureIndex: SC.Common.ACCOUNT_FEATURE.LOOTBOXES }
		}]"
	)

	(controller $Tooltip
		(renderer = 'LootboxBannerTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)

		(element BannerItemTitle
			_title = 'IDS_LOOTBOXES'
			_isStateOwn = "hasReward"
			_isNewMarker = "isNewMarkerVisible"
		)

		(block
			(class $PortBannerStatus)
			(controller $Instance renderer = 'BannerCountTask'
				(bind enabled "!hasReward && lootboxInStorage > 0")
				(args
					_count = "lootboxInStorage"
				)
			)
		)

		(block
			(class $MarkerRewardPosition)
			(controller $Instance renderer = 'MarkerReward'
				(bind enabled "hasReward")
				(args
					_iconReward = 'url:../service_kit/port_banner/icon_banner_container.png'
					_isAnimate = true
				)
			)
		)
		(block
			(bind visible "isDailyLootboxesBlockVisible")
			(style (width = 100%) (vgap = "S"))

			(block
				(style (width = 100%))
				(controller $Instance renderer = 'BannerProgressBarDescription'
					(bind enabled "isDailyLootboxesBlockVisible")
					(args
						_text = 'IDS_EXP_LEFT'
						_currencyIcon = 'url:../service_kit/currencies/icon_exp_small.png'
						_costAmount = "expToNextLootbox"
					)
				)
			)
			(block
				(style (width = 100%))
				(controller $Instance renderer = 'BannerProgressBar'
					(bind enabled "isDailyLootboxesBlockVisible")
					(args
						_progress = "dailyLootProgress"
					)
				)
			)
		)
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "isLootboxTipVisible")
		(args
			_tipId = "lootboxTipId"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_pointerOffset = 9px
			_offsetX = "-XXS"
		)
	)
)

(def element StrategicActionsBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		(var strategicActionsEntity:dhEntity = "getSingleEntity(CC.strategicActionsEvent)")
		(var strategicActionsEventComponent:dhComponent = "strategicActionsEntity.strategicActionsEvent")

		(var isTerritoryAvailable:bool = "strategicActionsEventComponent.selectedTerritory == 0" (event "strategicActionsEventComponent.evChanged"))

		(var state:number = "strategicActionsEventComponent.state" (event "strategicActionsEventComponent.evStateChanged"))

		(var isAnyRewardClaim:bool = "strategicActionsEventComponent.isAnyRewardClaim" (event "strategicActionsEventComponent.evChanged"))

		(var isActive:bool = 				"state == SC.Common.STRATEGIC_ACTIONS_EVENT_STATE.ACTIVE")
		(var isCompleted:bool = 			"state == SC.Common.STRATEGIC_ACTIONS_EVENT_STATE.COMPLETED")
		(var isFinishedWithResults:bool = 	"state == SC.Common.STRATEGIC_ACTIONS_EVENT_STATE.FINISHED_WITH_RESULTS")

		(var bannerDescription:str = "isActive && isTerritoryAvailable && !isAnyRewardClaim	? 'IDS_STRATEGIC_ACTIONS_BANNER_TEXT_TERRITORY' : ''")

		(var hasReward:bool = "isAnyRewardClaim && !isFinishedWithResults")

		(var isNew:bool = "strategicActionsEntity.hasComponent(CC.newItem)")
		(var isNewMarkerVisible:bool = "isNew && !isAnyRewardClaim && !isFinishedWithResults")

		
		(struct strategicEventTip = 				PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.STRATEGIC_ACTIONS_EVENT"))
		(struct strategicTaskChangedTip = 			PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.STRATEGIC_ACTIONS_TASK_CHANGED"))
		(struct strategicTerritoryCompletedTip =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.STRATEGIC_ACTIONS_TERRITORY_COMPLETED"))

		(var strategicChainId:number = "strategicEventTip.isActive					? SC.Context_guiding_tip.TIP_CHAIN_ID.STRATEGIC_ACTIONS_EVENT : 
										strategicTaskChangedTip.isActive			? SC.Context_guiding_tip.TIP_CHAIN_ID.STRATEGIC_ACTIONS_TASK_CHANGED :
										strategicTerritoryCompletedTip.isActive		? SC.Context_guiding_tip.TIP_CHAIN_ID.STRATEGIC_ACTIONS_TERRITORY_COMPLETED
																					: SC.Context_guiding_tip.TIP_CHAIN_ID.NONE")
		
		(var strategicTipId:number = "	strategicEventTip.isActive					? SC.Context_guiding_tip.TIP_TYPE.STRATEGIC_ACTIONS_EVENT : 
										strategicTaskChangedTip.isActive			? SC.Context_guiding_tip.TIP_TYPE.STRATEGIC_ACTIONS_TASK_CHANGED :
										strategicTerritoryCompletedTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.STRATEGIC_ACTIONS_TERRITORY_COMPLETED
																					: SC.Context_guiding_tip.TIP_TYPE.NONE")

		(var isStrategicTipVisible:bool = "strategicTipId != SC.Context_guiding_tip.TIP_TYPE.NONE")
		(var shouldDeactivateStrategicChain:bool = "isStrategicTipVisible && strategicChainId != SC.Context_guiding_tip.TIP_CHAIN_ID.STRATEGIC_ACTIONS_TERRITORY_COMPLETED")
	)
	(name = 'strategic_actions')

	(style
		(width = "BANNER_SIZE_WIDTH")
		(bind height "bannerDescription ? BANNER_SIZE_HEIGHT.MEDIUM : BANNER_SIZE_HEIGHT.SMALL")
	)

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[{	
			type: 'inputMapping.onRequest',
			name: isFinishedWithResults ? 'showStrategicActionsResults' : '',
			args: { }
		},
		{	
			type: 'inputMapping.onAction',
			name: 'navigateTo',
			args: { route: SC.Ui_windows.ROUTE.STRATEGIC_ACTIONS }
		},
		{	
			type: 'inputMapping.onAction',
			name: isNew ? 'makeSeen' : '',
			args: { entityId: strategicActionsEntity.id }
		},
		{	
			type: 'inputMapping.onAction',
			name: shouldDeactivateStrategicChain ? 'deactivateTipChain' : '',
			args: { tip_chain_id: strategicChainId }
		}]"
	)

	(controller $Tooltip
		(renderer = 'StrategicActionsTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)

		(block
			(style (width = 100%) (gap = "SXS"))
			(macro PORT_BANNER_CHANGE_ALPHA_BY_TRIGGER_ANIM _triggerExpression = "isCompleted && !isAnyRewardClaim || isFinishedWithResults")

			
			(element BannerItemTitle
				_title = "tr('IDS_STRATEGIC_ACTIONS_COMMON_EVENT_TITLE') + ' '"
				_isStateOwn = "hasReward"
				_isNewMarker = "isNewMarkerVisible"
				_isMultiline = true
			)






		)

		(block
			(class $MarkerRewardPosition)
			(controller $Instance renderer = 'MarkerReward'
				(bind enabled "hasReward")
				(args
					_iconReward = 'url:../service_kit/port_banner/icon_banner_reward.png'
					_isAnimate = true
				)
			)
		)
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "isStrategicTipVisible")
		(args
			_tipId = "strategicTipId"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_offsetX = "-XXS"
		)
	)
)

(def element RepairDockBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)

		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		(var repairDockDataEntity:dhEntity = "getSingleEntity(CC.repairDockData)")
		(var hasReadyToRepairShip:bool = "repairDockDataEntity.hasComponent(CC.newItem)")

		(var newShipComponentsEntity:dhEntity = "getPrimaryEntity(CC.newContent, SC.Common.CONTENT_CATEGORY.SHIP_COMPONENTS)")
		(var newShipComponentsCount:number = "newShipComponentsEntity.newContent.count ?: 0" (event "newShipComponentsEntity.newContent.evCountChanged"))
		(var isNewShipsMarkerVisible:bool = "newShipComponentsCount > 0")

		(var newExchangeableShipsEntity:dhEntity = "getPrimaryEntity(CC.newContent, SC.Common.CONTENT_CATEGORY.EXCHANGEABLE_SHIP)")
		(var newExchangeableShipsCount:number = "newExchangeableShipsEntity.newContent.count ?: 0" (event "newExchangeableShipsEntity.newContent.evCountChanged"))
		(var isNewExchangeableShipsMarkerVisible:bool = "newExchangeableShipsCount > 0")

		(var isNewMarkerVisible:bool = "isNewShipsMarkerVisible || isNewExchangeableShipsMarkerVisible")

		(var exchangeableShips:dhCollection = "getCollectionByPath(CC.exchangeableShip, 'sorted')")

		(var shipComponentCollection:dhCollection = "getCollection(CC.shipComponent).child('sorted')")
		(var shipsCount:number = "shipComponentCollection.length")

		(var isInactive:bool = "shipsCount == 0 && !isNewMarkerVisible && exchangeableShips.length == 0")

		
		(struct shipShardsIntroWithShipMaterialTip =		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SHIP_SHARDS_INTRO_WITH_SHIP_MATERIAL"))
		(struct shipShardsIntroWithShipComponentTip =		PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SHIP_SHARDS_INTRO_WITH_SHIP_COMPONENT"))
		(struct shipShardsShipCraftingIntroTip =			PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SHIP_SHARDS_FIRST_REPAIR_INTRO"))
		(struct shipShardsMaterialsExchangeIntroNewTip =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SHIP_SHARDS_MATERIALS_EXCHANGE_INTRO"))

		(var repairDockTipId:number = "	shipShardsIntroWithShipMaterialTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.SHIP_SHARDS_INTRO_WITH_SHIP_MATERIAL :
										shipShardsIntroWithShipComponentTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.SHIP_SHARDS_INTRO_WITH_SHIP_COMPONENT :
										shipShardsShipCraftingIntroTip.isActive			? SC.Context_guiding_tip.TIP_TYPE.SHIP_SHARDS_FIRST_REPAIR_INTRO :
										shipShardsMaterialsExchangeIntroNewTip.isActive ? SC.Context_guiding_tip.TIP_TYPE.SHIP_SHARDS_MATERIALS_EXCHANGE_INTRO
																						: SC.Context_guiding_tip.TIP_TYPE.NONE")

		(var isRepairDockTipVisible:bool = "repairDockTipId != SC.Context_guiding_tip.TIP_TYPE.NONE")
	)

	(name = 'repair_dock_banner')

	(style (height = "BANNER_SIZE_HEIGHT.SMALL") (width = "BANNER_SIZE_WIDTH"))

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[{	
			type: 'inputMapping.onAction',
			name: 'navigateTo',
			args: { route: SC.Ui_windows.ROUTE.REPAIR_DOCK }
		}]"
	)

	(controller $Tooltip
		(renderer = 'RepairDockTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)

		(block
			(style (width = 100%))
			(macro PORT_BANNER_CHANGE_ALPHA_BY_TRIGGER_ANIM _triggerExpression = "isInactive")

			(element BannerItemTitle
				_title = 'IDS_DOCK_BANNER_REPAIR_DOCK'
				_isNewMarker = "isNewMarkerVisible"
				_isStateOwn = "hasReadyToRepairShip"
			)
		)

		(block
			(class $PortBannerStatus)
			(controller $Instance renderer = 'BannerCountTask'
				(bind enabled "!hasReadyToRepairShip && !isInactive")
				(args
					_count = "shipsCount"
				)
			)
		)

		(block
			(class $MarkerRewardPosition)
			(controller $Instance renderer = 'MarkerReward'
				(bind enabled "hasReadyToRepairShip")
				(args
					_iconReward = 'url:../service_kit/port_banner/icon_banner_ship.png'
					_isAnimate = true
				)
			)
		)
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "isRepairDockTipVisible")
		(args
			_tipId = "repairDockTipId"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_offsetX = "-XXS"
		)
	)
)
(def constant ARC_EVENT_SIDE_NEUTRAL -1)
(def constant ARC_EVENT_STATE_FINISHED 4)

(def element ArcEventBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))
		
		(struct serverTime = SERVER_TIME())
		
		(var arcEventEntity:dhEntity = "getSingleEntity(CC.arcEvent)")
		(var arcEventComponent:dhComponent = "arcEventEntity.arcEvent")
		(var playerArcEventInfoComponent:dhComponent = "arcEventEntity.playerArcEventInfo")
		
		(var arcEventstate:number = 		"arcEventComponent.state" 				(event "arcEventComponent.evEventStateChanged"))
		(var primeTimeFinishTime:number = 	"arcEventComponent.finishPrimeAt" 		(event "arcEventComponent.evEventStateChanged"))
		(var playerSideId:number = 			"playerArcEventInfoComponent.sideId" 	(event "playerArcEventInfoComponent.evSideChanged"))

		(var isEventFinished:bool = "arcEventstate == ARC_EVENT_STATE_FINISHED")
		(var isSideNeutral:bool = "playerSideId == ARC_EVENT_SIDE_NEUTRAL")
		(var isPrimeTimeActive:bool = "primeTimeFinishTime - serverTime.value > 0")

		(var playerProgressEntity:dhEntity = "getPrimaryEntity(CC.progressWithRewards, 'personal' + playerSideId)")
		(var progressWithRewardsComponent:dhComponent = "playerProgressEntity.progressWithRewards")

		(var activeIndex:number =			"progressWithRewardsComponent.activeIndex	?: 0"	(event "progressWithRewardsComponent.evChanged"))
		(var personalProgress:number =		"progressWithRewardsComponent.pointsCurrent	?: 0"	(event "progressWithRewardsComponent.evChanged"))
		(var personalProgressArray:array =	"progressWithRewardsComponent.pointsArray	?: []"	(event "progressWithRewardsComponent.evChanged"))

		
		(var personalRewardIndex:number =	"activeIndex - 1")
		(var personalProgressArrayMaxIndex:number = "personalProgressArray.length - 1")
		(var isPersonalRewardIndex:bool = "personalRewardIndex >= 0")

		(var pointsTillNextRewardTotal:number = "isPersonalRewardIndex ? personalProgressArray[personalRewardIndex + 1] : personalProgressArray[0]")
		(var lastReceivedRewardPoints:number = 	"isPersonalRewardIndex ? personalProgressArray[personalRewardIndex] : 0")
		(var hasReceivedAllRewards:bool = 		"isPersonalRewardIndex && personalRewardIndex == personalProgressArrayMaxIndex")

		(var personalProgressBarValue:number = "hasReceivedAllRewards ? 1 : personalProgress/pointsTillNextRewardTotal")
		(var isProgressBarVisible:bool = "!isEventFinished && !isSideNeutral && !hasReceivedAllRewards && isPrimeTimeActive")

		
		(struct rvrAvailableTip =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.RVR_AVAILABLE"))
		(struct rvrNewStageTip =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.RVR_NEW_STAGE"))
		
		(var arcEventTipId:number = "	rvrAvailableTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.RVR_AVAILABLE : 
										rvrNewStageTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.RVR_NEW_STAGE
																	: SC.Context_guiding_tip.TIP_TYPE.NONE")

		(var isArcEventTipVsible:bool = "arcEventTipId != SC.Context_guiding_tip.TIP_TYPE.NONE")
	)
	(name = 'arc_event_banner')
	(style
		(width = "BANNER_SIZE_WIDTH")
		(bind height "!hasReceivedAllRewards ? BANNER_SIZE_HEIGHT.MEDIUM : BANNER_SIZE_HEIGHT.SMALL")
	)

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[{	
			type: 'inputMapping.onRequest',
			name: 	isEventFinished ? 'arcEventShowResults' :
					isSideNeutral	? 'arcEventChooseSide' 
									: 'arcEventShowMainScreen',
			args: { }
		},
		{	
			type: 'inputMapping.onAction',
			name: 'setPromoSkipped',
			args: { splashScreenName: SC.Ui_common.SPLASH_SCREEN_TYPE.RVR }
		}]"
	)

	(controller $Tooltip
		(renderer = 'ArcEventBannerTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)
		(macro PORT_BANNER_CHANGE_ALPHA_BY_TRIGGER_ANIM _triggerExpression = "hasReceivedAllRewards")

		(element BannerItemTitle
			_title = 'IDS_ARC_EVENT_COMMON_EVENT_TITLE'
			_multiline = true
		)
	
		(block
			(style (width = 100%) (vgap = "S"))

			(block
				(bind visible "!hasReceivedAllRewards")
				(style (width = 100%))
				
				(controller $Instance renderer='ArcEventStatus'
					(bind enabled "!hasReceivedAllRewards")
				)
			)

			(block
				(bind visible "isProgressBarVisible")
				(style (width = 100%))

				(controller $Instance renderer = 'BannerProgressBar'
					(bind enabled "isProgressBarVisible")
					(args
						_progress = "personalProgressBarValue"
					)
				)
			)
		)

		(block
			(style
				(position = absolute) (top = "-S") (hitTest = false)
				(right = "isSideNeutral ? -S : -XS")
			)
			(controller $Instance renderer='ArcEventSideStereotype'
				(bind enabled "!hasReceivedAllRewards")
				(args
					_sideId = "playerSideId"
				)
			)
		)
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "isArcEventTipVsible")
		(args
			_tipId = "arcEventTipId"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_offsetX = "-XXS"
		)
	)
)

(def element SnowflakesBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		(var bonustagSeasonEntity:dhEntity = "getSingleEntity(CC.bonusTagSeason, 'snowflakeSeasonCollection')")
		(var bonusTagSeasonComponent:dhComponent = "bonustagSeasonEntity.bonusTagSeason")

		(var bonusSnowflakesCount:number = 	"bonusTagSeasonComponent.bonusSnowflakes" 	(event "bonusTagSeasonComponent.evChanged"))
		(var bannerState:number = 			"bonusTagSeasonComponent.bannerState" 		(event "bonusTagSeasonComponent.evBannerStateChanged"))

		(var isInactive:bool = "bonusSnowflakesCount == 0 || bannerState == SC.Ui_common.SNOWFLAKES_BANNER_STATE.INACTIVE")

		(var isNewMarkerVisible:bool = "bonustagSeasonEntity.hasComponent(CC.newItem)")

		
		(struct snowflakesEventStart =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SNOWFLAKES_EVENT_START"))
		(struct snowflakesEventFinish =	PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SNOWFLAKES_EVENT_FINISH"))
		
		(var snowflakesTipId:number = "	snowflakesEventStart.isActive	? SC.Context_guiding_tip.TIP_TYPE.SNOWFLAKES_EVENT_START : 
										snowflakesEventFinish.isActive	? SC.Context_guiding_tip.TIP_TYPE.SNOWFLAKES_EVENT_FINISH
																		: SC.Context_guiding_tip.TIP_TYPE.NONE")

		(var isSnowflakesTipVisible:bool = "snowflakesTipId != SC.Context_guiding_tip.TIP_TYPE.NONE")
	)

	(style (height = "BANNER_SIZE_HEIGHT.SMALL") (width = "BANNER_SIZE_WIDTH"))
	
	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[{	
			type: 'inputMapping.onRequest',
			name: 'showSnowflakesModal',
			args: { }
		},
		{	
			type: 'inputMapping.onAction',
			name: isNewMarkerVisible ? 'makeSeen' : '',
			args: { entityId: bonustagSeasonEntity.id }
		}]"
	)


	(controller $Tooltip
		(renderer = 'SnowflakesBannerTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)
		(macro PORT_BANNER_CHANGE_ALPHA_BY_TRIGGER_ANIM _triggerExpression = "!isNewMarkerVisible && isInactive")

		(element BannerItemTitle
			_title = 'IDS_DOCK_BANNER_SNOWFLAKES'
			_isNewMarker = "isNewMarkerVisible"
		)

		(block
			(class $PortBannerStatus)
			(controller $Instance renderer = 'BannerCountTask'
				(bind enabled "bonusSnowflakesCount > 0")
				(args
					_count = "bonusSnowflakesCount"
				)
			)
		)
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "isSnowflakesTipVisible")
		(args
			_tipId = "snowflakesTipId"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_offsetX = "-XXS"
		)
	)
)

(def element ShipyardBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		(var shipyardBannerStateEntity:dhEntity = "getSingleEntity(CC.shipyardBannerState)")
		(var shipyardBannerStateComponent:dhComponent = "shipyardBannerStateEntity.shipyardBannerState")

		(var shipyardProgressbar:dict = "shipyardBannerStateComponent.progressbar" 			(event "shipyardBannerStateComponent.evUpdate"))
		(var rewardsAvailable:bool = 	"shipyardBannerStateComponent.availableRewards > 0" (event "shipyardBannerStateComponent.evUpdate"))
		(var boosterAvailable:bool = 	"shipyardBannerStateComponent.boosterAvailable" 	(event "shipyardBannerStateComponent.evUpdate"))
		(var isActiveState:bool = 		"shipyardBannerStateComponent.type != 'finished'" 	(event "shipyardBannerStateComponent.evUpdate"))

		(var shipLevel:number = "shipyardProgressbar.shipLevel")
		(var curPoints:number = "shipyardProgressbar.points")
		(var maxPoints:number = "shipyardProgressbar.pointsMax")

		(var hasReward:bool = "boosterAvailable || rewardsAvailable")
		(var shipyardStepProgress:number = "curPoints / maxPoints")
		(var isShipyardMaxProgressReached:bool = "curPoints == maxPoints")
		(var shipyardStep:str = "	isShipyardMaxProgressReached	? 'IDS_SHIPYARD_FINAL_LEVEL_BANNER' : 
									shipLevel == 0					? 'IDS_SHIPYARD_PREPARE_LEVEL_BANNER'
																	: subst('IDS_SHIPYARD_LEVEL_BANNER', [], { _level: shipLevel })")
		
		(var shipyardIconUrl:str = "rewardsAvailable	? 'url:../service_kit/port_banner/icon_banner_reward.png' :
									boosterAvailable	? 'url:../service_kit/port_banner/icon_banner_sale.png'
														: null")
	)
	(name = 'shipyardBanner')

	(style
		(width = "BANNER_SIZE_WIDTH")
		(bind height "isActiveState ? BANNER_SIZE_HEIGHT.MEDIUM : BANNER_SIZE_HEIGHT.SMALL")
	)

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[{	
			type: 'inputMapping.onAction',
			name: 'navigateTo',
			args: { route: SC.Ui_windows.ROUTE.SHIPYARD }
		},
		{	
			type: 'inputMapping.onAction',
			name: 'shipyardBannerClicked',
			args: { }
		}]"
	)


	(controller $Tooltip
		(renderer = 'ShipyardBannerTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)

		(element BannerItemTitle
			_title = 'IDS_DOCK_BANNER_SHIPYARD'
			_isStateOwn = "hasReward"
		)

		(block
			(class $MarkerRewardPosition)
			(controller $Instance renderer = 'MarkerReward'
				(bind enabled "hasReward")
				(args
					_iconReward = "shipyardIconUrl"
					_isAnimate = "rewardsAvailable"
				)
			)
		)

		(block
			(bind visible "isActiveState")
			(style (width = 100%) (vgap = "S"))

			(block
				(style (width = 100%))
				(controller $Instance renderer = 'BannerProgressBarDescription'
					(bind enabled "isActiveState")
					(args
						_text = "shipyardStep"
						_multiline = true
					)
				)
			)

			(block
				(style (width = 100%))
				(controller $Instance renderer = 'BannerProgressBar'
					(bind enabled "isActiveState")
					(args
						_progress = "shipyardStepProgress"
					)
				)
			)
		)
	)

	(element GuidingTipHub
		_tipId = "SC.Context_guiding_tip.TIP_TYPE.SHIPYARD_INTRO"
		_tipPositioning = "TIP_POSITION_RIGHT"
		_modalWindowName = 'Dock'
		_offsetX = "-XXS"
	)
)

(def element PromoRewardBanner ()
	(scope
		(event startShow)
		(event startHide)

		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		(var promoRewardCollection:dhCollection = "getCollection(CC.accountPromoRewardBanner).getChildByPath('upcoming.sorted')")

		(var promoRewardEntity:dhEntity = "promoRewardCollection.getEntityAtIndex(0)")
		(var accountPromoRewardBannerComponent:dhComponent = "promoRewardEntity.accountPromoRewardBanner")

		(var promoRewardBattles:number = 	"accountPromoRewardBannerComponent.battles" 	(event "accountPromoRewardBannerComponent.evChanged"))
		(var promoRewardLevel:number = 		"accountPromoRewardBannerComponent.level" 		(event "accountPromoRewardBannerComponent.evChanged"))
		(var promoRewardImageSmall:str = 	"accountPromoRewardBannerComponent.imageSmall" 	(event "accountPromoRewardBannerComponent.evChanged"))

		(var promoImageEntity:dhEntity =		"getPrimaryEntity(CC.externalImage, promoRewardImageSmall)")
		(var promoImageComponent:dhComponent =	"promoImageEntity.externalImage")
		(var isImageLoaded:bool =				"promoImageComponent.isLoaded" (event "promoImageComponent.evIsLoadedChanged"))
		(var promoImageUrl:str =				"isImageLoaded ? 'img://embedded:byteImage?url=' + promoImageComponent.url : ''")

		(var accountLevelPointsEntity:dhEntity = "getSingleEntity(CC.accountLevelPoints)")
		(var accountLevelPointsComponent:dhComponent = "accountLevelPointsEntity.accountLevelPoints")
		
		(var currentPoints:number = "accountLevelPointsComponent.currentLevelPoints" (event "accountLevelPointsComponent.evCurrentLevelPointsChanged"))
		(var battlesToPromoReward:number = "(promoRewardBattles - currentPoints) ?: 0")
	)

	(style (height = 116px) (width = "BANNER_SIZE_WIDTH"))

	(macro MOUSE_HANDLER_BANNER
		_methods = "[{	
			type: 'inputMapping.onAction',
			name: 'navigateTo',
			args: {	route: SC.Ui_windows.ROUTE.LEVELING,
					data: { promoRewardBattles: promoRewardBattles,
							promoRewardLevel: promoRewardLevel,
							isPortBannerClicked: true,
							rewardTypeReason: AL_REWARD_TYPE_PROMO } }
		}]"
	)

	(controller $Tooltip
		(renderer = 'SimpleStatusTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		(args
			_unifiedStatus=" SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
			_text='IDS_PROMO_REWARD_BANNER_MOVE_TO_REWARD_MOUSE_INSTRUCTION'
		)
	)
	
	(block
		(name = 'promoRewardBannerImage')
		(class $Fullsize)
		(style
			(hitTest = false)
			(backgroundSize = "cover")
			(bind backgroundImage "promoImageUrl")
		)
	)

	(block
		(class $FullsizeAbsolute)
		(style (backgroundColor = "SC.Ui_styles.SERVICE_COLORS.INNER_PANEL") (alpha = "portBannerAlpha.alpha"))
		(macro DEFAULT_CONTROL_STATE_ANIMATION_ALPHA  _trigger="portBannerAlpha.state" _alpha="portBannerAlpha.alpha")
	)

	(block
		(style (position = "absolute") (left = "SXS") (bottom = "SXS"))
		
		(tf
			(name = 'promoRewardBannerBattlesCounter')
			(class $TextDefaultNM)
			(style (alpha = "TC"))

			(bind text "subst('IDS_BATTLES_TO_NEXT_STEP', [], { battles: battlesToPromoReward }, battlesToPromoReward)")
		)
	)
)

(def element ProspectiveEventLeftBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		(var prospectiveEventBannerStateEntity:dhEntity = "getSingleEntity(CC.prospectiveEventBannerState)")
		(var prospectiveEventBannerStateComponent:dhComponent = "prospectiveEventBannerStateEntity.prospectiveEventBannerState")
		(var url:str = "prospectiveEventBannerStateComponent.url" (event "prospectiveEventBannerStateComponent.evUrlChanged"))
	)

	(style (height = "BANNER_SIZE_HEIGHT.SMALL") (width = "BANNER_SIZE_WIDTH"))

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[{	
			type: 'inputMapping.onAction',
			name: 'navigateTo',
			args: {	route: SC.Ui_windows.ROUTE.PORTAL,
					data: { url: url,
							isPrmp: true,
							authorization: 'auth_wows' } }
		}]"
	)


	(controller $Tooltip
		(renderer = 'ProspectiveEventLeftBannerTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)

		(element BannerItemTitle
			_title = 'IDS_DOCK_BANNER_KEY_TARGET'
		)

		(block
			(class $MarkerRewardPosition)
			(element MarkerReward
				_iconReward = 'url:../service_kit/port_banner/icon_banner_key_target.png'
				_isAnimate = false
			)
		)
	)
)

(def element CasualCvcBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		(var selfPlayerEntity:dhEntity = "getSingleEntity(CC.accountSelf)")
		(var selfPlayerDbId:number = "selfPlayerEntity.accountSimple.dbId")
		(var cwInfoEntity:dhEntity = "getPrimaryEntity(CC.clanWarsInfo, selfPlayerDbId)")
		
		(var clanWarsInfoComponent:dhComponent = "cwInfoEntity.clanWarsInfo")

		(var stage:str = 							"clanWarsInfoComponent.stage" 						(event "clanWarsInfoComponent.evChanged"))
		(var attemptsLeft:number = 					"clanWarsInfoComponent.attemptsLeft" 				(event "clanWarsInfoComponent.evChanged"))
		(var isPlayerParticipating:bool = 			"clanWarsInfoComponent.playerParticipate" 			(event "clanWarsInfoComponent.evChanged"))
		(var isPlayerMissPreparation:bool = 		"clanWarsInfoComponent.playerMissPreparation" 		(event "clanWarsInfoComponent.evChanged"))
		(var clanMaxPreparationProgress:number = 	"clanWarsInfoComponent.clanMaxPreparationProgress"	(event "clanWarsInfoComponent.evChanged"))
		(var clanPreparationProgress:number = 		"clanWarsInfoComponent.clanPreparationProgress" 	(event "clanWarsInfoComponent.evChanged"))

		(var isAwardStage:bool = 			"stage == SC.Ui_common.CVC_PORT_BANNER_STAGE.REWARDING")
		(var isWarStage:bool = 				"stage == SC.Ui_common.CVC_PORT_BANNER_STAGE.WAR")
		(var isMatchingStage:bool = 		"stage == SC.Ui_common.CVC_PORT_BANNER_STAGE.MATCHMAKING")
		(var isQualificationStage:bool =	"stage == SC.Ui_common.CVC_PORT_BANNER_STAGE.PREPARATION")

		(var isAttempts:bool = "attemptsLeft > 0")
		(var isQualificationDone:bool = "clanPreparationProgress != 0 && clanMaxPreparationProgress == clanPreparationProgress")
		(var isDisableState:bool = "isQualificationStage && isQualificationDone || isMatchingStage || isAwardStage ||
									isWarStage && (!isAttempts || !isQualificationDone || isPlayerMissPreparation)")
		
		(var isPlayerParticipateWarStage:bool = "isWarStage && !isPlayerParticipating && !isPlayerMissPreparation")
		(var hasReward:bool = "isPlayerParticipateWarStage && isAttempts && isQualificationDone")
		(var isIconVisible:bool = "isQualificationDone && !isWarStage && !isAwardStage && !isPlayerMissPreparation")
	)
	(name = 'buttonCwars')
	
	(style (height = "BANNER_SIZE_HEIGHT.SMALL") (width = "BANNER_SIZE_WIDTH"))

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[{	
			type: 'inputMapping.onAction',
			name: 'navigateTo',
			args: {	route: SC.Ui_windows.ROUTE.CLANS,
					data: { url: SC.Ui_windows.GUI_URL.CLAN_WARS_IN_GAME } }
		}]"
	)

	(controller $Tooltip
		(renderer = 'CvCBannerTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)
		(macro PORT_BANNER_CHANGE_ALPHA_BY_TRIGGER_ANIM _triggerExpression = "isDisableState")
		
		(element BannerItemTitle
			_title = 'IDS_DOCK_BANNER_CASUAL_CVC'
			_isStateOwn = "hasReward"
		)

		(block
			(class $PortBannerStatus)
			(controller $Instance renderer = 'BannerCountTask'
				(bind enabled "isWarStage && isPlayerParticipating && isAttempts")
				(args
					_count = "attemptsLeft"
				)
			)
		)

		(block
			(class $MarkerRewardPosition)
			(controller $Instance renderer = 'MarkerReward'
				(bind enabled "hasReward || isIconVisible")
				(args
					_iconReward = "hasReward	? 'url:../service_kit/port_banner/icon_banner_battle_attempt.png' 
												: 'url:../service_kit/port_banner/icon_banner_battle_attempt_inactive.png'"
					_isAnimate = "hasReward"
				)
			)
		)
	)
)

(def element BigSimpleBanner (_title:str='', _imageUrl:str='', _name:str='', _action:str='', _actionParams:dict={}, _instructionText:str='', _hideHeader:bool = false)
	(scope
		(event startShow)
		(event startHide)

		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))
	)
	(name = "_name")
	
	(style (height = 80px) (width = "BANNER_SIZE_WIDTH"))

	(macro MOUSE_HANDLER_BANNER
		_methods = "[{	
			type: 'inputMapping.onAction',
			name: _action,
			args: _actionParams
		}]"
	)

	(controller $Tooltip
		(renderer = 'SimpleStatusTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		(args
			_text = "_instructionText"
		)
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(hitTest = false) (backgroundSize = "cover")
			(bind backgroundImage "_imageUrl")
		)
	)

	(block
		(class $FullsizeAbsolute)
		(style (backgroundColor = "SC.Ui_styles.SERVICE_COLORS.INNER_PANEL") (alpha = "portBannerAlpha.alpha"))
		(macro DEFAULT_CONTROL_STATE_ANIMATION_ALPHA  _trigger="portBannerAlpha.state" _alpha="portBannerAlpha.alpha")
	)
	
	(block
		(bind visible "!_hideHeader")
		(class $Fullsize)
		(class $PortBanner)
		
		(tf
			(class $TextHeaderWhiteBold)
			(bind text "toUpper(tr(_title))")
		)
	)
)

(def element ShipMasteryBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))

		(var shipMasteryCommonEntity:dhEntity = "getSingleEntity(CC.shipMasteryCommon)")
		(var isBannerActive:bool = "shipMasteryCommonEntity.hasComponent(CC.newItem)")

		(struct shipMasteryTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.SHIP_MASTERY_INTRO"))
	)

	(style (height = "BANNER_SIZE_HEIGHT.SMALL") (width = "BANNER_SIZE_WIDTH"))

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[{
			type: 'inputMapping.onAction',
			name: 'navigateTo',
			args: { route: SC.Ui_windows.ROUTE.SHIP_MASTERY }
		}]"
	)


	(controller $Tooltip
		(renderer = 'ShipMasteryBannerTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)

		(element BannerItemTitle
			_title = 'IDS_SHIP_MASTERY'
			_isStateOwn = "isBannerActive"
		)
		(block
			(class $MarkerRewardPosition)
			(controller $Instance renderer = 'MarkerReward'
				(bind enabled "isBannerActive")
				(args
					_iconReward = 'url:../service_kit/port_banner/icon_banner_ship_mastery_trial.png'
					_isAnimate = true
				)
			)
		)
	)
	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "shipMasteryTip.isActive")
		(args
			_tipId = "SC.Context_guiding_tip.TIP_TYPE.SHIP_MASTERY_INTRO"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_offsetX = "-XXS"
		)
	)
)

(def element TutorialBanner ()
	(scope
		(macro HIGH_CONTRAST_DATA_SCOPE)
		(macro MOUSE_HANDLER_SCOPE)
		(macro GET_PREF_NUMBER 'prefCountTutorClick' "'ui.tutorialBannerClicksCount'")
		(macro GET_PREF_BOOL 'isTutorialBannerShown' "'ui.tutorialBannerShown'")

		(struct portBannerAlpha = PORT_BANNER_ALPHA(_alphaBannerVariants = "ALPHA_BANNER_STATE" _isMouseDown = "mouseDown" _isRollOver = "rollOver"))
		(struct tutorialTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.TUTORIAL_START"))
	)
	(style
		(height = "BANNER_SIZE_HEIGHT.SMALL")
		(width = "BANNER_SIZE_WIDTH")
	)
	
	(bindcall externalCall "tutorialTip.isActive ? 'inputMapping.onAction' : ''" 
							"[	'deactivateTipChain', 
								{ tip_chain_id: SC.Context_guiding_tip.TIP_CHAIN_ID.TUTORIAL_START } ]"
							watch=false on='leftClick')
	
	(bindcall externalCall "isTutorialBannerShown ? '' : 'direct.action'"
							"[	'option.set', 
								{ preferenceId: 'ui.tutorialBannerShown', newValue: true } ]"
							watch=false on=addedToStage)

	(macro PORT_BANNER_BG _portBannerAlpha = "portBannerAlpha")
	(macro MOUSE_HANDLER_BANNER
		_methods = "[	{	type: 'inputMapping.onAction',
							name: 'show_guide',
							args: { } },
						{ 	type: 'direct.action',
							name: 'option.set',
							args: { preferenceId: 'ui.tutorialBannerClicksCount',
									newValue: prefCountTutorClick + 1 } }]"
	)

	(controller $Tooltip
		(renderer = 'TutorialBannerTooltip')
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		(args
			_unifiedStatus=" SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
			_text='IDS_PROMO_REWARD_BANNER_MOVE_TO_REWARD_MOUSE_INSTRUCTION'
		)
	)

	(block
		(class $Fullsize)
		(class $PortBanner)

		(element BannerItemTitle
			_title = 'IDS_DOCK_BANNER_VIDEO_TUTORIALS'
		)
	)
	
	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "tutorialTip.isActive")
		(args
			_tipId = "SC.Context_guiding_tip.TIP_TYPE.TUTORIAL_START"
			_tipPositioning = "TIP_POSITION_RIGHT"
			_modalWindowName = 'Dock'
			_offsetX = "-XXS"
		)
	)
)

(def element LeftSideBanners ()
	(scope
		(event startShow)
		(event startHide)

		(struct featureSse = FEATURES(_state = "SC.Common.ACCOUNT_FEATURE.ACTIONS_USE"))

		(var accountLevelComponent:dhComponent = "getSingleEntity(CC.accountLevel).accountLevel")
		(var curAccountLevel:number = "accountLevelComponent.level" (event "accountLevelComponent.evLevelChanged"))

		(var accountLevelPointsComponent:dhComponent = "getSingleEntity(CC.accountLevelPoints).accountLevelPoints")

		(var maxLevelEnabled:number = 	"accountLevelPointsComponent.maxLevelEnabled" 		(event "accountLevelComponent.evMaxLevelEnabledChanged"))
		(var currentPoints:number = 	"accountLevelPointsComponent.currentLevelPoints" 	(event "accountLevelComponent.evCurrentLevelPointsChanged"))

		
		(var isEventAccessibleByLevel:bool = "curAccountLevel > 11")

		(var eventBattleStateComponent:dhComponent = "getSingleEntity(CC.eventBattleState).eventBattleState")
		(var isEventBannerShow:bool = "eventBattleStateComponent.useBanner && isEventAccessibleByLevel" (event "eventBattleStateComponent.evChanged"))
		(var eventBattleName:str = "eventBattleStateComponent.name" (event "eventBattleStateComponent.evChanged"))

		
		(var arcEventComponent:dhComponent = "getSingleEntity(CC.arcEvent).arcEvent")
		(var arcEventState:number = "arcEventComponent.state" (event "arcEventComponent.evEventStateChanged"))
		
		(var isArcEventBannerVisible:bool = "(arcEventState & (1 << BINARY_SHIFT_MAP[SC.Sse.RVR_EVENT_STATE.EVENT_ACTIVE])) == 1")

		
		(var strategicActionsEventComponent:dhComponent = "getSingleEntity(CC.strategicActionsEvent).strategicActionsEvent")
		(var strategicActionsState:number = "strategicActionsEventComponent.state" (event "strategicActionsEventComponent.evStateChanged"))
		(var isStrategicActionsVisible:bool = "isIn(strategicActionsState, SC.Common.STRATEGIC_ACTIONS_EVENT_STATE.WITH_BANNER_ENABLED)")

		
		(var shipyardBannerStateComponent:dhComponent = "getSingleEntity(CC.shipyardBannerState).shipyardBannerState")
		(var shipyardBannerVisible:bool = "shipyardBannerStateComponent.visible" (event "shipyardBannerStateComponent.evUpdate"))
		(var isShipyardBannerVisible:bool = "shipyardBannerVisible && featureSse.state != 'locked'")

		
		(var promoRewardCollection:dhCollection = "getCollection(CC.accountPromoRewardBanner).getChildByPath('upcoming.sorted')")
		(var promoRewardEntity:dhEntity = "promoRewardCollection.getEntityAtIndex(0)")
		(var promoRewardBattlesComponent:dhComponent = "promoRewardEntity.accountPromoRewardBanner")

		(var accountInfoComponent:dhComponent = "getSingleEntity(CC.accountSelf).accountInfo")
		(var abuseStatus:number = "accountInfoComponent.abuseStatus" (event "accountInfoComponent.evAbuseStatusChanged"))
		(var isAbuseStatusConfirmed:bool = "abuseStatus == SC.Common.ABUSE_STATUS.CONFIRMED")

		(var isPromoRewardTaken:bool = "promoRewardBattlesComponent.battles <= currentPoints")
		(var isPromoRewardVisible:bool = "(promoRewardEntity != null) && !isPromoRewardTaken && !isAbuseStatusConfirmed")

		
		(var icAccountLevelVisible:bool = "curAccountLevel != maxLevelEnabled")

		
		
		(var prospectiveEventBannerStateComponent:dhComponent = "getSingleEntity(CC.prospectiveEventBannerState).prospectiveEventBannerState")
		(var isProspectiveEventBannerActive:bool = "prospectiveEventBannerStateComponent.active" (event "prospectiveEventBannerStateComponent.evActiveChanged"))
		(var isProspectiveEventLeftVisible:bool = "isProspectiveEventBannerActive && featureSse.state != 'locked'")

		
		(struct campaignsFeature = FEATURES(_state = "SC.Common.ACCOUNT_FEATURE.CAMPAIGNS"))
		(var isCampaignUnlocked:bool = "campaignsFeature.state != 'locked'")
	
		(var newbieQuestsCollection:dhCollection = "getCollection(CC.newbieQuest)")
		(var isNewbieQuests:bool = "newbieQuestsCollection.length > 0")
		(var isSSEVisible:bool = "isNewbieQuests || featureSse.state != 'locked' || isCampaignUnlocked")

		
		(var battlePassComponent:dhComponent = "getSingleEntity(CC.battlePass).battlePass")
		(var battlePassState:number = "battlePassComponent.state" (event "battlePassComponent.evBattlePassStateChanged"))
		(var isBattlePassVisible:bool = "battlePassState == SC.Common.BATTLEPASS_SEASON_STATE.ACTIVE")

		
		(var snowflakeBonusTagSeason:dhComponent = "getSingleEntity(CC.bonusTagSeason, 'snowflakeSeasonCollection').bonusTagSeason")
		(var snowflakeState:number = "snowflakeBonusTagSeason.bannerState" (event "snowflakeBonusTagSeason.evBannerStateChanged"))
		(var isSnowflakesVisible:bool = "snowflakeState != null && snowflakeState != SC.Ui_common.SNOWFLAKES_BANNER_STATE.DISABLED")

		
		(struct featureLootboxes = FEATURES(_state = "SC.Common.ACCOUNT_FEATURE.LOOTBOXES"))
		(var isLootboxVisible:bool = "featureLootboxes.state != 'locked'")

		
		(var repairDockRouteComponent:dhComponent = "getPrimaryEntity(CC.route, SC.Ui_windows.ROUTE.REPAIR_DOCK).route")
		(var isRepairDockVisible:bool = "repairDockRouteComponent.isAvailable" (event "repairDockRouteComponent.evIsAvailableChanged"))

		
		(struct serverTime = SERVER_TIME())
		(var accountSelfEntity:dhEntity = "getSingleEntity(CC.accountSelf)")
		(var accountSimpleComponent:dhComponent = "accountSelfEntity.accountSimple")

		(var accountSimpleEntity:dhEntity = "getPrimaryEntity(CC.accountSimple, accountSimpleComponent.dbId)")
		(var playerClanMan:dhComponent = "accountSimpleEntity.clanman")
		(var clanId:number = "playerClanMan.clanId" (event "playerClanMan.evClanIdChanged"))

		(var clanWarsInfoEntity:dhEntity = "getPrimaryEntity(CC.clanWarsInfo, accountSimpleComponent.dbId)")
		(var clanWarsInfoComponent:dhComponent = "clanWarsInfoEntity.clanWarsInfo")
		
		(var clanParticipate:bool = 	"clanWarsInfoComponent.clanParticipate" 	(event "clanWarsInfoComponent.evChanged"))
		(var warEnabled:bool = 			"clanWarsInfoComponent.warEnabled" 			(event "clanWarsInfoComponent.evChanged"))
		(var roundEndTimestamp:number = "clanWarsInfoComponent.roundEndTimestamp" 	(event "clanWarsInfoComponent.evChanged"))

		(var isStageTimeUp:bool = "serverTime.value >= roundEndTimestamp")

		(var isCasualCvcVisible:bool = "clanId && clanParticipate && warEnabled && !isStageTimeUp")

		
		(var shipMasteryCommonEntity:dhEntity = "getSingleEntity(CC.shipMasteryCommon)")
		(var hasOwnShipToMaster:bool = "shipMasteryCommonEntity.shipMasteryCommon.hasOwnShipToMaster" (event "shipMasteryCommonEntity.shipMasteryCommon.evHasOwnShipToMasterChanged"))

		
		(var isTutorialVisible:bool = "curAccountLevel <= TUTORIAL_BANNER_MAX_LEVEL")
	)

	(name = 'port_banners')

	(style (height = 100%) (paddingBottom = "SXS"))

	(vtile
		(style (height = 100%) (gap = "XS"))

		
		(element MetaShopBanner)

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		(block
			(bind visible "isArcEventBannerVisible")
			(controller $Instance renderer='ArcEventBanner'
				(bind enabled "isArcEventBannerVisible")
			)
		)

		(block
			(bind visible "isShipyardBannerVisible")
			(controller $Instance renderer='ShipyardBanner'
				(bind enabled "isShipyardBannerVisible")
			)
		)

		(block
			(bind visible "isPromoRewardVisible")
			(controller $Instance renderer='PromoRewardBanner'
				(bind enabled "isPromoRewardVisible")
			)
		)

		
		(block
			(bind visible "icAccountLevelVisible")
			(controller $Instance renderer='AccountLevelBanner'
				(bind enabled "icAccountLevelVisible")
			)
		)

		(block
			(bind visible "isStrategicActionsVisible")
			(controller $Instance renderer='StrategicActionsBanner'
				(bind enabled "isStrategicActionsVisible")
			)
		)

		(block
			(bind visible "isBattlePassVisible")
			(controller $Instance renderer='BattlePassBanner'
				(bind enabled "isBattlePassVisible")
			)
		)

		(block
			(bind visible "isProspectiveEventLeftVisible")
			(controller $Instance renderer='ProspectiveEventLeftBanner'
				(bind enabled "isProspectiveEventLeftVisible")
			)
		)

		(block
			(bind visible "isLootboxVisible")
			(controller $Instance renderer='LootboxBanner'
				(bind enabled "isLootboxVisible")
			)
		)

		(block
			(bind visible "hasOwnShipToMaster")
			(controller $Instance renderer='ShipMasteryBanner'
				(bind enabled "hasOwnShipToMaster")
			)
		)

		(block
			(bind visible "isRepairDockVisible")
			(controller $Instance renderer='RepairDockBanner'
				(bind enabled "isRepairDockVisible")
			)
		)

		(block
			(bind visible "isSnowflakesVisible")
			(controller $Instance renderer='SnowflakesBanner'
				(bind enabled "isSnowflakesVisible")
			)
		)









		(block
			(bind visible "isSSEVisible")
			(controller $Instance renderer='SseBanner'
				(bind enabled "isSSEVisible")
			)
		)

		(block
			(bind visible "isTutorialVisible")
			(controller $Instance renderer='TutorialBanner'
				(bind enabled "isTutorialVisible")
			)
		)
	)
)