(def element ShipPreview ()
	(macro HIDE_UI_ON_SHIPOVERVIEW)
	(scope
		(macro CAROUSEL_HEIGHT_SCOPE)
		(macro HIGH_CONTRAST_DATA_SCOPE)

		(macro PULL_SHIP_ID)
		(var shipEntity:dhEntity = "getPrimaryEntity(CC.ship, viewedShipId)")
		(var shipInfo:dhComponent = "shipEntity.ship")

		(var shipNameIDS:str = "shipInfo.nameIDS" (event "shipInfo.evUpdate"))
		(var needShowProjectYear:bool = "shipInfo.needShowProjectYear" (event "shipInfo.evUpdate"))
		(var isPaperShip:bool = "shipInfo.isPaperShip" (event "shipInfo.evUpdate"))
		(var peculiarity:str = "shipInfo.peculiarity" (event "shipInfo.evUpdate"))

		(var yearInfo:str = "(isPaperShip ? tr('IDS_PROJECT_YEAR') : tr('IDS_RELEASE_YEAR')) + tr('IDS_COLON')")
		(var seriesInfo:str = "tr('IDS_SHIPS_IN_SERIES') + tr('IDS_COLON')")
		(var description:str = "tr(shipNameIDS + '_DESCR')")
		(var isSeriesInfoVisible:bool = "!isPaperShip")
		(var isVisibleInfo:bool = "(peculiarity == '' || peculiarity == 'first_april_2023') && needShowProjectYear")

		(macro PULL_ROUTE "SC.Ui_windows.ROUTE.SHIP_PREVIEW" "'isShipPreviewWindow'")

		(macro STAGE_SIZE)
		(var isSmallScreen:bool = "stageWidth < 1584")

		(var isExcursionActive:bool = "dockData.excursionVisible" (event "dockData.evExcursionVisibleChanged"))
		(var historyContentAlpha:number = "isExcursionActive ? 0 : 1")

		(var contentScrollHeight:number = 0)
		(var currentScrollHeight:number = "min(contentScrollHeight, stageHeight - carouselAreaHeight - 210)")
	)
	(class $Fullsize)
	(style (bind paddingBottom "carouselAreaHeight"))

	(block
		(style
			(align = "center")
			(width = 100%)
			(paddingTop =	"{720:20px, 1080:50px}")
			(paddingRight =	"M")
			(paddingLeft =	"M")
			(marginBottom = "L")
		)

		(block
			(style (position = "absolute") (top = -5px))

			(element BackButton
				_text = 'IDS_RETURN_FROM_MODAL_WINDOW_BUTTON'
				_methods = "[	{	type: 'inputMapping.onAction',
									name: 'navigateTo',
									args: { route: SC.Ui_windows.ROUTE.PORT }}]"
			)
		)

		(block
			(style
				(position = "absolute")
				(right = "XS")
				(top = "-XXS")
			)

			(element ModalWindowCloseIcon
				_tooltipText = 'IDS_CLOSE'
			)
		)
	)

	(block
		(style
			(width = "{1584:296px, 1904:456px}")
			(height = 100%)
			(position = "absolute")

			(top = 98px)
			(left = "SXS")
		)

		(controller $Animation
			(bindcall play
				id = 'shipHistoryContentAnim'
				duration = 0.3
				to = "{ alpha: historyContentAlpha }"
				easing = "Easing.quad_in"
				action = "kill"
				(bind trigger "historyContentAlpha")
			)
		)

		(block
			(style (width = 100%))

			(block
				(bind visible "isHighContrast")
				(class $FullsizeAbsolute)
				(style (backgroundImage = 'url:../service_kit/panel_backgrounds/hint_panel_high_contrast.png') (scale9grid = 3))
			)

			(block
				(class $FullsizeAbsolute)
				(controller $Instance renderer='BlurMap'
					(bind enabled "!isHighContrast")
				)
			)

			(block
				(class $FullsizeAbsolute)
				(style (padding = -1px))
				
				(block
					(class $FullsizeAbsolute)
					(style (backgroundColor = "SC.Ui_styles.SERVICE_COLORS.INNER_PANEL"))
				)

				(block
					(class $FullsizeAbsolute)
					(style (backgroundImage = 'url:../service_kit/panel_backgrounds/stat_panel.png') (scale9grid = 3))
				)
			)


			(block
				(style (width = 100%) (marginLeft = "MS") (marginTop = "MS") (marginBottom = "M"))
				(tf
					(bind class "isSmallScreen ? '$TextDefaultBold17NM' : '$TextDefaultBold23NM'")
					(style (width = 100%) (alpha = "TA"))
					(text = 'IDS_HISTORICAL_INFORMATION')
				)
			)
			(element HorizontalDividerTwoPx)

			(scrollArea
				(style (width = 100%) (bind height "currentScrollHeight") (backgroundColor = "NO_COLOR"))

				(verticalSlider ScrollBarVLight
					_singleStep = 45
				)
				(hscrollPolicy = 'off')
				(vscrollPolicy = 'auto')

				(wheelScrollSpeed = 1.0)

				(content
					(style (width = 100%))
					(bind contentScrollHeight "$globalLayoutBounds[3]" (event "$evLayoutBoundsChanged"))

					(block
						(style (width = 100%) (vgap = 20px) (paddingLeft = "MS") (paddingRight = "MS") (paddingTop = "M") (paddingBottom = "S"))

						(hblock
							(bind visible "isVisibleInfo && isSeriesInfoVisible")
							(tf
								(bind class "isSmallScreen ? '$TextDefaultNM' : '$TextDefault17NM'")
								(style (alpha = "TA"))
								(bind text "seriesInfo")
							)
							(tf
								(bind class "isSmallScreen ? '$TextDefaultBoldNM' : '$TextDefaultBold17NM'")
								(style (alpha = "TA") (marginLeft = "S"))
								(bind text "shipNameIDS + '_NUMBER'")
							)
						)

						(hblock
							(bind visible "isVisibleInfo")
							(tf
								(bind class "isSmallScreen ? '$TextDefaultNM' : '$TextDefault17NM'")
								(style (alpha = "TA"))
								(bind text "yearInfo")
							)
							(tf
								(bind class "isSmallScreen ? '$TextDefaultBoldNM' : '$TextDefaultBold17NM'")
								(style (alpha = "TA") (marginLeft = "S"))
								(bind text "shipNameIDS + '_YEAR'")
							)
						)

						(tf
							(bind class "isSmallScreen ? '$TextDefaultNM' : '$TextDefault17NM'")
							(style
								(width = 100%) (alpha = "TA")
								(multiline = true) (leading = -1)
								(styleSheet = '.p_spacing { font-size: 12px; }')
							)

							(bind htmlText "description")
						)
					)
				)
			)
			(block (style (height = 24px)))
		)
	)
)

(def element InstructionHintBlock ()
	(macro HIDE_UI_ON_SHIPOVERVIEW) 
	(scope
		
		(event evInstructionShow)
		(event evInstructionHide)

		
		(var isExcursionActive:bool = "dockData.excursionVisible" (event "dockData.evExcursionVisibleChanged"))
		(macro PULL_ROUTE "SC.Ui_windows.ROUTE.SHIP_PREVIEW" "'isShipPreviewWindow'")

		(var isInstructionVisible:bool = "isExcursionActive || isShipPreviewWindow")

		
		(var instructionText:str = "isExcursionActive	?	'IDS_INSTRUCTION_CAMERA_EXCURSION_RESET'
														:	'IDS_INSTRUCTION_HIDE_INTERFACE'" watch=false (event "evInstructionShow"))
	)
	(style (hitTest = false))
	(dispatch evInstructionShow on='addedToStage' (bind enabled "isInstructionVisible"))
	(dispatch evInstructionShow (bind enabled "isInstructionVisible") (bind trigger "isExcursionActive"))
	(dispatch evInstructionShow (bind enabled "isInstructionVisible") (bind trigger "isShipPreviewWindow"))

	(hblock
		(style (alpha = 0) (visualOffsetY = 10px) (hgap = "-XXS"))

		(controller $Animation
			(bindcall play
				id = 'InstructionShowAnim'
				duration = 0.15
				to = "{ alpha: 1, visualOffsetY: 0px }"
				easing = "Easing.quad_in"
				action = "killAll"
				(event "evInstructionShow")
			)
			(dispatch evInstructionHide delay=30 reset=true on='evAnimEnded'	(bind enabled "isInstructionVisible")	(bind trigger "isInstructionVisible"))
			(dispatch evInstructionHide on='evAnimEnded'						(bind enabled "!isInstructionVisible")	(bind trigger "isInstructionVisible"))
		)

		(controller $Animation
			(bindcall play
				id = 'InstructionHideAnim'
				duration = 0.15
				to = "{ alpha: 0, visualOffsetY: 10px }"
				easing = "Easing.quad_out"
				(event "evInstructionHide")
			)
			(bindcall stop id='InstructionHideAnim' init=false (event "evInstructionShow"))
		)

		(element UnifiedStatusIcon
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.MOUSE_RIGHT"
		)
		(tf
			(class $TextDefaultBold17NM)
			(style (alpha = "TA") (marginTop = -1px))
			(bind text "instructionText")
		)
	)
)