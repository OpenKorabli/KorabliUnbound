(def constant INFORMER_GROUP_LIST {		SC.System_messages.SYS_MESSAGE_TYPE_UI.CLAN_BATTLE_PRIMETIME_CHANGED			: 'InformerClanBattlesPrimetime',
										SC.System_messages.SYS_MESSAGE_TYPE_UI.PREMUIM_DAY_LEFT							: 'InformerPremDayLeft',
										SC.System_messages.SYS_MESSAGE_TYPE_UI.CLAN_RULES_HAVE_CHANGED					: 'InformerClanBattlesPrimetime',
										SC.System_messages.SYS_MESSAGE_TYPE_UI.RANK_BATTLE_STATE_CHANGED				: 'InformerRankBattles',
										SC.System_messages.SYS_MESSAGE_TYPE_UI.BRAWL_BATTLES_STATE_CHANGED				: 'InformerBrawlBattles',
										SC.System_messages.SYS_MESSAGE_TYPE_UI.MISSING_EXPENDABLE_ITEMS_IN_SHIP_BUILD	: 'InformerExpendablesExpired',
										SC.System_messages.SYS_MESSAGE_TYPE_UI.REPLACE_EXPENDABLE_ITEMS_IN_SHIP_BUILD	: 'InformerExpendablesReplaced',
										SC.System_messages.SYS_MESSAGE_TYPE_UI.NEWBIE_QUEST_INFORMER					: 'InformerNewbieQuest',
										SC.System_messages.SYS_MESSAGE_TYPE_UI.PARAGON_SEASON_INFORMER					: 'InformerParagonsSeason' })

(def element InformerLogContainer ()
	(scope
		(var renderedSystemMessageCollection:gfx = "$datahub.getCollection(CC.renderedSysMsg)")
		(var informersCollection:gfx = "renderedSystemMessageCollection ? renderedSystemMessageCollection.getChildByPath('byClassId.' + CC.informerSysMsgToBeRendered) : null")
		(var informersCollectionArray:array = "informersCollection ? informersCollection.items : []" (event "informersCollection.evUpdated"))

		(macro USER_PREF_DATA)
		(macro CAROUSEL_HEIGHT_SCOPE)
	)
	(style (width = 100%) (height = 100%))
	(block
		(class $MiddleAlignedAbsolutely)
		(style (bind bottom "carouselAreaHeight"))

		(controller $Repeat renderer = 'InformerLogNotificationItem'
			(bind count "informersCollectionArray ? informersCollectionArray.length : 0")
			(bindcall removeChildAt	"$event[1]" (event "informersCollection.evRemoved"))
			(bindcall addChildAt	"$event[1]" (event "informersCollection.evAdded"))
			(args
				_collection = "informersCollection"
			)
		)
	)
)

(def element InformerLogNotificationItem (_collection:gfx)
	(scope
		(event evHideMessage)
		(macro MOUSE_HANDLER_SCOPE)
		(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND_SCOPE)

		(var informerEntity:gfx = "_collection.items[$index]" watch=false)
		(var sysMessageCoreComponent:gfx = "informerEntity ? informerEntity.sysMessageCore : null")
		(var timeToLiveComponent:gfx = "informerEntity ? informerEntity.timeToLive : null" (event "informerEntity.evAdded") (event "informerEntity.evRemoved"))
		(var contentEntitiesIds:array = "sysMessageCoreComponent ? sysMessageCoreComponent.contentEntitiesIds : []" (event "sysMessageCoreComponent.evContentEntitiesIdsChanged"))
		(var isAvailableForRender:bool = "contentEntitiesIds.length > 0")

		
		(var isInformerVisible:bool = "timeToLiveComponent	? !timeToLiveComponent.isRemoving : true" (event "timeToLiveComponent.evRemove"))
		
	)
	(style (backgroundColor = "NO_COLOR"))
	(macro MOUSE_EVENTS_DISPATCHER)
	(bindcall externalCall "'direct.action'" "['closeInformer', {id: informerEntity.id}]"	init=false watch=false	(event "evHideMessage"))
	(bindcall externalCall "isInformerVisible ? 'direct.action' : ''" "['rollOverInformer', {}]" init=false watch=false (event "evRollOver"))
	(bindcall externalCall "isInformerVisible ? 'direct.action' : ''" "['rollOutInformer', {}]" init=false watch=false (event "evRollOut"))

	(dispatch "'evBlurStartShow'" dir="EventDirection.DOWN" init=false on='addedToStage')
	(dispatch "'evBlurStartHide'" dir="EventDirection.DOWN" init=false (event "timeToLiveComponent.evRemove"))

	(block
		(class $FullsizeAbsolute)
		(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND_MARKUP)
		(controller $Animation
			(bindcall play
				from =		"{alpha: 1}"
				to =		"{alpha: 1.5}"
				easing =	"Easing.sine_in"
				duration =	"0.1"
				reverse =	"!rollOver"
				(bind trigger "rollOver")
			)
		)
	)

	(controller $Instance renderer = 'InformerItemWrapper'
		(bind enabled "isAvailableForRender")
		(args
			_entityId = "contentEntitiesIds[0]"
		)
	)

	(controller $Animation
		
		(play
			from = 		"{alpha: 0, y: 15}"
			to =		"{alpha: 1, y: 0}"
			easing =	"Easing.quad_out"
			duration =	"0.2"
		)

		
		(bindcall play
			to =		"{alpha: 0, y: -15}"
			easing =	"Easing.quad_out"
			duration =	"SC.Ui_common.SYSTEM_MESSAGES_SHOW_CONFIG.LIFE_TIME_AFTER_HIDING"
			action="kill"
			(bind enabled "!isInformerVisible")
		)
	)
)

(def element InformerItemWrapper (_entityId:number)
	(scope
		(var informerItemEntity:gfx = "$datahub.getEntity(_entityId)")
		(var informerMessageComponent:gfx = "informerItemEntity ? informerItemEntity.getComponent(CC.informerMessage) : null")
		(var informerData:dict = "informerMessageComponent ? informerMessageComponent.data : {}")
		
		(var typeId:str = "'typeId' in informerData ? toString(informerData.typeId) : ''")
		(var selectedRenderItem:str = "typeId in INFORMER_GROUP_LIST ? INFORMER_GROUP_LIST[typeId] : ''")
		(var isAvailableForRender:bool = "selectedRenderItem && typeId")
	)


	(block
		(controller $Instance
			(bind renderer "selectedRenderItem")
			(bind enabled "isAvailableForRender")
			(args _data = "informerData")
		)
	)

	(block
		(style (position = "absolute") (right = "M") (top = "M"))
		(controller $Instance renderer='CloseButton'
			(args
				_name = 'informerCloseButton'
				_dispatchedEv = 'evHideMessage'
				_tooltipText = 'IDS_CLOSE_NOTIFICATION'
			)
		)
	)
)

(def element CommonInformer(_iconUrl:str, _textItems:array, _textClass:str='$TextDefaultBold19NM', 
	_unifiedStatus:str="SC.Ui_styles.UNIFIED_STATUS.DEFAULT", _isStayOnClick:bool=false, _subtitleText:str=null)
	
	(style 
		(flow = "horizontal")
		(width = 466px)
		(padding = "M") (paddingRight = "L")
	)
	(dispatch 'evHideMessage' dir="EventDirection.UP" on='click' (bind enabled "!_isStayOnClick"))
	
	(block
		(style (width = 80px) (height = 80px) (align = "top"))

		(block
			(style (width = 80px) (height = 80px) (bind backgroundImage "_iconUrl"))
		)
	)

	(block
		(style (paddingLeft = "SXS") (width = "100%") (align = "middle")
			(bind minHeight "_subtitleText ? 60px : 80px")
			(bind paddingTop "_subtitleText ? SXS : 0")
			(bind paddingBottom "_subtitleText ? S : 0")
		)

		(controller $Repeat renderer = 'CommonInformerTextItem'
			(bind count "_textItems.length")
			(args
				_text = "_textItems[$index]"
				_textClass = "_textClass"
				_unifiedStatus = "_unifiedStatus"
			)
		)

		(controller $Instance renderer='CommonInformerTextItem'
			(bind enabled "_subtitleText")
			(exprs
				(style (marginTop = "SXS"))
			)

			(args
				_text = "_subtitleText" 
				_textClass = "'$TextDefaultNM'"
				_hasSubtitle = "true"
			)
		)
	)
)


(def element CommonInformerTextItem (_text:str, _textClass:str, _unifiedStatus:str="SC.Ui_styles.UNIFIED_STATUS.DEFAULT", _hasSubtitle:bool=false)
	(macro UNIFIED_STATUS_TO_COLOR_AND_ALPHA "_unifiedStatus" "'textColor'" "'textAlpha'")
	(style (width = "100%") (bind marginTop "$index ? S : 0"))

	(tf
		(bind class "_textClass")
		(style
			(width = 100%)
			(bind leading "_hasSubtitle ? -2 : -4")
			(bind alpha "_hasSubtitle ? 0.75 : textAlpha")
			(bind textColor "textColor")
		)
		(bind text "_text")
	)
)





(def element InformerRankBattles (_data:dict)
	(scope
		(var isPromo:bool = "_data.messageType == SC.Common.RANK_INFORMERS_TYPES.PROMO")
		(var selectedTime:number = "isPromo ? _data.startTime : _data.finishTime")
		
		(macro SERVER_TIME_SCOPE)
		(macro COUNTDOWN_SCOPE "'timeLeft'" "selectedTime" "'HIGHEST,WITH_DAYS'")

		(var subtitleText:str = "isPromo || _data.messageType == SC.Common.RANK_INFORMERS_TYPES.ACTIVE_SEASON ||
			_data.messageType == SC.Common.RANK_INFORMERS_TYPES.END_SEASON || _data.messageType == SC.Common.RANK_INFORMERS_TYPES.ACTIVE_SPRINT
			|| _data.messageType == SC.Common.RANK_INFORMERS_TYPES.END_SPRINT 	? subst('IDS_INFORMER_TIME_LEFT', [], {_timeLeft: toString(timeLeft)}) 
																				: null")											
	)
	(bindcall externalCall "'inputMapping.onAction'" "['RankInformerShown', {	message_type: _data.messageType,
																				season_id: _data.seasonId,
																				sprint_id: _data.sprintId }]" init=false watch=false on='addedToStage')

	(controller $Instance renderer='CommonInformer'
		(args
			_iconUrl = 'url:../service_kit/battle_types/RankedBattle.png'
			_textItems = "[ subst('IDS_RANK_BATTLES_INFORMER_TYPE_' + _data.messageType, [], {	_seasonId: toString(_data.seasonId),
																								_sprintId: toString(_data.sprintId + 1)}) ]"
			_subtitleText = "subtitleText"
		)
	)
)

(def element InformerPremDayLeft (_data:dict)
	(scope
		(var accountResource:gfx = "$datahub.getSingleEntity(CC.accountResource).accountResource")
		(var premBefore:number = "accountResource.premBefore" (event "accountResource.evChangedPrem"))
		(var wowsPremBefore:number = "accountResource.wowsPremBefore" (event "accountResource.evChangedPrem"))
		(var isWowsPrem:bool = "_data.data.showWOWS == true")

		(var timeBefore:number = "isWowsPrem ? wowsPremBefore : premBefore")
		(macro SERVER_TIME_SCOPE)
		(macro COUNTDOWN_SCOPE "'remainingTime'" "timeBefore" "'HIGHESTDAYS'")

		(var iconUrl:str = "isWowsPrem	? 'url:../reward_icons/wows_premium.png'
										: 'url:../reward_icons/premium.png'")
	)

	(controller $Instance renderer='CommonInformer'
		(args
			_iconUrl = "iconUrl"
			_textItems = "[tr('IDS_PREMIUM_ACCOUNT_ENDS')]"
			_subtitleText = "isWowsPrem	? subst('IDS_MK_PREMIUM_ACCOUNT_ENDS_TIME', [], {timeLeft: toString(remainingTime)})
										: subst('IDS_COMMON_PREMIUM_ACCOUNT_ENDS_TIME', [], {timeLeft: toString(remainingTime)})"
		)
	)
)

(def element InformerClanBattlesPrimetime (_data:dict)
	(scope
		(var primeTimeEntity:gfx = "_data.messageId ? $datahub.getEntity(_data.messageId) : null")
		(var clanBattlePrimeTime:gfx = "primeTimeEntity ? primeTimeEntity.clanBattlePrimeTime : null")
		(var primeTimeComponent:gfx = "primeTimeEntity ? primeTimeEntity.primeTime : null")

		(var isChosenPrimeTime:bool = "clanBattlePrimeTime ? clanBattlePrimeTime.isChosen : false" (event "clanBattlePrimeTime.evChanged"))
		(var primeTimeStartTime:number = "primeTimeComponent.primeTimeStartTime ?: 0" (event "primeTimeComponent.evChanged"))
		(var primeTimeFinishTime:number = "primeTimeComponent.primeTimeFinishTime ?: 0" (event "primeTimeComponent.evChanged"))
		(var dayLightShift:number = "primeTimeComponent.daylightshift ?: 0" (event "primeTimeComponent.evChanged"))

		(var isPrimeTimeSoonEnds:bool =		"_data.messageType == SC.Common.CLAN_INFORMERS_TYPES.PRIME_TIME_SOON_ENDS")
		(var isPrimeTimeSoonStart:bool = 	"_data.messageType == SC.Common.CLAN_INFORMERS_TYPES.PRIME_TIME_SOON_START")
		(var isPrimeTimeStart:bool = 		"_data.messageType == SC.Common.CLAN_INFORMERS_TYPES.PRIME_TIME_START")
		(var isPrimeTimeEnd:bool = 			"_data.messageType == SC.Common.CLAN_INFORMERS_TYPES.PRIME_TIME_END")
		(var isPrimeTimeChosen:bool = 		"_data.messageType == SC.Common.CLAN_INFORMERS_TYPES.PRIME_TIME_CHOSEN")
		(var isPrimeTimeFixed:bool = 		"_data.messageType == SC.Common.CLAN_INFORMERS_TYPES.PRIME_TIME_FIXED")
		(var hasSubstStr:bool = "isPrimeTimeStart || isPrimeTimeEnd || isPrimeTimeChosen || isPrimeTimeFixed")
		(var hasTimeLeft:bool = "isPrimeTimeSoonEnds || isPrimeTimeSoonStart")
		(var primeTime:number = "isPrimeTimeSoonStart ? primeTimeStartTime : primeTimeFinishTime")
		(var primeTimeDiff:number = "primeTime - dayLightShift")

		(macro SERVER_TIME_SCOPE)
		(macro COUNTDOWN_SCOPE "'timeLeft'" "primeTimeDiff" "'HIGHEST,WITH_DAYS'")

		(var localStartTime:str = "formatTime(primeTimeStartTime - dayLightShift, 'hh:mm', '', true)")
		(var localFinishTime:str = "formatTime(primeTimeFinishTime - dayLightShift, 'hh:mm', '', true)")

		(var textItems:array = "hasSubstStr ? [subst('IDS_CLAN_BATTLES_PRIMETIME_INFORMER_TYPE_' + toUpper(_data.messageType), [], {startTime: localStartTime, endTime: localFinishTime})]
											: ['IDS_CLAN_BATTLES_PRIMETIME_INFORMER_TYPE_' + toUpper(_data.messageType)]")
		(var subtitleText:str = 	"hasTimeLeft		? subst('IDS_INFORMER_TIME_LEFT', [], {_timeLeft: toString(timeLeft)}) :
									isPrimeTimeStart	? 'IDS_FOG_OF_WAR_RULES'
														: null")
	)

	(controller $Instance renderer='CommonInformer'
		(args
			_iconUrl = "'url:../service_kit/battle_types/ClanBattle.png'"
			_textItems = "textItems"
			_subtitleText = "subtitleText"
		)
	)
)

(def element InformerBrawlBattles (_data:dict)
	(scope
		(var brawlSeasonEntity:gfx = "$datahub.getSingleEntity(CC.brawlBattlesSeason)")
		
		(var countPlayers:number = "brawlSeasonEntity.divisionRestrictions.shipsCount[0]" (event "brawlSeasonEntity.divisionRestrictions.evUpdate"))
		(var divisionSize:number = "brawlSeasonEntity.divisionRestrictions.shipsCount[1]" (event "brawlSeasonEntity.divisionRestrictions.evUpdate"))
		(var isDivisionEnabled:bool = "divisionSize > 1")
		(var isFogOfWar:bool = "brawlSeasonEntity.battleSeasonInfo.isFogOfWar")
		(var isPromo:bool = "_data.messageType == SC.Common.BRAWL_INFORMER_TYPES.PROMO")
		(var isStart:bool = "_data.messageType == SC.Common.BRAWL_INFORMER_TYPES.START")
		(var isFinish:bool = "_data.messageType == SC.Common.BRAWL_INFORMER_TYPES.END")
		(var hasTime:bool = "isPromo || isFinish")
		(var brawlFormat:str = "isDivisionEnabled ? '_DIVISION' : '_SOLO'")
		(var fogOfWarFormat:str = "isFogOfWar ? '_WITH_FOG_OF_WAR' : ''")

		(var countdownTime:number = "isPromo ? _data.startTime : _data.finishTime")
		(macro SERVER_TIME_SCOPE)
		(macro COUNTDOWN_SCOPE "'timeLeft'" "countdownTime" "'HIGHEST,WITH_DAYS'")

		(var subtitleText:str = "hasTime 	? subst('IDS_INFORMER_TIME_LEFT', [], {_timeLeft: toString(timeLeft)}) :
								isStart		? subst('IDS_BRAWL_BATTLE_INFORMER' + brawlFormat + fogOfWarFormat, [],
														{	_maxPlayers: 	toString(countPlayers),
															_divisionSize: 	toString(divisionSize)})
											: null")
	)

	(controller $Instance renderer='CommonInformer'
		(args
			_iconUrl = "'url:../service_kit/battle_types/BrawlBattle.png'"
			_textItems = "['IDS_BRAWL_BATTLE_INFORMER_TYPE_' + _data.messageType]"
			_subtitleText = "subtitleText"
		)
	)
)

(def element InformerExpendablesExpired (_data:dict)
	(element CommonInformer
		_iconUrl = "'url:../service_kit/markers/marker_attention_huge.png'"
		_textItems = "[ _data.data ]"
		_subtitleText = "_data.subtitle ? _data.subtitle : null"
	)
)

(def element InformerExpendablesReplaced (_data:dict)
	(scope
		(var iconUrl:str = "_data.hasSignals && _data.hasBoosts		? 'url:../service_kit/markers/all_downgrade.png' :
												_data.hasSignals	? 'url:../service_kit/markers/signal_downgrade.png' :
												_data.hasBoosts		? 'url:../service_kit/markers/bonus_downgrade.png'
																	: 'url:../service_kit/markers/all_downgrade.png'")
	)
	(element CommonInformer
		_iconUrl = "iconUrl"
		_textItems = "[ _data.data ]"
		_subtitleText = "_data.subtitle ? _data.subtitle : null"
	)
)

(def element InformerParagonsSeason (_data:dict)
	(scope
		(var finishTime:number = "_data.finishTime")
		(macro SERVER_TIME_SCOPE)
		(macro COUNTDOWN_SCOPE "'timeLeft'" "finishTime" "'HIGHEST,WITH_DAYS'")
	)
	(bindcall externalCall "'inputMapping.onAction'" "['setParagonsInformerSeen', { messageType: _data.messageType }]" watch=false on='addedToStage')

	(controller $Instance renderer='CommonInformer'
		(args
			_iconUrl = 'url:../reward_icons/paragonXP.png'
			_textItems = "	_data.messageType == SC.Common.PARAGON_INFORMER_TYPES.ACTIVE_SEASON_NOT_DROPPED ||
							_data.messageType == SC.Common.PARAGON_INFORMER_TYPES.ACTIVE_SEASON_DROPPED 		? [ subst('IDS_PARAGONS_INFORMER_TYPE_' + _data.messageType, [], {timeLeft: toString(timeLeft)}) ]
																												: [ 'IDS_PARAGONS_INFORMER_TYPE_' + _data.messageType ]"
		)
	)
)

(def element InformerNewbieQuest (_data:dict)
	(scope
		(var isQuestDone:bool = "_data.messageType == SC.Common.NEWBIE_QUESTS_INFORMER_TYPES.DONE")
		(var iconUrl:str = "isQuestDone	? 'url:../sse/newbie_quest/informer_complete.png'
										: 'url:../sse/newbie_quest/informer_new.png'")

		(var status:str = "isQuestDone ? SC.Ui_styles.UNIFIED_STATUS.CHECK : SC.Ui_styles.UNIFIED_STATUS.DEFAULT")
		(var textItems:array = "isQuestDone ? [ 'IDS_NEWBIE_QUESTS_INFORMER_DONE'] : [ 'IDS_NEWBIE_QUESTS_INFORMER_NEW']")
	)

	(block
		(controller $Instance renderer='CommonInformer'
			(args
				_iconUrl = "iconUrl"
				_textClass = '$TextDefaultBold21NM'
				_textItems = "textItems"
				_unifiedStatus = "status"
				_isStayOnClick = "true"
			)
		)
	)
	(element HorizontalDividerTwoPx)
	(block
		(style (width = 100%) (align = "center|middle") (paddingTop = "M") (paddingBottom = "M"))

		(element DefaultButton
			_width = 140
			_label = 'IDS_NEWBIE_QUESTS_INFORMER_DETAILS_BUTTON'
			_dispatchedEv = 'evHideMessage'
			_methods = "[	{	type: 'inputMapping.onAction',
								name: 'navigateTo',
								args: { route: SC.Ui_windows.ROUTE.SSE_NEWBIE_QUESTS,
										data: { questId: _data.newbieQuestId } } 
							},
							{	type: 'inputMapping.onAction',
								name: 'setUserPref',
								args: {name:'isNQInformerClicked', value: true}
							}]"
		)
	)
)
